
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d54  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  20000008  08001f08  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  08001f08  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002c  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a9aa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000185b  00000000  00000000  0002a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000630  00000000  00000000  0002c240  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0002c870  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000357c  00000000  00000000  0002cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000025ba  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003292e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001770  00000000  00000000  000329ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ed0 	.word	0x08001ed0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08001ed0 	.word	0x08001ed0

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4a13      	ldr	r2, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <SystemInit+0x60>)
 8000224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000228:	609a      	str	r2, [r3, #8]
#endif
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000268:	2003      	movs	r0, #3
 800026a:	f000 f8f9 	bl	8000460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800026e:	200f      	movs	r0, #15
 8000270:	f000 f810 	bl	8000294 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000274:	f000 f806 	bl	8000284 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023c00 	.word	0x40023c00

08000284 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
	...

08000294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800029c:	f000 fee4 	bl	8001068 <HAL_RCC_GetHCLKFreq>
 80002a0:	4602      	mov	r2, r0
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <HAL_InitTick+0x34>)
 80002a4:	fba3 2302 	umull	r2, r3, r3, r2
 80002a8:	099b      	lsrs	r3, r3, #6
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f8ff 	bl	80004ae <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	f04f 30ff 	mov.w	r0, #4294967295
 80002b8:	f000 f8dd 	bl	8000476 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002bc:	2300      	movs	r3, #0
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	10624dd3 	.word	0x10624dd3

080002cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  uwTick++;
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HAL_IncTick+0x18>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <HAL_IncTick+0x18>)
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	20000024 	.word	0x20000024

080002e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return uwTick;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <HAL_GetTick+0x14>)
 80002ee:	681b      	ldr	r3, [r3, #0]
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000024 	.word	0x20000024

08000300 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f003 0307 	and.w	r3, r3, #7
 800030e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <NVIC_SetPriorityGrouping+0x44>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000316:	68ba      	ldr	r2, [r7, #8]
 8000318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800031c:	4013      	ands	r3, r2
 800031e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800032c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <NVIC_SetPriorityGrouping+0x44>)
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	60d3      	str	r3, [r2, #12]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <NVIC_GetPriorityGrouping+0x18>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	f003 0307 	and.w	r3, r3, #7
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000374:	2b00      	cmp	r3, #0
 8000376:	da0b      	bge.n	8000390 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	490d      	ldr	r1, [pc, #52]	; (80003b0 <NVIC_SetPriority+0x4c>)
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	3b04      	subs	r3, #4
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	440b      	add	r3, r1
 800038c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800038e:	e009      	b.n	80003a4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000390:	4908      	ldr	r1, [pc, #32]	; (80003b4 <NVIC_SetPriority+0x50>)
 8000392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	0112      	lsls	r2, r2, #4
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	440b      	add	r3, r1
 80003a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	e000e100 	.word	0xe000e100

080003b8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	f1c3 0307 	rsb	r3, r3, #7
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	bf28      	it	cs
 80003d6:	2304      	movcs	r3, #4
 80003d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	3304      	adds	r3, #4
 80003de:	2b06      	cmp	r3, #6
 80003e0:	d902      	bls.n	80003e8 <NVIC_EncodePriority+0x30>
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3b03      	subs	r3, #3
 80003e6:	e000      	b.n	80003ea <NVIC_EncodePriority+0x32>
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	2201      	movs	r2, #1
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	401a      	ands	r2, r3
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003fe:	2101      	movs	r1, #1
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	1e59      	subs	r1, r3, #1
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	4313      	orrs	r3, r2
         );
}
 800040e:	4618      	mov	r0, r3
 8000410:	3724      	adds	r7, #36	; 0x24
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3b01      	subs	r3, #1
 8000428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800042c:	d301      	bcc.n	8000432 <SysTick_Config+0x16>
 800042e:	2301      	movs	r3, #1
 8000430:	e00f      	b.n	8000452 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <SysTick_Config+0x40>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800043a:	210f      	movs	r1, #15
 800043c:	f04f 30ff 	mov.w	r0, #4294967295
 8000440:	f7ff ff90 	bl	8000364 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <SysTick_Config+0x40>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <SysTick_Config+0x40>)
 800044c:	2207      	movs	r2, #7
 800044e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	e000e010 	.word	0xe000e010

08000460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ff49 	bl	8000300 <NVIC_SetPriorityGrouping>
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000476:	b580      	push	{r7, lr}
 8000478:	b086      	sub	sp, #24
 800047a:	af00      	add	r7, sp, #0
 800047c:	4603      	mov	r3, r0
 800047e:	60b9      	str	r1, [r7, #8]
 8000480:	607a      	str	r2, [r7, #4]
 8000482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000488:	f7ff ff5e 	bl	8000348 <NVIC_GetPriorityGrouping>
 800048c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	6978      	ldr	r0, [r7, #20]
 8000494:	f7ff ff90 	bl	80003b8 <NVIC_EncodePriority>
 8000498:	4602      	mov	r2, r0
 800049a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff5f 	bl	8000364 <NVIC_SetPriority>
}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ffb0 	bl	800041c <SysTick_Config>
 80004bc:	4603      	mov	r3, r0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	e157      	b.n	8000794 <HAL_GPIO_Init+0x2cc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80004e4:	2201      	movs	r2, #1
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	f040 8146 	bne.w	800078e <HAL_GPIO_Init+0x2c6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d003      	beq.n	8000512 <HAL_GPIO_Init+0x4a>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b12      	cmp	r3, #18
 8000510:	d123      	bne.n	800055a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	08da      	lsrs	r2, r3, #3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3208      	adds	r2, #8
 800051a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800051e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	220f      	movs	r2, #15
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	4013      	ands	r3, r2
 8000534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	4313      	orrs	r3, r2
 800054a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	08da      	lsrs	r2, r3, #3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3208      	adds	r2, #8
 8000554:	69b9      	ldr	r1, [r7, #24]
 8000556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	2203      	movs	r2, #3
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f003 0203 	and.w	r2, r3, #3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	69ba      	ldr	r2, [r7, #24]
 8000584:	4313      	orrs	r3, r2
 8000586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d00b      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d007      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005a2:	2b11      	cmp	r3, #17
 80005a4:	d003      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d130      	bne.n	8000610 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2203      	movs	r2, #3
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	4013      	ands	r3, r2
 80005c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005e4:	2201      	movs	r2, #1
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	69ba      	ldr	r2, [r7, #24]
 80005f0:	4013      	ands	r3, r2
 80005f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	f003 0201 	and.w	r2, r3, #1
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	2203      	movs	r2, #3
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	69ba      	ldr	r2, [r7, #24]
 8000624:	4013      	ands	r3, r2
 8000626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	69ba      	ldr	r2, [r7, #24]
 8000636:	4313      	orrs	r3, r2
 8000638:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	2b00      	cmp	r3, #0
 800064a:	f000 80a0 	beq.w	800078e <HAL_GPIO_Init+0x2c6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4a56      	ldr	r2, [pc, #344]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 8000650:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 8000652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000666:	4a51      	ldr	r2, [pc, #324]	; (80007ac <HAL_GPIO_Init+0x2e4>)
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	089b      	lsrs	r3, r3, #2
 800066c:	3302      	adds	r3, #2
 800066e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	220f      	movs	r2, #15
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	69ba      	ldr	r2, [r7, #24]
 8000686:	4013      	ands	r3, r2
 8000688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a48      	ldr	r2, [pc, #288]	; (80007b0 <HAL_GPIO_Init+0x2e8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d019      	beq.n	80006c6 <HAL_GPIO_Init+0x1fe>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <HAL_GPIO_Init+0x2ec>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d013      	beq.n	80006c2 <HAL_GPIO_Init+0x1fa>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a46      	ldr	r2, [pc, #280]	; (80007b8 <HAL_GPIO_Init+0x2f0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d00d      	beq.n	80006be <HAL_GPIO_Init+0x1f6>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a45      	ldr	r2, [pc, #276]	; (80007bc <HAL_GPIO_Init+0x2f4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d007      	beq.n	80006ba <HAL_GPIO_Init+0x1f2>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a44      	ldr	r2, [pc, #272]	; (80007c0 <HAL_GPIO_Init+0x2f8>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_GPIO_Init+0x1ee>
 80006b2:	2304      	movs	r3, #4
 80006b4:	e008      	b.n	80006c8 <HAL_GPIO_Init+0x200>
 80006b6:	2305      	movs	r3, #5
 80006b8:	e006      	b.n	80006c8 <HAL_GPIO_Init+0x200>
 80006ba:	2303      	movs	r3, #3
 80006bc:	e004      	b.n	80006c8 <HAL_GPIO_Init+0x200>
 80006be:	2302      	movs	r3, #2
 80006c0:	e002      	b.n	80006c8 <HAL_GPIO_Init+0x200>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <HAL_GPIO_Init+0x200>
 80006c6:	2300      	movs	r3, #0
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	f002 0203 	and.w	r2, r2, #3
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	4093      	lsls	r3, r2
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006d8:	4934      	ldr	r1, [pc, #208]	; (80007ac <HAL_GPIO_Init+0x2e4>)
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	3302      	adds	r3, #2
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	43db      	mvns	r3, r3
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	4013      	ands	r3, r2
 80006f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000702:	69ba      	ldr	r2, [r7, #24]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	4313      	orrs	r3, r2
 8000708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	43db      	mvns	r3, r3
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	4013      	ands	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4313      	orrs	r3, r2
 8000732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000734:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	43db      	mvns	r3, r3
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	4013      	ands	r3, r2
 8000748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	4313      	orrs	r3, r2
 800075c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	43db      	mvns	r3, r3
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	4013      	ands	r3, r2
 8000772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4313      	orrs	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_GPIO_Init+0x2fc>)
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3301      	adds	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	f67f aea4 	bls.w	80004e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800079c:	bf00      	nop
 800079e:	3724      	adds	r7, #36	; 0x24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40013800 	.word	0x40013800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40013c00 	.word	0x40013c00

080007c8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 80007d0:	2300      	movs	r3, #0
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d06c      	beq.n	80008ba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80007e0:	4ba9      	ldr	r3, [pc, #676]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d00c      	beq.n	8000806 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007ec:	4ba6      	ldr	r3, [pc, #664]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80007f4:	2b08      	cmp	r3, #8
 80007f6:	d112      	bne.n	800081e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007f8:	4ba3      	ldr	r3, [pc, #652]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000804:	d10b      	bne.n	800081e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000806:	4ba0      	ldr	r3, [pc, #640]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d052      	beq.n	80008b8 <HAL_RCC_OscConfig+0xf0>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d14e      	bne.n	80008b8 <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e211      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800081e:	4b9b      	ldr	r3, [pc, #620]	; (8000a8c <HAL_RCC_OscConfig+0x2c4>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000824:	f7ff fd60 	bl	80002e8 <HAL_GetTick>
 8000828:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800082a:	e00a      	b.n	8000842 <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800082c:	f7ff fd5c 	bl	80002e8 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	f241 3288 	movw	r2, #5000	; 0x1388
 800083a:	4293      	cmp	r3, r2
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e1ff      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000842:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1ee      	bne.n	800082c <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084e:	4a8f      	ldr	r2, [pc, #572]	; (8000a8c <HAL_RCC_OscConfig+0x2c4>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	7013      	strb	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d015      	beq.n	800088c <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000860:	f7ff fd42 	bl	80002e8 <HAL_GetTick>
 8000864:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	e00a      	b.n	800087e <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fd3e 	bl	80002e8 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	f241 3288 	movw	r2, #5000	; 0x1388
 8000876:	4293      	cmp	r3, r2
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e1e1      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	4b82      	ldr	r3, [pc, #520]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0ee      	beq.n	8000868 <HAL_RCC_OscConfig+0xa0>
 800088a:	e016      	b.n	80008ba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800088c:	f7ff fd2c 	bl	80002e8 <HAL_GetTick>
 8000890:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000892:	e00a      	b.n	80008aa <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000894:	f7ff fd28 	bl	80002e8 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	f241 3288 	movw	r2, #5000	; 0x1388
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d901      	bls.n	80008aa <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e1cb      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008aa:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ee      	bne.n	8000894 <HAL_RCC_OscConfig+0xcc>
 80008b6:	e000      	b.n	80008ba <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d077      	beq.n	80009b6 <HAL_RCC_OscConfig+0x1ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80008c6:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00b      	beq.n	80008ea <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008d2:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80008da:	2b08      	cmp	r3, #8
 80008dc:	d126      	bne.n	800092c <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008de:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d120      	bne.n	800092c <HAL_RCC_OscConfig+0x164>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ea:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <HAL_RCC_OscConfig+0x13a>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d001      	beq.n	8000902 <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e19f      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	4861      	ldr	r0, [pc, #388]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6919      	ldr	r1, [r3, #16]
 8000910:	23f8      	movs	r3, #248	; 0xf8
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	fa93 f3a3 	rbit	r3, r3
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	fab3 f383 	clz	r3, r3
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800092a:	e044      	b.n	80009b6 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d02a      	beq.n	800098a <HAL_RCC_OscConfig+0x1c2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <HAL_RCC_OscConfig+0x2c8>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800093a:	f7ff fcd5 	bl	80002e8 <HAL_GetTick>
 800093e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000940:	e008      	b.n	8000954 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000942:	f7ff fcd1 	bl	80002e8 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b64      	cmp	r3, #100	; 0x64
 800094e:	d901      	bls.n	8000954 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000950:	2303      	movs	r3, #3
 8000952:	e176      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000954:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f0      	beq.n	8000942 <HAL_RCC_OscConfig+0x17a>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000960:	4849      	ldr	r0, [pc, #292]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6919      	ldr	r1, [r3, #16]
 800096e:	23f8      	movs	r3, #248	; 0xf8
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	fa93 f3a3 	rbit	r3, r3
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	fab3 f383 	clz	r3, r3
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	6003      	str	r3, [r0, #0]
 8000988:	e015      	b.n	80009b6 <HAL_RCC_OscConfig+0x1ee>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <HAL_RCC_OscConfig+0x2c8>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000990:	f7ff fcaa 	bl	80002e8 <HAL_GetTick>
 8000994:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fca6 	bl	80002e8 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b64      	cmp	r3, #100	; 0x64
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e14b      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <HAL_RCC_OscConfig+0x1d0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d030      	beq.n	8000a24 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d016      	beq.n	80009f8 <HAL_RCC_OscConfig+0x230>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <HAL_RCC_OscConfig+0x2cc>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009d0:	f7ff fc8a 	bl	80002e8 <HAL_GetTick>
 80009d4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d6:	e008      	b.n	80009ea <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d8:	f7ff fc86 	bl	80002e8 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b64      	cmp	r3, #100	; 0x64
 80009e4:	d901      	bls.n	80009ea <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e12b      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 80009ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0f0      	beq.n	80009d8 <HAL_RCC_OscConfig+0x210>
 80009f6:	e015      	b.n	8000a24 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_RCC_OscConfig+0x2cc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009fe:	f7ff fc73 	bl	80002e8 <HAL_GetTick>
 8000a02:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a06:	f7ff fc6f 	bl	80002e8 <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b64      	cmp	r3, #100	; 0x64
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e114      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f0      	bne.n	8000a06 <HAL_RCC_OscConfig+0x23e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d07c      	beq.n	8000b2a <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_RCC_OscConfig+0x2c0>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <HAL_RCC_OscConfig+0x2d0>)
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_RCC_OscConfig+0x2d0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000a54:	f7ff fc48 	bl	80002e8 <HAL_GetTick>
 8000a58:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a5a:	e008      	b.n	8000a6e <HAL_RCC_OscConfig+0x2a6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a5c:	f7ff fc44 	bl	80002e8 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b64      	cmp	r3, #100	; 0x64
 8000a68:	d901      	bls.n	8000a6e <HAL_RCC_OscConfig+0x2a6>
      {
        return HAL_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e0e9      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_RCC_OscConfig+0x2d0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f0      	beq.n	8000a5c <HAL_RCC_OscConfig+0x294>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_RCC_OscConfig+0x2d4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000a80:	f7ff fc32 	bl	80002e8 <HAL_GetTick>
 8000a84:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a86:	e016      	b.n	8000ab6 <HAL_RCC_OscConfig+0x2ee>
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40023802 	.word	0x40023802
 8000a90:	42470000 	.word	0x42470000
 8000a94:	42470e80 	.word	0x42470e80
 8000a98:	40007000 	.word	0x40007000
 8000a9c:	40023870 	.word	0x40023870
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa0:	f7ff fc22 	bl	80002e8 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d901      	bls.n	8000ab6 <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e0c5      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab6:	4b65      	ldr	r3, [pc, #404]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1ee      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x2d8>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac2:	4a63      	ldr	r2, [pc, #396]	; (8000c50 <HAL_RCC_OscConfig+0x488>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	7013      	strb	r3, [r2, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d015      	beq.n	8000b00 <HAL_RCC_OscConfig+0x338>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fc08 	bl	80002e8 <HAL_GetTick>
 8000ad8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ada:	e00a      	b.n	8000af2 <HAL_RCC_OscConfig+0x32a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000adc:	f7ff fc04 	bl	80002e8 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x32a>
        {
          return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e0a7      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af2:	4b56      	ldr	r3, [pc, #344]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0ee      	beq.n	8000adc <HAL_RCC_OscConfig+0x314>
 8000afe:	e014      	b.n	8000b2a <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b00:	f7ff fbf2 	bl	80002e8 <HAL_GetTick>
 8000b04:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b06:	e00a      	b.n	8000b1e <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	f7ff fbee 	bl	80002e8 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e091      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1e:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1ee      	bne.n	8000b08 <HAL_RCC_OscConfig+0x340>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 8086 	beq.w	8000c40 <HAL_RCC_OscConfig+0x478>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d07d      	beq.n	8000c3c <HAL_RCC_OscConfig+0x474>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d162      	bne.n	8000c0e <HAL_RCC_OscConfig+0x446>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <HAL_RCC_OscConfig+0x48c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fbcb 	bl	80002e8 <HAL_GetTick>
 8000b52:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b54:	e008      	b.n	8000b68 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b56:	f7ff fbc7 	bl	80002e8 <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b64      	cmp	r3, #100	; 0x64
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e06c      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f0      	bne.n	8000b56 <HAL_RCC_OscConfig+0x38e>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b74:	4835      	ldr	r0, [pc, #212]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69da      	ldr	r2, [r3, #28]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	085b      	lsrs	r3, r3, #1
 8000ba4:	1e59      	subs	r1, r3, #1
 8000ba6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa93 f3a3 	rbit	r3, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fab3 f383 	clz	r3, r3
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_RCC_OscConfig+0x48c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb7f 	bl	80002e8 <HAL_GetTick>
 8000bea:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fb7b 	bl	80002e8 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b64      	cmp	r3, #100	; 0x64
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e020      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f0      	beq.n	8000bee <HAL_RCC_OscConfig+0x426>
 8000c0c:	e018      	b.n	8000c40 <HAL_RCC_OscConfig+0x478>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_RCC_OscConfig+0x48c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c14:	f7ff fb68 	bl	80002e8 <HAL_GetTick>
 8000c18:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fb64 	bl	80002e8 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b64      	cmp	r3, #100	; 0x64
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e009      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_RCC_OscConfig+0x484>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x454>
 8000c3a:	e001      	b.n	8000c40 <HAL_RCC_OscConfig+0x478>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_RCC_OscConfig+0x47a>
    }
  }
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3738      	adds	r7, #56	; 0x38
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40023870 	.word	0x40023870
 8000c54:	42470060 	.word	0x42470060

08000c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c66:	4ba0      	ldr	r3, [pc, #640]	; (8000ee8 <HAL_RCC_ClockConfig+0x290>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 020f 	and.w	r2, r3, #15
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f080 80a6 	bcs.w	8000dc2 <HAL_RCC_ClockConfig+0x16a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c76:	4b9c      	ldr	r3, [pc, #624]	; (8000ee8 <HAL_RCC_ClockConfig+0x290>)
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c7e:	4b9a      	ldr	r3, [pc, #616]	; (8000ee8 <HAL_RCC_ClockConfig+0x290>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 020f 	and.w	r2, r3, #15
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e165      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c9c:	4993      	ldr	r1, [pc, #588]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000c9e:	4b93      	ldr	r3, [pc, #588]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 812d 	beq.w	8000f16 <HAL_RCC_ClockConfig+0x2be>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d107      	bne.n	8000cd4 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc4:	4b89      	ldr	r3, [pc, #548]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d119      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e143      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d003      	beq.n	8000ce4 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d107      	bne.n	8000cf4 <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce4:	4b81      	ldr	r3, [pc, #516]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e133      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	4b7d      	ldr	r3, [pc, #500]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e12b      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d04:	4979      	ldr	r1, [pc, #484]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000d06:	4b79      	ldr	r3, [pc, #484]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f023 0203 	bic.w	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d16:	f7ff fae7 	bl	80002e8 <HAL_GetTick>
 8000d1a:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d112      	bne.n	8000d4a <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d24:	e00a      	b.n	8000d3c <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d26:	f7ff fadf 	bl	80002e8 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e10f      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d1ee      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xce>
 8000d48:	e0e5      	b.n	8000f16 <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d112      	bne.n	8000d78 <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d52:	e00a      	b.n	8000d6a <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d54:	f7ff fac8 	bl	80002e8 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e0f8      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d1ee      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xfc>
 8000d76:	e0ce      	b.n	8000f16 <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d119      	bne.n	8000db4 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000d80:	e00a      	b.n	8000d98 <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d82:	f7ff fab1 	bl	80002e8 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e0e1      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000d98:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	e7f1      	b.n	8000d82 <HAL_RCC_ClockConfig+0x12a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d9e:	f7ff faa3 	bl	80002e8 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e0d3      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db4:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ee      	bne.n	8000d9e <HAL_RCC_ClockConfig+0x146>
 8000dc0:	e0a9      	b.n	8000f16 <HAL_RCC_ClockConfig+0x2be>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x188>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dce:	4947      	ldr	r1, [pc, #284]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 8087 	beq.w	8000efc <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d107      	bne.n	8000e06 <HAL_RCC_ClockConfig+0x1ae>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d119      	bne.n	8000e36 <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0aa      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d003      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x1be>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d107      	bne.n	8000e26 <HAL_RCC_ClockConfig+0x1ce>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d109      	bne.n	8000e36 <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e09a      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e092      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e36:	492d      	ldr	r1, [pc, #180]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f023 0203 	bic.w	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e48:	f7ff fa4e 	bl	80002e8 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d112      	bne.n	8000e7c <HAL_RCC_ClockConfig+0x224>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e56:	e00a      	b.n	8000e6e <HAL_RCC_ClockConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e58:	f7ff fa46 	bl	80002e8 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e076      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d1ee      	bne.n	8000e58 <HAL_RCC_ClockConfig+0x200>
 8000e7a:	e03f      	b.n	8000efc <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d112      	bne.n	8000eaa <HAL_RCC_ClockConfig+0x252>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e84:	e00a      	b.n	8000e9c <HAL_RCC_ClockConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e86:	f7ff fa2f 	bl	80002e8 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_ClockConfig+0x244>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e05f      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d1ee      	bne.n	8000e86 <HAL_RCC_ClockConfig+0x22e>
 8000ea8:	e028      	b.n	8000efc <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d11e      	bne.n	8000ef0 <HAL_RCC_ClockConfig+0x298>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000eb2:	e00a      	b.n	8000eca <HAL_RCC_ClockConfig+0x272>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb4:	f7ff fa18 	bl	80002e8 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_ClockConfig+0x272>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e048      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_RCC_ClockConfig+0x294>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	e7f1      	b.n	8000eb4 <HAL_RCC_ClockConfig+0x25c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed0:	f7ff fa0a 	bl	80002e8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d906      	bls.n	8000ef0 <HAL_RCC_ClockConfig+0x298>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e03a      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00
 8000eec:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_RCC_ClockConfig+0x30c>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e9      	bne.n	8000ed0 <HAL_RCC_ClockConfig+0x278>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_RCC_ClockConfig+0x310>)
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_RCC_ClockConfig+0x310>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 020f 	and.w	r2, r3, #15
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d001      	beq.n	8000f16 <HAL_RCC_ClockConfig+0x2be>
    {
      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e022      	b.n	8000f5c <HAL_RCC_ClockConfig+0x304>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x2dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f22:	4910      	ldr	r1, [pc, #64]	; (8000f64 <HAL_RCC_ClockConfig+0x30c>)
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_RCC_ClockConfig+0x30c>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f40:	4908      	ldr	r1, [pc, #32]	; (8000f64 <HAL_RCC_ClockConfig+0x30c>)
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_RCC_ClockConfig+0x30c>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f54:	200f      	movs	r0, #15
 8000f56:	f7ff f99d 	bl	8000294 <HAL_InitTick>
  
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d006      	beq.n	8000f9c <HAL_RCC_GetSysClockFreq+0x30>
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d007      	beq.n	8000fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d158      	bne.n	8001048 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000f98:	623b      	str	r3, [r7, #32]
       break;
 8000f9a:	e058      	b.n	800104e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000f9e:	623b      	str	r3, [r7, #32]
      break;
 8000fa0:	e055      	b.n	800104e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000faa:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d017      	beq.n	8000fe8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000fb8:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fc8:	400b      	ands	r3, r1
 8000fca:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000fce:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	6979      	ldr	r1, [r7, #20]
 8000fd2:	fa91 f1a1 	rbit	r1, r1
 8000fd6:	6139      	str	r1, [r7, #16]
  return(result);
 8000fd8:	6939      	ldr	r1, [r7, #16]
 8000fda:	fab1 f181 	clz	r1, r1
 8000fde:	40cb      	lsrs	r3, r1
 8000fe0:	fb03 f302 	mul.w	r3, r3, r2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	e016      	b.n	8001016 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000ffe:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	fa91 f1a1 	rbit	r1, r1
 8001006:	60b9      	str	r1, [r7, #8]
  return(result);
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	fab1 f181 	clz	r1, r1
 800100e:	40cb      	lsrs	r3, r1
 8001010:	fb03 f302 	mul.w	r3, r3, r2
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800101e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001022:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	603b      	str	r3, [r7, #0]
  return(result);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	3301      	adds	r3, #1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800103c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	623b      	str	r3, [r7, #32]
      break;
 8001046:	e002      	b.n	800104e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_RCC_GetSysClockFreq+0xf4>)
 800104a:	623b      	str	r3, [r7, #32]
      break;
 800104c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800104e:	6a3b      	ldr	r3, [r7, #32]
}
 8001050:	4618      	mov	r0, r3
 8001052:	372c      	adds	r7, #44	; 0x2c
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800
 8001060:	00f42400 	.word	0x00f42400
 8001064:	007a1200 	.word	0x007a1200

08001068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800106e:	f7ff ff7d 	bl	8000f6c <HAL_RCC_GetSysClockFreq>
 8001072:	4601      	mov	r1, r0
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_RCC_GetHCLKFreq+0x44>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800107c:	23f0      	movs	r3, #240	; 0xf0
 800107e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	603b      	str	r3, [r7, #0]
  return(result);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	fa22 f303 	lsr.w	r3, r2, r3
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_RCC_GetHCLKFreq+0x48>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	fa21 f303 	lsr.w	r3, r1, r3
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_RCC_GetHCLKFreq+0x4c>)
 800109c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_RCC_GetHCLKFreq+0x4c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	08001ee8 	.word	0x08001ee8
 80010b4:	20000000 	.word	0x20000000

080010b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e057      	b.n	800117a <HAL_SPI_Init+0xc2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f873 	bl	80011ca <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6851      	ldr	r1, [r2, #4]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6892      	ldr	r2, [r2, #8]
 8001108:	4311      	orrs	r1, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68d2      	ldr	r2, [r2, #12]
 800110e:	4311      	orrs	r1, r2
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6912      	ldr	r2, [r2, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001114:	4311      	orrs	r1, r2
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6952      	ldr	r2, [r2, #20]
 800111a:	4311      	orrs	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6992      	ldr	r2, [r2, #24]
 8001120:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001124:	4311      	orrs	r1, r2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	69d2      	ldr	r2, [r2, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800112a:	4311      	orrs	r1, r2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6a12      	ldr	r2, [r2, #32]
 8001130:	4311      	orrs	r1, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001136:	430a      	orrs	r2, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001138:	601a      	str	r2, [r3, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6992      	ldr	r2, [r2, #24]
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	f002 0104 	and.w	r1, r2, #4
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001158:	611a      	str	r2, [r3, #16]

  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	69d2      	ldr	r2, [r2, #28]
 8001164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001168:	61da      	str	r2, [r3, #28]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e016      	b.n	80011c2 <HAL_SPI_DeInit+0x40>
  }

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f81a 	bl	80011de <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspInit could be implemented in the user file
   */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit could be implemented in the user file
   */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	80fb      	strh	r3, [r7, #6]
  __IO uint16_t tmpreg;
  uint32_t tmp = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]

  if(hspi->State == HAL_SPI_STATE_READY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	f040 8170 	bne.w	80014f4 <HAL_SPI_Receive+0x302>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <HAL_SPI_Receive+0x2e>
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_SPI_Receive+0x32>
    {
      return  HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e168      	b.n	80014f6 <HAL_SPI_Receive+0x304>
    }

    /* Process Locked */
    __HAL_LOCK(hspi);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_SPI_Receive+0x40>
 800122e:	2302      	movs	r3, #2
 8001230:	e161      	b.n	80014f6 <HAL_SPI_Receive+0x304>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Configure communication */
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2222      	movs	r2, #34	; 0x22
 800123e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pData;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	87da      	strh	r2, [r3, #62]	; 0x3e

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxXferSize   = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount  = 0;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Configure communication direction : 1Line */
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127a:	d107      	bne.n	800128c <HAL_SPI_Receive+0x9a>
    {
      SPI_1LINE_RX(hspi);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800128a:	601a      	str	r2, [r3, #0]
    }

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001294:	d10f      	bne.n	80012b6 <HAL_SPI_Receive+0xc4>
    {
      SPI_RESET_CRC(hspi);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b4:	601a      	str	r2, [r3, #0]
    }
    
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012be:	d112      	bne.n	80012e6 <HAL_SPI_Receive+0xf4>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10e      	bne.n	80012e6 <HAL_SPI_Receive+0xf4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f90e 	bl	80014fe <HAL_SPI_TransmitReceive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	e107      	b.n	80014f6 <HAL_SPI_Receive+0x304>
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f0:	2b40      	cmp	r3, #64	; 0x40
 80012f2:	d007      	beq.n	8001304 <HAL_SPI_Receive+0x112>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001302:	601a      	str	r2, [r3, #0]
    }

    /* Receive data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d14a      	bne.n	80013a2 <HAL_SPI_Receive+0x1b0>
    {
      while(hspi->RxXferCount > 1)
 800130c:	e01a      	b.n	8001344 <HAL_SPI_Receive+0x152>
      {
        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fb59 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_SPI_Receive+0x132>
        { 
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0e8      	b.n	80014f6 <HAL_SPI_Receive+0x304>
        }

        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	1c59      	adds	r1, r3, #1
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6391      	str	r1, [r2, #56]	; 0x38
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	68d2      	ldr	r2, [r2, #12]
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800133c:	3b01      	subs	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	87da      	strh	r2, [r3, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001348:	2b01      	cmp	r3, #1
 800134a:	d8e0      	bhi.n	800130e <HAL_SPI_Receive+0x11c>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001354:	d136      	bne.n	80013c4 <HAL_SPI_Receive+0x1d2>
      {
        hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e02d      	b.n	80013c4 <HAL_SPI_Receive+0x1d2>
    else
    {
      while(hspi->RxXferCount > 1)
      {
        /* Wait until RXNE flag is set to read data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fb2c 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_SPI_Receive+0x18c>
        { 
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0bb      	b.n	80014f6 <HAL_SPI_Receive+0x304>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	68d2      	ldr	r2, [r2, #12]
 8001388:	b292      	uxth	r2, r2
 800138a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	1c9a      	adds	r2, r3, #2
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800139a:	3b01      	subs	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d8de      	bhi.n	8001368 <HAL_SPI_Receive+0x176>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b2:	d107      	bne.n	80013c4 <HAL_SPI_Receive+0x1d2>
      {
        hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until RXNE flag is set */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	2101      	movs	r1, #1
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 fafe 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_SPI_Receive+0x1e8>
    { 
      return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e08d      	b.n	80014f6 <HAL_SPI_Receive+0x304>
    }

    /* Receive last data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <HAL_SPI_Receive+0x206>
    {
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	6391      	str	r1, [r2, #56]	; 0x38
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	68d2      	ldr	r2, [r2, #12]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_SPI_Receive+0x21e>
    }
    /* Receive last data in 16 Bit mode */
    else
    {
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	68d2      	ldr	r2, [r2, #12]
 8001402:	b292      	uxth	r2, r2
 8001404:	801a      	strh	r2, [r3, #0]
      hspi->pRxBuffPtr+=2;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	1c9a      	adds	r2, r3, #2
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    hspi->RxXferCount--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Wait until RXNE flag is set: CRC Received */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	d116      	bne.n	8001454 <HAL_SPI_Receive+0x262>
    {
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 facd 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_SPI_Receive+0x256>
      {
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e056      	b.n	80014f6 <HAL_SPI_Receive+0x304>
      }

      /* Read CRC to Flush RXNE flag */
      tmpreg = hspi->Instance->DR;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	b29b      	uxth	r3, r3
 8001450:	827b      	strh	r3, [r7, #18]
      UNUSED(tmpreg);
 8001452:	8a7b      	ldrh	r3, [r7, #18]
    }
    
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800145c:	d111      	bne.n	8001482 <HAL_SPI_Receive+0x290>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001466:	d004      	beq.n	8001472 <HAL_SPI_Receive+0x280>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001470:	d107      	bne.n	8001482 <HAL_SPI_Receive+0x290>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001480:	601a      	str	r2, [r3, #0]
    }

    hspi->State = HAL_SPI_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b10      	cmp	r3, #16
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	617b      	str	r3, [r7, #20]
    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014a8:	d11e      	bne.n	80014e8 <HAL_SPI_Receive+0x2f6>
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <HAL_SPI_Receive+0x2f6>
    {  
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f043 0202 	orr.w	r2, r3, #2
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014da:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR; 
 80014e4:	2301      	movs	r3, #1
 80014e6:	e006      	b.n	80014f6 <HAL_SPI_Receive+0x304>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e000      	b.n	80014f6 <HAL_SPI_Receive+0x304>
  }
  else
  {
    return HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b088      	sub	sp, #32
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	807b      	strh	r3, [r7, #2]
  __IO uint16_t tmpreg;
  uint32_t tmpstate = 0, tmp = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  
  tmpstate = hspi->State; 
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800151a:	b2db      	uxtb	r3, r3
 800151c:	61fb      	str	r3, [r7, #28]
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <HAL_SPI_TransmitReceive+0x2e>
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b22      	cmp	r3, #34	; 0x22
 8001528:	f040 823d 	bne.w	80019a6 <HAL_SPI_TransmitReceive+0x4a8>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_SPI_TransmitReceive+0x40>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_SPI_TransmitReceive+0x40>
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_SPI_TransmitReceive+0x44>
    {
      return  HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e232      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_SPI_TransmitReceive+0x52>
 800154c:	2302      	movs	r3, #2
 800154e:	e22b      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d103      	bne.n	800156c <HAL_SPI_TransmitReceive+0x6e>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2232      	movs	r2, #50	; 0x32
 8001568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015aa:	d10f      	bne.n	80015cc <HAL_SPI_TransmitReceive+0xce>
    {
      SPI_RESET_CRC(hspi);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	2b40      	cmp	r3, #64	; 0x40
 80015d8:	d007      	beq.n	80015ea <HAL_SPI_TransmitReceive+0xec>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e8:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f2:	f040 80be 	bne.w	8001772 <HAL_SPI_TransmitReceive+0x274>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_SPI_TransmitReceive+0x112>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001606:	d114      	bne.n	8001632 <HAL_SPI_TransmitReceive+0x134>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800160c:	2b01      	cmp	r3, #1
 800160e:	d110      	bne.n	8001632 <HAL_SPI_TransmitReceive+0x134>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001636:	2b00      	cmp	r3, #0
 8001638:	d174      	bne.n	8001724 <HAL_SPI_TransmitReceive+0x226>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001642:	d107      	bne.n	8001654 <HAL_SPI_TransmitReceive+0x156>
        {
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001652:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f9b6 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_SPI_TransmitReceive+0x16c>
        { 
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e19e      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	68d2      	ldr	r2, [r2, #12]
 8001674:	b292      	uxth	r2, r2
 8001676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	1c9a      	adds	r2, r3, #2
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800168e:	e11f      	b.n	80018d0 <HAL_SPI_TransmitReceive+0x3d2>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	2200      	movs	r2, #0
 8001694:	2102      	movs	r1, #2
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f998 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_SPI_TransmitReceive+0x1a8>
          { 
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e180      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	1c9a      	adds	r2, r3, #2
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10c      	bne.n	80016ea <HAL_SPI_TransmitReceive+0x1ec>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016d8:	d107      	bne.n	80016ea <HAL_SPI_TransmitReceive+0x1ec>
          {
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016e8:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f96b 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_SPI_TransmitReceive+0x202>
          { 
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e153      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	b292      	uxth	r2, r2
 800170c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	1c9a      	adds	r2, r3, #2
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1b1      	bne.n	8001690 <HAL_SPI_TransmitReceive+0x192>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 80cd 	bne.w	80018d0 <HAL_SPI_TransmitReceive+0x3d2>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f945 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_SPI_TransmitReceive+0x24e>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e12d      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	68d2      	ldr	r2, [r2, #12]
 8001756:	b292      	uxth	r2, r2
 8001758:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	1c9a      	adds	r2, r3, #2
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001770:	e0ae      	b.n	80018d0 <HAL_SPI_TransmitReceive+0x3d2>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_SPI_TransmitReceive+0x28e>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001782:	d112      	bne.n	80017aa <HAL_SPI_TransmitReceive+0x2ac>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10e      	bne.n	80017aa <HAL_SPI_TransmitReceive+0x2ac>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	1c58      	adds	r0, r3, #1
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	6308      	str	r0, [r1, #48]	; 0x30
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d16b      	bne.n	800188a <HAL_SPI_TransmitReceive+0x38c>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ba:	d107      	bne.n	80017cc <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017ca:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8fa 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_SPI_TransmitReceive+0x2e4>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0e2      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	68d2      	ldr	r2, [r2, #12]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80017fc:	e068      	b.n	80018d0 <HAL_SPI_TransmitReceive+0x3d2>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	2200      	movs	r2, #0
 8001802:	2102      	movs	r1, #2
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f8e1 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_SPI_TransmitReceive+0x316>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0c9      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	1c58      	adds	r0, r3, #1
 800181e:	68f9      	ldr	r1, [r7, #12]
 8001820:	6308      	str	r0, [r1, #48]	; 0x30
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_SPI_TransmitReceive+0x356>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001842:	d107      	bne.n	8001854 <HAL_SPI_TransmitReceive+0x356>
          {
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001852:	601a      	str	r2, [r3, #0]
          }

            /* Wait until RXNE flag is set */
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	2101      	movs	r1, #1
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f8b6 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_SPI_TransmitReceive+0x36c>
            {
              return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e09e      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
            }
            
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	1c59      	adds	r1, r3, #1
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6391      	str	r1, [r2, #56]	; 0x38
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	68d2      	ldr	r2, [r2, #12]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1b5      	bne.n	80017fe <HAL_SPI_TransmitReceive+0x300>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11a      	bne.n	80018d0 <HAL_SPI_TransmitReceive+0x3d2>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	2200      	movs	r2, #0
 800189e:	2101      	movs	r1, #1
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f893 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_SPI_TransmitReceive+0x3b2>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e07b      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	1c59      	adds	r1, r3, #1
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6391      	str	r1, [r2, #56]	; 0x38
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	68d2      	ldr	r2, [r2, #12]
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d8:	d116      	bne.n	8001908 <HAL_SPI_TransmitReceive+0x40a>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	2200      	movs	r2, #0
 80018de:	2101      	movs	r1, #1
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f873 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_SPI_TransmitReceive+0x3fe>
      {
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f043 0202 	orr.w	r2, r3, #2
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e055      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	82fb      	strh	r3, [r7, #22]
      UNUSED(tmpreg);
 8001906:	8afb      	ldrh	r3, [r7, #22]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	2201      	movs	r2, #1
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f85c 	bl	80019cc <SPI_WaitOnFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <HAL_SPI_TransmitReceive+0x42c>
    {
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0220 	orr.w	r2, r3, #32
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e03e      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b10      	cmp	r3, #16
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	61bb      	str	r3, [r7, #24]
    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001950:	d123      	bne.n	800199a <HAL_SPI_TransmitReceive+0x49c>
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_SPI_TransmitReceive+0x49c>
    {
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0202 	orr.w	r2, r3, #2
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196c:	d10f      	bne.n	800198e <HAL_SPI_TransmitReceive+0x490>
      {
        SPI_RESET_CRC(hspi);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800198c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      
      return HAL_ERROR; 
 8001996:	2301      	movs	r3, #1
 8001998:	e006      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x4aa>
  }
  else
  {
    return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return hspi->State;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019be:	b2db      	uxtb	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019e0:	f7fe fc82 	bl	80002e8 <HAL_GetTick>
 80019e4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8086 	bne.w	8001afa <SPI_WaitOnFlagUntilTimeout+0x12e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80019ee:	e03d      	b.n	8001a6c <SPI_WaitOnFlagUntilTimeout+0xa0>
    {
      if(Timeout != HAL_MAX_DELAY)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d039      	beq.n	8001a6c <SPI_WaitOnFlagUntilTimeout+0xa0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <SPI_WaitOnFlagUntilTimeout+0x42>
 80019fe:	f7fe fc73 	bl	80002e8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d92e      	bls.n	8001a6c <SPI_WaitOnFlagUntilTimeout+0xa0>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6852      	ldr	r2, [r2, #4]
 8001a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a1c:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2c:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a36:	d10f      	bne.n	8001a58 <SPI_WaitOnFlagUntilTimeout+0x8c>
          {
            SPI_RESET_CRC(hspi);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a56:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e04f      	b.n	8001b0c <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	401a      	ands	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1b9      	bne.n	80019f0 <SPI_WaitOnFlagUntilTimeout+0x24>
 8001a7c:	e045      	b.n	8001b0a <SPI_WaitOnFlagUntilTimeout+0x13e>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d039      	beq.n	8001afa <SPI_WaitOnFlagUntilTimeout+0x12e>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <SPI_WaitOnFlagUntilTimeout+0xd0>
 8001a8c:	f7fe fc2c 	bl	80002e8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	1ad2      	subs	r2, r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d92e      	bls.n	8001afa <SPI_WaitOnFlagUntilTimeout+0x12e>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	6852      	ldr	r2, [r2, #4]
 8001aa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001aaa:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aba:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac4:	d10f      	bne.n	8001ae6 <SPI_WaitOnFlagUntilTimeout+0x11a>
          {
            SPI_RESET_CRC(hspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae4:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e008      	b.n	8001b0c <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d0b9      	beq.n	8001a7e <SPI_WaitOnFlagUntilTimeout+0xb2>
        }
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
  ldr  r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3e:	f7fe fb49 	bl	80001d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f000 f999 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f000 f821 	bl	8001b8c <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8001b50:	08001f00 	.word	0x08001f00
  ldr  r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b58:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001b5c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001b60:	20000080 	.word	0x20000080

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>

08001b66 <InitSPI>:

#include "SPITest.h"
#include "stm32f4xx_nucleo.h"

void InitSPI (void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
	// When I call this function, LED2 doesn't work. I need to check.
	mySPI_Init();
 8001b6a:	f000 f965 	bl	8001e38 <mySPI_Init>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <DoSPISlaveReceive>:
	if ( TxData == RxData )
		bSame = 0;
}

void DoSPISlaveReceive	( void )
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
	uint8_t dummy = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	71fb      	strb	r3, [r7, #7]

	mySPI_ReadByte();
 8001b7c:	f000 f962 	bl	8001e44 <mySPI_ReadByte>

	dummy = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	71fb      	strb	r3, [r7, #7]

	return;}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  HAL_Init();
 8001b92:	f7fe fb55 	bl	8000240 <HAL_Init>
  
  /* Configure the System clock to 84 MHz */
  SystemClock_Config();
 8001b96:	f000 f807 	bl	8001ba8 <SystemClock_Config>

  /* Add your application code here  */
//BSP_LED_Init(LED2); // In case of calling InitSPI(), LED2 related functions can't be used; the pin is shared..

  uint8_t spiTxData = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  InitSPI();
 8001b9e:	f7ff ffe2 	bl	8001b66 <InitSPI>
	  spiTxData++;

	  HAL_Delay(1000);
	  */

	  DoSPISlaveReceive();
 8001ba2:	f7ff ffe6 	bl	8001b72 <DoSPISlaveReceive>
 8001ba6:	e7fc      	b.n	8001ba2 <main+0x16>

08001ba8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2 
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <SystemClock_Config+0xa8>)
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <SystemClock_Config+0xa8>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemClock_Config+0xa8>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <SystemClock_Config+0xac>)
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SystemClock_Config+0xac>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <SystemClock_Config+0xac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be2:	2302      	movs	r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8001bea:	2310      	movs	r3, #16
 8001bec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bfa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fddb 	bl	80007c8 <HAL_RCC_OscConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c18:	f000 f81e 	bl	8001c58 <Error_Handler>
  }
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c20:	2302      	movs	r3, #2
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8001c2e:	2300      	movs	r3, #0
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f80d 	bl	8000c58 <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c44:	f000 f808 	bl	8001c58 <Error_Handler>
  }  
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x4>

08001c5e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <HardFault_Handler+0x4>

08001c72 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <MemManage_Handler+0x4>

08001c78 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <BusFault_Handler+0x4>

08001c7e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <UsageFault_Handler+0x4>

08001c84 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001cb2:	f7fe fb0b 	bl	80002cc <HAL_IncTick>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <SPIx_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  None
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8001d04:	2305      	movs	r3, #5
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <SPIx_MspInit+0xa4>)
 8001d10:	f7fe fbda 	bl	80004c8 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <SPIx_MspInit+0xa4>)
 8001d28:	f7fe fbce 	bl	80004c8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001d2c:	2340      	movs	r3, #64	; 0x40
 8001d2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <SPIx_MspInit+0xa4>)
 8001d38:	f7fe fbc6 	bl	80004c8 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d46:	6453      	str	r3, [r2, #68]	; 0x44
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SPIx_MspInit+0xa0>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <SPIx_Init>:
  * @brief  Initializes SPI HAL.
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d6a:	f7ff fe21 	bl	80019b0 <HAL_SPI_GetState>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12a      	bne.n	8001dca <SPIx_Init+0x66>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <SPIx_Init+0x70>)
 8001d78:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 100 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	61da      	str	r2, [r3, #28]
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	615a      	str	r2, [r3, #20]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d8e:	2202      	movs	r2, #2
 8001d90:	611a      	str	r2, [r3, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <SPIx_Init+0x6c>)
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <SPIx_Init+0x6c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <SPIx_Init+0x6c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <SPIx_Init+0x6c>)
 8001dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db0:	619a      	str	r2, [r3, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLED;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <SPIx_Init+0x6c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Spi.Init.Mode = SPI_MODE_SLAVE;//SPI_MODE_MASTER;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SPIx_Init+0x6c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&hnucleo_Spi);
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <SPIx_Init+0x6c>)
 8001dc0:	f7ff ff7c 	bl	8001cbc <SPIx_MspInit>
    HAL_SPI_Init(&hnucleo_Spi);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <SPIx_Init+0x6c>)
 8001dc6:	f7ff f977 	bl	80010b8 <HAL_SPI_Init>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000028 	.word	0x20000028
 8001dd4:	40013000 	.word	0x40013000

08001dd8 <SPIx_ReadSlave>:

  return readvalue;
}

static uint32_t	SPIx_ReadSlave(uint16_t size, uint8_t *pData)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	80fb      	strh	r3, [r7, #6]
	  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	75fb      	strb	r3, [r7, #23]
	  uint32_t readvalue = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
	  uint32_t writevalue = 0xFFFFFFFF;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	60fb      	str	r3, [r7, #12]

	  status = HAL_SPI_Receive(&hnucleo_Spi, pData, size, SpixTimeout);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <SPIx_ReadSlave+0x40>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	88fa      	ldrh	r2, [r7, #6]
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <SPIx_ReadSlave+0x44>)
 8001dfc:	f7ff f9f9 	bl	80011f2 <HAL_SPI_Receive>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]

	  /* Check the communication status */
	  if(status != HAL_OK)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SPIx_ReadSlave+0x36>
	  {
	    /* Execute user timeout callback */
	    SPIx_Error();
 8001e0a:	f000 f809 	bl	8001e20 <SPIx_Error>
	  }

	  return readvalue;
 8001e0e:	693b      	ldr	r3, [r7, #16]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	20000028 	.word	0x20000028

08001e20 <SPIx_Error>:
  * @brief  SPI error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error (void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <SPIx_Error+0x14>)
 8001e26:	f7ff f9ac 	bl	8001182 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001e2a:	f7ff ff9b 	bl	8001d64 <SPIx_Init>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000028 	.word	0x20000028

08001e38 <mySPI_Init>:
  /* Return the code of the Joystick key pressed */
  return state;
}

void mySPI_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  SPIx_Init();
 8001e3c:	f7ff ff92 	bl	8001d64 <SPIx_Init>
  return;
 8001e40:	bf00      	nop
}
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <mySPI_ReadByte>:
{
  SPIx_WriteRead( &TxData, RxData, 1 );
}

uint8_t mySPI_ReadByte(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  enum
  {
	  SIZE_RX = 32
  };

  uint8_t rxBuf[SIZE_RX] = {0,};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2220      	movs	r2, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f832 	bl	8001ec0 <memset>
  data = SPIx_ReadSlave((uint16_t)SIZE_RX, rxBuf);
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2020      	movs	r0, #32
 8001e62:	f7ff ffb9 	bl	8001dd8 <SPIx_ReadSlave>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Return the shifted data */
  return data;
 8001e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4e0d      	ldr	r6, [pc, #52]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7c:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e7e:	1ba4      	subs	r4, r4, r6
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	2500      	movs	r5, #0
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	4e0b      	ldr	r6, [pc, #44]	; (8001eb8 <__libc_init_array+0x40>)
 8001e8a:	4c0c      	ldr	r4, [pc, #48]	; (8001ebc <__libc_init_array+0x44>)
 8001e8c:	f000 f820 	bl	8001ed0 <_init>
 8001e90:	1ba4      	subs	r4, r4, r6
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	2500      	movs	r5, #0
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea0:	4798      	blx	r3
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eaa:	4798      	blx	r3
 8001eac:	3501      	adds	r5, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	08001ef8 	.word	0x08001ef8
 8001eb4:	08001ef8 	.word	0x08001ef8
 8001eb8:	08001ef8 	.word	0x08001ef8
 8001ebc:	08001efc 	.word	0x08001efc

08001ec0 <memset>:
 8001ec0:	4402      	add	r2, r0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <_init>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr

08001edc <_fini>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr
