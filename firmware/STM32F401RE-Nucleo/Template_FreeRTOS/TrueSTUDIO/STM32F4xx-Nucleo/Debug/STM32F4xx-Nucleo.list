
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00012d44  20000010  08003198  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20012d54  08003198  00022d54  2**0
                  ALLOC
  8 .ARM.attributes 0000002c  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f21d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000220b  00000000  00000000  0002f259  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008d0  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004e59  00000000  00000000  00032520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039c5  00000000  00000000  00037379  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ad3e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021d8  00000000  00000000  0003adbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003130 	.word	0x08003130

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003130 	.word	0x08003130

080001e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e4:	4a16      	ldr	r2, [pc, #88]	; (8000240 <SystemInit+0x60>)
 80001e6:	4b16      	ldr	r3, [pc, #88]	; (8000240 <SystemInit+0x60>)
 80001e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f4:	4a13      	ldr	r2, [pc, #76]	; (8000244 <SystemInit+0x64>)
 80001f6:	4b13      	ldr	r3, [pc, #76]	; (8000244 <SystemInit+0x64>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000200:	4b10      	ldr	r3, [pc, #64]	; (8000244 <SystemInit+0x64>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <SystemInit+0x64>)
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <SystemInit+0x64>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000214:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <SystemInit+0x64>)
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <SystemInit+0x68>)
 800021a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <SystemInit+0x64>)
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <SystemInit+0x64>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <SystemInit+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <SystemInit+0x60>)
 8000230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000234:	609a      	str	r2, [r3, #8]
#endif
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	40023800 	.word	0x40023800
 8000248:	24003010 	.word	0x24003010

0800024c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <HAL_Init+0x40>)
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <HAL_Init+0x40>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <HAL_Init+0x40>)
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <HAL_Init+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <HAL_Init+0x40>)
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <HAL_Init+0x40>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000274:	2003      	movs	r0, #3
 8000276:	f000 f8eb 	bl	8000450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	200f      	movs	r0, #15
 800027c:	f000 f810 	bl	80002a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000280:	f000 f806 	bl	8000290 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000284:	2300      	movs	r3, #0
}
 8000286:	4618      	mov	r0, r3
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40023c00 	.word	0x40023c00

08000290 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
	...

080002a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002a8:	f000 fef0 	bl	800108c <HAL_RCC_GetHCLKFreq>
 80002ac:	4602      	mov	r2, r0
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_InitTick+0x34>)
 80002b0:	fba3 2302 	umull	r2, r3, r3, r2
 80002b4:	099b      	lsrs	r3, r3, #6
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8f1 	bl	800049e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002bc:	2200      	movs	r2, #0
 80002be:	6879      	ldr	r1, [r7, #4]
 80002c0:	f04f 30ff 	mov.w	r0, #4294967295
 80002c4:	f000 f8cf 	bl	8000466 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002c8:	2300      	movs	r3, #0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	10624dd3 	.word	0x10624dd3

080002d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return uwTick;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <HAL_GetTick+0x14>)
 80002de:	681b      	ldr	r3, [r3, #0]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	2000002c 	.word	0x2000002c

080002f0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f003 0307 	and.w	r3, r3, #7
 80002fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <NVIC_SetPriorityGrouping+0x44>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000306:	68ba      	ldr	r2, [r7, #8]
 8000308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800030c:	4013      	ands	r3, r2
 800030e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800031c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000322:	4a04      	ldr	r2, [pc, #16]	; (8000334 <NVIC_SetPriorityGrouping+0x44>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	60d3      	str	r3, [r2, #12]
}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <NVIC_GetPriorityGrouping+0x18>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	f003 0307 	and.w	r3, r3, #7
}
 8000346:	4618      	mov	r0, r3
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	da0b      	bge.n	8000380 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	490d      	ldr	r1, [pc, #52]	; (80003a0 <NVIC_SetPriority+0x4c>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 030f 	and.w	r3, r3, #15
 8000370:	3b04      	subs	r3, #4
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	440b      	add	r3, r1
 800037c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800037e:	e009      	b.n	8000394 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	4908      	ldr	r1, [pc, #32]	; (80003a4 <NVIC_SetPriority+0x50>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	0112      	lsls	r2, r2, #4
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	440b      	add	r3, r1
 8000390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	e000e100 	.word	0xe000e100

080003a8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b089      	sub	sp, #36	; 0x24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f003 0307 	and.w	r3, r3, #7
 80003ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	f1c3 0307 	rsb	r3, r3, #7
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	bf28      	it	cs
 80003c6:	2304      	movcs	r3, #4
 80003c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3304      	adds	r3, #4
 80003ce:	2b06      	cmp	r3, #6
 80003d0:	d902      	bls.n	80003d8 <NVIC_EncodePriority+0x30>
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	3b03      	subs	r3, #3
 80003d6:	e000      	b.n	80003da <NVIC_EncodePriority+0x32>
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	2201      	movs	r2, #1
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	1e5a      	subs	r2, r3, #1
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	401a      	ands	r2, r3
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ee:	2101      	movs	r1, #1
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	1e59      	subs	r1, r3, #1
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fc:	4313      	orrs	r3, r2
         );
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3724      	adds	r7, #36	; 0x24
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800041c:	d301      	bcc.n	8000422 <SysTick_Config+0x16>
 800041e:	2301      	movs	r3, #1
 8000420:	e00f      	b.n	8000442 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <SysTick_Config+0x40>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3b01      	subs	r3, #1
 8000428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800042a:	210f      	movs	r1, #15
 800042c:	f04f 30ff 	mov.w	r0, #4294967295
 8000430:	f7ff ff90 	bl	8000354 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <SysTick_Config+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Config+0x40>)
 800043c:	2207      	movs	r2, #7
 800043e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	e000e010 	.word	0xe000e010

08000450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff49 	bl	80002f0 <NVIC_SetPriorityGrouping>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	4603      	mov	r3, r0
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000478:	f7ff ff5e 	bl	8000338 <NVIC_GetPriorityGrouping>
 800047c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	6978      	ldr	r0, [r7, #20]
 8000484:	f7ff ff90 	bl	80003a8 <NVIC_EncodePriority>
 8000488:	4602      	mov	r2, r0
 800048a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff5f 	bl	8000354 <NVIC_SetPriority>
}
 8000496:	bf00      	nop
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ffb0 	bl	800040c <SysTick_Config>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b089      	sub	sp, #36	; 0x24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
 80004d2:	e157      	b.n	8000784 <HAL_GPIO_Init+0x2cc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80004d4:	2201      	movs	r2, #1
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	4013      	ands	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	f040 8146 	bne.w	800077e <HAL_GPIO_Init+0x2c6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d003      	beq.n	8000502 <HAL_GPIO_Init+0x4a>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	2b12      	cmp	r3, #18
 8000500:	d123      	bne.n	800054a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	08da      	lsrs	r2, r3, #3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3208      	adds	r2, #8
 800050a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	220f      	movs	r2, #15
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	4013      	ands	r3, r2
 8000524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	691a      	ldr	r2, [r3, #16]
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	f003 0307 	and.w	r3, r3, #7
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	69ba      	ldr	r2, [r7, #24]
 8000538:	4313      	orrs	r3, r2
 800053a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	08da      	lsrs	r2, r3, #3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3208      	adds	r2, #8
 8000544:	69b9      	ldr	r1, [r7, #24]
 8000546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	2203      	movs	r2, #3
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4013      	ands	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f003 0203 	and.w	r2, r3, #3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	69ba      	ldr	r2, [r7, #24]
 8000574:	4313      	orrs	r3, r2
 8000576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d00b      	beq.n	800059e <HAL_GPIO_Init+0xe6>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d007      	beq.n	800059e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000592:	2b11      	cmp	r3, #17
 8000594:	d003      	beq.n	800059e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b12      	cmp	r3, #18
 800059c:	d130      	bne.n	8000600 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	4013      	ands	r3, r2
 80005b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	69ba      	ldr	r2, [r7, #24]
 80005cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005d4:	2201      	movs	r2, #1
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	69ba      	ldr	r2, [r7, #24]
 80005e0:	4013      	ands	r3, r2
 80005e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	f003 0201 	and.w	r2, r3, #1
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2203      	movs	r2, #3
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	69ba      	ldr	r2, [r7, #24]
 8000614:	4013      	ands	r3, r2
 8000616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	69ba      	ldr	r2, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80a0 	beq.w	800077e <HAL_GPIO_Init+0x2c6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4a56      	ldr	r2, [pc, #344]	; (8000798 <HAL_GPIO_Init+0x2e0>)
 8000640:	4b55      	ldr	r3, [pc, #340]	; (8000798 <HAL_GPIO_Init+0x2e0>)
 8000642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	4b53      	ldr	r3, [pc, #332]	; (8000798 <HAL_GPIO_Init+0x2e0>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000656:	4a51      	ldr	r2, [pc, #324]	; (800079c <HAL_GPIO_Init+0x2e4>)
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	089b      	lsrs	r3, r3, #2
 800065c:	3302      	adds	r3, #2
 800065e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	220f      	movs	r2, #15
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	69ba      	ldr	r2, [r7, #24]
 8000676:	4013      	ands	r3, r2
 8000678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a48      	ldr	r2, [pc, #288]	; (80007a0 <HAL_GPIO_Init+0x2e8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d019      	beq.n	80006b6 <HAL_GPIO_Init+0x1fe>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <HAL_GPIO_Init+0x2ec>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d013      	beq.n	80006b2 <HAL_GPIO_Init+0x1fa>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a46      	ldr	r2, [pc, #280]	; (80007a8 <HAL_GPIO_Init+0x2f0>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d00d      	beq.n	80006ae <HAL_GPIO_Init+0x1f6>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a45      	ldr	r2, [pc, #276]	; (80007ac <HAL_GPIO_Init+0x2f4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d007      	beq.n	80006aa <HAL_GPIO_Init+0x1f2>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a44      	ldr	r2, [pc, #272]	; (80007b0 <HAL_GPIO_Init+0x2f8>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_GPIO_Init+0x1ee>
 80006a2:	2304      	movs	r3, #4
 80006a4:	e008      	b.n	80006b8 <HAL_GPIO_Init+0x200>
 80006a6:	2305      	movs	r3, #5
 80006a8:	e006      	b.n	80006b8 <HAL_GPIO_Init+0x200>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e004      	b.n	80006b8 <HAL_GPIO_Init+0x200>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <HAL_GPIO_Init+0x200>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <HAL_GPIO_Init+0x200>
 80006b6:	2300      	movs	r3, #0
 80006b8:	69fa      	ldr	r2, [r7, #28]
 80006ba:	f002 0203 	and.w	r2, r2, #3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4093      	lsls	r3, r2
 80006c2:	69ba      	ldr	r2, [r7, #24]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006c8:	4934      	ldr	r1, [pc, #208]	; (800079c <HAL_GPIO_Init+0x2e4>)
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d6:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	43db      	mvns	r3, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	4013      	ands	r3, r2
 80006e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80006f2:	69ba      	ldr	r2, [r7, #24]
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006fa:	4a2e      	ldr	r2, [pc, #184]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	43db      	mvns	r3, r3
 800070a:	69ba      	ldr	r2, [r7, #24]
 800070c:	4013      	ands	r3, r2
 800070e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000724:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	43db      	mvns	r3, r3
 8000734:	69ba      	ldr	r2, [r7, #24]
 8000736:	4013      	ands	r3, r2
 8000738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	4313      	orrs	r3, r2
 800074c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	43db      	mvns	r3, r3
 800075e:	69ba      	ldr	r2, [r7, #24]
 8000760:	4013      	ands	r3, r2
 8000762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4313      	orrs	r3, r2
 8000776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_GPIO_Init+0x2fc>)
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3301      	adds	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	2b0f      	cmp	r3, #15
 8000788:	f67f aea4 	bls.w	80004d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	; 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800
 800079c:	40013800 	.word	0x40013800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40013c00 	.word	0x40013c00

080007b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c8:	787b      	ldrb	r3, [r7, #1]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80007d4:	e003      	b.n	80007de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	041a      	lsls	r2, r3, #16
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	619a      	str	r2, [r3, #24]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d06c      	beq.n	80008de <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000804:	4ba9      	ldr	r3, [pc, #676]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b04      	cmp	r3, #4
 800080e:	d00c      	beq.n	800082a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000810:	4ba6      	ldr	r3, [pc, #664]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000818:	2b08      	cmp	r3, #8
 800081a:	d112      	bne.n	8000842 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800081c:	4ba3      	ldr	r3, [pc, #652]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000828:	d10b      	bne.n	8000842 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082a:	4ba0      	ldr	r3, [pc, #640]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d052      	beq.n	80008dc <HAL_RCC_OscConfig+0xf0>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d14e      	bne.n	80008dc <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e211      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000842:	4b9b      	ldr	r3, [pc, #620]	; (8000ab0 <HAL_RCC_OscConfig+0x2c4>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000848:	f7ff fd46 	bl	80002d8 <HAL_GetTick>
 800084c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800084e:	e00a      	b.n	8000866 <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000850:	f7ff fd42 	bl	80002d8 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	f241 3288 	movw	r2, #5000	; 0x1388
 800085e:	4293      	cmp	r3, r2
 8000860:	d901      	bls.n	8000866 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000862:	2303      	movs	r3, #3
 8000864:	e1ff      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000866:	4b91      	ldr	r3, [pc, #580]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1ee      	bne.n	8000850 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	4a8f      	ldr	r2, [pc, #572]	; (8000ab0 <HAL_RCC_OscConfig+0x2c4>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	7013      	strb	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d015      	beq.n	80008b0 <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000884:	f7ff fd28 	bl	80002d8 <HAL_GetTick>
 8000888:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	e00a      	b.n	80008a2 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800088c:	f7ff fd24 	bl	80002d8 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	f241 3288 	movw	r2, #5000	; 0x1388
 800089a:	4293      	cmp	r3, r2
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e1e1      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0ee      	beq.n	800088c <HAL_RCC_OscConfig+0xa0>
 80008ae:	e016      	b.n	80008de <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008b0:	f7ff fd12 	bl	80002d8 <HAL_GetTick>
 80008b4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b6:	e00a      	b.n	80008ce <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b8:	f7ff fd0e 	bl	80002d8 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d901      	bls.n	80008ce <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80008ca:	2303      	movs	r3, #3
 80008cc:	e1cb      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ce:	4b77      	ldr	r3, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1ee      	bne.n	80008b8 <HAL_RCC_OscConfig+0xcc>
 80008da:	e000      	b.n	80008de <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d077      	beq.n	80009da <HAL_RCC_OscConfig+0x1ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f6:	4b6d      	ldr	r3, [pc, #436]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80008fe:	2b08      	cmp	r3, #8
 8000900:	d126      	bne.n	8000950 <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000902:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d120      	bne.n	8000950 <HAL_RCC_OscConfig+0x164>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	4b67      	ldr	r3, [pc, #412]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <HAL_RCC_OscConfig+0x13a>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d001      	beq.n	8000926 <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e19f      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000926:	4861      	ldr	r0, [pc, #388]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000928:	4b60      	ldr	r3, [pc, #384]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6919      	ldr	r1, [r3, #16]
 8000934:	23f8      	movs	r3, #248	; 0xf8
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093a:	fa93 f3a3 	rbit	r3, r3
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8000940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000942:	fab3 f383 	clz	r3, r3
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094e:	e044      	b.n	80009da <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d02a      	beq.n	80009ae <HAL_RCC_OscConfig+0x1c2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_RCC_OscConfig+0x2c8>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800095e:	f7ff fcbb 	bl	80002d8 <HAL_GetTick>
 8000962:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000964:	e008      	b.n	8000978 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000966:	f7ff fcb7 	bl	80002d8 <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b64      	cmp	r3, #100	; 0x64
 8000972:	d901      	bls.n	8000978 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000974:	2303      	movs	r3, #3
 8000976:	e176      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000978:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f0      	beq.n	8000966 <HAL_RCC_OscConfig+0x17a>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000984:	4849      	ldr	r0, [pc, #292]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6919      	ldr	r1, [r3, #16]
 8000992:	23f8      	movs	r3, #248	; 0xf8
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000998:	fa93 f3a3 	rbit	r3, r3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	fab3 f383 	clz	r3, r3
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	6003      	str	r3, [r0, #0]
 80009ac:	e015      	b.n	80009da <HAL_RCC_OscConfig+0x1ee>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <HAL_RCC_OscConfig+0x2c8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009b4:	f7ff fc90 	bl	80002d8 <HAL_GetTick>
 80009b8:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc8c 	bl	80002d8 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b64      	cmp	r3, #100	; 0x64
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e14b      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1f0      	bne.n	80009bc <HAL_RCC_OscConfig+0x1d0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d030      	beq.n	8000a48 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d016      	beq.n	8000a1c <HAL_RCC_OscConfig+0x230>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <HAL_RCC_OscConfig+0x2cc>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009f4:	f7ff fc70 	bl	80002d8 <HAL_GetTick>
 80009f8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fa:	e008      	b.n	8000a0e <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fc:	f7ff fc6c 	bl	80002d8 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	2b64      	cmp	r3, #100	; 0x64
 8000a08:	d901      	bls.n	8000a0e <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e12b      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f0      	beq.n	80009fc <HAL_RCC_OscConfig+0x210>
 8000a1a:	e015      	b.n	8000a48 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_RCC_OscConfig+0x2cc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a22:	f7ff fc59 	bl	80002d8 <HAL_GetTick>
 8000a26:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a28:	e008      	b.n	8000a3c <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a2a:	f7ff fc55 	bl	80002d8 <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d901      	bls.n	8000a3c <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e114      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f0      	bne.n	8000a2a <HAL_RCC_OscConfig+0x23e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d07c      	beq.n	8000b4e <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_RCC_OscConfig+0x2c0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_RCC_OscConfig+0x2d0>)
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_RCC_OscConfig+0x2d0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000a78:	f7ff fc2e 	bl	80002d8 <HAL_GetTick>
 8000a7c:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a7e:	e008      	b.n	8000a92 <HAL_RCC_OscConfig+0x2a6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a80:	f7ff fc2a 	bl	80002d8 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b64      	cmp	r3, #100	; 0x64
 8000a8c:	d901      	bls.n	8000a92 <HAL_RCC_OscConfig+0x2a6>
      {
        return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e0e9      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_RCC_OscConfig+0x2d0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f0      	beq.n	8000a80 <HAL_RCC_OscConfig+0x294>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_RCC_OscConfig+0x2d4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fc18 	bl	80002d8 <HAL_GetTick>
 8000aa8:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aaa:	e016      	b.n	8000ada <HAL_RCC_OscConfig+0x2ee>
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40023802 	.word	0x40023802
 8000ab4:	42470000 	.word	0x42470000
 8000ab8:	42470e80 	.word	0x42470e80
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	40023870 	.word	0x40023870
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac4:	f7ff fc08 	bl	80002d8 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d901      	bls.n	8000ada <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e0c5      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ada:	4b65      	ldr	r3, [pc, #404]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1ee      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x2d8>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae6:	4a63      	ldr	r2, [pc, #396]	; (8000c74 <HAL_RCC_OscConfig+0x488>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	7013      	strb	r3, [r2, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d015      	beq.n	8000b24 <HAL_RCC_OscConfig+0x338>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000af8:	f7ff fbee 	bl	80002d8 <HAL_GetTick>
 8000afc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afe:	e00a      	b.n	8000b16 <HAL_RCC_OscConfig+0x32a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b00:	f7ff fbea 	bl	80002d8 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d901      	bls.n	8000b16 <HAL_RCC_OscConfig+0x32a>
        {
          return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e0a7      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b16:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0ee      	beq.n	8000b00 <HAL_RCC_OscConfig+0x314>
 8000b22:	e014      	b.n	8000b4e <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b24:	f7ff fbd8 	bl	80002d8 <HAL_GetTick>
 8000b28:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2a:	e00a      	b.n	8000b42 <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2c:	f7ff fbd4 	bl	80002d8 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e091      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1ee      	bne.n	8000b2c <HAL_RCC_OscConfig+0x340>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 8086 	beq.w	8000c64 <HAL_RCC_OscConfig+0x478>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d07d      	beq.n	8000c60 <HAL_RCC_OscConfig+0x474>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d162      	bne.n	8000c32 <HAL_RCC_OscConfig+0x446>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_RCC_OscConfig+0x48c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b72:	f7ff fbb1 	bl	80002d8 <HAL_GetTick>
 8000b76:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fbad 	bl	80002d8 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b64      	cmp	r3, #100	; 0x64
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e06c      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f0      	bne.n	8000b7a <HAL_RCC_OscConfig+0x38e>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b98:	4835      	ldr	r0, [pc, #212]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa93 f3a3 	rbit	r3, r3
 8000bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	fab3 f383 	clz	r3, r3
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	1e59      	subs	r1, r3, #1
 8000bca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fab3 f383 	clz	r3, r3
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000be8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	fa93 f3a3 	rbit	r3, r3
 8000bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_RCC_OscConfig+0x48c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fb65 	bl	80002d8 <HAL_GetTick>
 8000c0e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c12:	f7ff fb61 	bl	80002d8 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b64      	cmp	r3, #100	; 0x64
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e020      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x426>
 8000c30:	e018      	b.n	8000c64 <HAL_RCC_OscConfig+0x478>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_RCC_OscConfig+0x48c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c38:	f7ff fb4e 	bl	80002d8 <HAL_GetTick>
 8000c3c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c40:	f7ff fb4a 	bl	80002d8 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e009      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_RCC_OscConfig+0x484>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x454>
 8000c5e:	e001      	b.n	8000c64 <HAL_RCC_OscConfig+0x478>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x47a>
    }
  }
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40023870 	.word	0x40023870
 8000c78:	42470060 	.word	0x42470060

08000c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c8a:	4ba0      	ldr	r3, [pc, #640]	; (8000f0c <HAL_RCC_ClockConfig+0x290>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 020f 	and.w	r2, r3, #15
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f080 80a6 	bcs.w	8000de6 <HAL_RCC_ClockConfig+0x16a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9a:	4b9c      	ldr	r3, [pc, #624]	; (8000f0c <HAL_RCC_ClockConfig+0x290>)
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ca2:	4b9a      	ldr	r3, [pc, #616]	; (8000f0c <HAL_RCC_ClockConfig+0x290>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 020f 	and.w	r2, r3, #15
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d001      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e165      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d008      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc0:	4993      	ldr	r1, [pc, #588]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000cc2:	4b93      	ldr	r3, [pc, #588]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 812d 	beq.w	8000f3a <HAL_RCC_ClockConfig+0x2be>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d107      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	4b89      	ldr	r3, [pc, #548]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d119      	bne.n	8000d28 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e143      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d107      	bne.n	8000d18 <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d08:	4b81      	ldr	r3, [pc, #516]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e133      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	4b7d      	ldr	r3, [pc, #500]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e12b      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d28:	4979      	ldr	r1, [pc, #484]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d2a:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f023 0203 	bic.w	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d3a:	f7ff facd 	bl	80002d8 <HAL_GetTick>
 8000d3e:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d112      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d48:	e00a      	b.n	8000d60 <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4a:	f7ff fac5 	bl	80002d8 <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e10f      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d60:	4b6b      	ldr	r3, [pc, #428]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d1ee      	bne.n	8000d4a <HAL_RCC_ClockConfig+0xce>
 8000d6c:	e0e5      	b.n	8000f3a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d112      	bne.n	8000d9c <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d76:	e00a      	b.n	8000d8e <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f7ff faae 	bl	80002d8 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0f8      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d8e:	4b60      	ldr	r3, [pc, #384]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d1ee      	bne.n	8000d78 <HAL_RCC_ClockConfig+0xfc>
 8000d9a:	e0ce      	b.n	8000f3a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d119      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000da4:	e00a      	b.n	8000dbc <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da6:	f7ff fa97 	bl	80002d8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e0e1      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	e7f1      	b.n	8000da6 <HAL_RCC_ClockConfig+0x12a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc2:	f7ff fa89 	bl	80002d8 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e0d3      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ee      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0x146>
 8000de4:	e0a9      	b.n	8000f3a <HAL_RCC_ClockConfig+0x2be>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d008      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x188>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df2:	4947      	ldr	r1, [pc, #284]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000df4:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 8087 	beq.w	8000f20 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d107      	bne.n	8000e2a <HAL_RCC_ClockConfig+0x1ae>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d119      	bne.n	8000e5a <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e0aa      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d003      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x1be>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d107      	bne.n	8000e4a <HAL_RCC_ClockConfig+0x1ce>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d109      	bne.n	8000e5a <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e09a      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e092      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5a:	492d      	ldr	r1, [pc, #180]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f023 0203 	bic.w	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fa34 	bl	80002d8 <HAL_GetTick>
 8000e70:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d112      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0x224>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e7a:	e00a      	b.n	8000e92 <HAL_RCC_ClockConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7c:	f7ff fa2c 	bl	80002d8 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e076      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d1ee      	bne.n	8000e7c <HAL_RCC_ClockConfig+0x200>
 8000e9e:	e03f      	b.n	8000f20 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_ClockConfig+0x252>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_ClockConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eaa:	f7ff fa15 	bl	80002d8 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_ClockConfig+0x244>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e05f      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_ClockConfig+0x22e>
 8000ecc:	e028      	b.n	8000f20 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d11e      	bne.n	8000f14 <HAL_RCC_ClockConfig+0x298>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000ed6:	e00a      	b.n	8000eee <HAL_RCC_ClockConfig+0x272>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed8:	f7ff f9fe 	bl	80002d8 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_ClockConfig+0x272>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e048      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_RCC_ClockConfig+0x294>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	e7f1      	b.n	8000ed8 <HAL_RCC_ClockConfig+0x25c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef4:	f7ff f9f0 	bl	80002d8 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d906      	bls.n	8000f14 <HAL_RCC_ClockConfig+0x298>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e03a      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00
 8000f10:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_RCC_ClockConfig+0x30c>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e9      	bne.n	8000ef4 <HAL_RCC_ClockConfig+0x278>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_RCC_ClockConfig+0x310>)
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_RCC_ClockConfig+0x310>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 020f 	and.w	r2, r3, #15
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d001      	beq.n	8000f3a <HAL_RCC_ClockConfig+0x2be>
    {
      return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e022      	b.n	8000f80 <HAL_RCC_ClockConfig+0x304>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x2dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f46:	4910      	ldr	r1, [pc, #64]	; (8000f88 <HAL_RCC_ClockConfig+0x30c>)
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_RCC_ClockConfig+0x30c>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f64:	4908      	ldr	r1, [pc, #32]	; (8000f88 <HAL_RCC_ClockConfig+0x30c>)
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_RCC_ClockConfig+0x30c>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f78:	200f      	movs	r0, #15
 8000f7a:	f7ff f991 	bl	80002a0 <HAL_InitTick>
  
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d006      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x30>
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d007      	beq.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x36>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d158      	bne.n	800106c <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000fbc:	623b      	str	r3, [r7, #32]
       break;
 8000fbe:	e058      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000fc2:	623b      	str	r3, [r7, #32]
      break;
 8000fc4:	e055      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fce:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d017      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fec:	400b      	ands	r3, r1
 8000fee:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000ff2:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	6979      	ldr	r1, [r7, #20]
 8000ff6:	fa91 f1a1 	rbit	r1, r1
 8000ffa:	6139      	str	r1, [r7, #16]
  return(result);
 8000ffc:	6939      	ldr	r1, [r7, #16]
 8000ffe:	fab1 f181 	clz	r1, r1
 8001002:	40cb      	lsrs	r3, r1
 8001004:	fb03 f302 	mul.w	r3, r3, r2
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e016      	b.n	800103a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_RCC_GetSysClockFreq+0xf4>)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fbb2 f2f3 	udiv	r2, r2, r3
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800101c:	400b      	ands	r3, r1
 800101e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001022:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	fa91 f1a1 	rbit	r1, r1
 800102a:	60b9      	str	r1, [r7, #8]
  return(result);
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	fab1 f181 	clz	r1, r1
 8001032:	40cb      	lsrs	r3, r1
 8001034:	fb03 f302 	mul.w	r3, r3, r2
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_RCC_GetSysClockFreq+0xf0>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001042:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001046:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	603b      	str	r3, [r7, #0]
  return(result);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	fa22 f303 	lsr.w	r3, r2, r3
 800105a:	3301      	adds	r3, #1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	623b      	str	r3, [r7, #32]
      break;
 800106a:	e002      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_RCC_GetSysClockFreq+0xf4>)
 800106e:	623b      	str	r3, [r7, #32]
      break;
 8001070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001072:	6a3b      	ldr	r3, [r7, #32]
}
 8001074:	4618      	mov	r0, r3
 8001076:	372c      	adds	r7, #44	; 0x2c
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800
 8001084:	00f42400 	.word	0x00f42400
 8001088:	007a1200 	.word	0x007a1200

0800108c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001092:	f7ff ff7d 	bl	8000f90 <HAL_RCC_GetSysClockFreq>
 8001096:	4601      	mov	r1, r0
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_RCC_GetHCLKFreq+0x44>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80010a0:	23f0      	movs	r3, #240	; 0xf0
 80010a2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	603b      	str	r3, [r7, #0]
  return(result);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_RCC_GetHCLKFreq+0x48>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_RCC_GetHCLKFreq+0x4c>)
 80010c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_RCC_GetHCLKFreq+0x4c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	08003170 	.word	0x08003170
 80010d8:	20000000 	.word	0x20000000

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
  ldr  r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001106:	f7ff f86b 	bl	80001e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f001 ffd9 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f001 fedf 	bl	8002ed0 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8001118:	08003188 	.word	0x08003188
  ldr  r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001120:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001124:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001128:	20012d54 	.word	0x20012d54

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800113c:	f001 f8e8 	bl	8002310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <pvPortMalloc+0x108>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d104      	bne.n	8001152 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8001148:	f000 f8ba 	bl	80012c0 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800114c:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <pvPortMalloc+0x108>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8001158:	2308      	movs	r3, #8
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f023 0307 	bic.w	r3, r3, #7
 8001172:	3308      	adds	r3, #8
 8001174:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d056      	beq.n	800122a <pvPortMalloc+0xfa>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <pvPortMalloc+0x10c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d852      	bhi.n	800122a <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <pvPortMalloc+0x110>)
 8001186:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <pvPortMalloc+0x110>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800118e:	e004      	b.n	800119a <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d203      	bcs.n	80011ac <pvPortMalloc+0x7c>
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f1      	bne.n	8001190 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	4a25      	ldr	r2, [pc, #148]	; (8001244 <pvPortMalloc+0x114>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d03a      	beq.n	800122a <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2208      	movs	r2, #8
 80011ba:	4413      	add	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2208      	movs	r2, #8
 80011d0:	0052      	lsls	r2, r2, #1
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d922      	bls.n	800121c <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	1ad2      	subs	r2, r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <pvPortMalloc+0x110>)
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e002      	b.n	8001202 <pvPortMalloc+0xd2>
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3f6      	bcc.n	80011fc <pvPortMalloc+0xcc>
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <pvPortMalloc+0x118>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <pvPortMalloc+0x118>)
 8001228:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800122a:	f001 f87f 	bl	800232c <xTaskResumeAll>
		//	vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800122e:	697b      	ldr	r3, [r7, #20]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20012c40 	.word	0x20012c40
 800123c:	00012bf7 	.word	0x00012bf7
 8001240:	20012c30 	.word	0x20012c30
 8001244:	20012c38 	.word	0x20012c38
 8001248:	20000004 	.word	0x20000004

0800124c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d027      	beq.n	80012ae <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800125e:	2308      	movs	r3, #8
 8001260:	425b      	negs	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800126c:	f001 f850 	bl	8002310 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <vPortFree+0x6c>)
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e002      	b.n	8001282 <vPortFree+0x36>
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3f6      	bcc.n	800127c <vPortFree+0x30>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <vPortFree+0x70>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <vPortFree+0x70>)
 80012a8:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80012aa:	f001 f83f 	bl	800232c <xTaskResumeAll>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20012c30 	.word	0x20012c30
 80012bc:	20000004 	.word	0x20000004

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <prvHeapInit+0x44>)
 80012c8:	f023 0307 	bic.w	r3, r3, #7
 80012cc:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <prvHeapInit+0x48>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <prvHeapInit+0x48>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <prvHeapInit+0x4c>)
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <prvHeapInit+0x50>)
 80012de:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <prvHeapInit+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <prvHeapInit+0x50>)
 80012ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <prvHeapInit+0x4c>)
 80012f4:	601a      	str	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000038 	.word	0x20000038
 8001308:	20012c30 	.word	0x20012c30
 800130c:	20012c38 	.word	0x20012c38
 8001310:	00012bf8 	.word	0x00012bf8

08001314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0208 	add.w	r2, r3, #8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f103 0208 	add.w	r2, r3, #8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f103 0208 	add.w	r2, r3, #8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d103      	bne.n	80013d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e00c      	b.n	80013f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3308      	adds	r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e002      	b.n	80013e4 <vListInsert+0x2e>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d9f6      	bls.n	80013de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6892      	ldr	r2, [r2, #8]
 800143e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6852      	ldr	r2, [r2, #4]
 8001448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d103      	bne.n	800145c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3b04      	subs	r3, #4
 800148c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3b04      	subs	r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f023 0201 	bic.w	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b04      	subs	r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <pxPortInitialiseStack+0x64>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3b14      	subs	r3, #20
 80014b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b04      	subs	r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f06f 0202 	mvn.w	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3b20      	subs	r3, #32
 80014d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	080014e5 	.word	0x080014e5

080014e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <prvTaskExitError+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d009      	beq.n	800150c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fc:	f383 8811 	msr	BASEPRI, r3
 8001500:	f3bf 8f6f 	isb	sy
 8001504:	f3bf 8f4f 	dsb	sy
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e7fe      	b.n	800150a <prvTaskExitError+0x26>
 800150c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001510:	f383 8811 	msr	BASEPRI, r3
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	f3bf 8f4f 	dsb	sy
 800151c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800151e:	bf00      	nop
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0fc      	beq.n	8001520 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008
	...

08001540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <pxCurrentTCBConst2>)
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	6808      	ldr	r0, [r1, #0]
 8001546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800154a:	f380 8809 	msr	PSP, r0
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f04f 0000 	mov.w	r0, #0
 8001556:	f380 8811 	msr	BASEPRI, r0
 800155a:	4770      	bx	lr
 800155c:	f3af 8000 	nop.w

08001560 <pxCurrentTCBConst2>:
 8001560:	20012c4c 	.word	0x20012c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop

08001568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <prvPortStartFirstTask+0x24>)
 800156a:	6800      	ldr	r0, [r0, #0]
 800156c:	6800      	ldr	r0, [r0, #0]
 800156e:	f380 8808 	msr	MSP, r0
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f380 8814 	msr	CONTROL, r0
 800157a:	b662      	cpsie	i
 800157c:	b661      	cpsie	f
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	df00      	svc	0
 8001588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800158a:	bf00      	nop
 800158c:	e000ed08 	.word	0xe000ed08

08001590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <xPortStartScheduler+0x118>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a44      	ldr	r2, [pc, #272]	; (80016ac <xPortStartScheduler+0x11c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d109      	bne.n	80015b4 <xPortStartScheduler+0x24>
 80015a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a4:	f383 8811 	msr	BASEPRI, r3
 80015a8:	f3bf 8f6f 	isb	sy
 80015ac:	f3bf 8f4f 	dsb	sy
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e7fe      	b.n	80015b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <xPortStartScheduler+0x118>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <xPortStartScheduler+0x120>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d109      	bne.n	80015d2 <xPortStartScheduler+0x42>
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e7fe      	b.n	80015d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <xPortStartScheduler+0x124>)
 80015d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	22ff      	movs	r2, #255	; 0xff
 80015e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <xPortStartScheduler+0x128>)
 80015f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <xPortStartScheduler+0x12c>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001600:	e009      	b.n	8001616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <xPortStartScheduler+0x12c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <xPortStartScheduler+0x12c>)
 800160a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	d0ef      	beq.n	8001602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <xPortStartScheduler+0x12c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	d009      	beq.n	8001642 <xPortStartScheduler+0xb2>
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	f383 8811 	msr	BASEPRI, r3
 8001636:	f3bf 8f6f 	isb	sy
 800163a:	f3bf 8f4f 	dsb	sy
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	e7fe      	b.n	8001640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <xPortStartScheduler+0x12c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <xPortStartScheduler+0x12c>)
 800164a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <xPortStartScheduler+0x12c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <xPortStartScheduler+0x12c>)
 8001656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <xPortStartScheduler+0x130>)
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <xPortStartScheduler+0x130>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <xPortStartScheduler+0x130>)
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <xPortStartScheduler+0x130>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001678:	f000 f8d6 	bl	8001828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <xPortStartScheduler+0x134>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001682:	f000 f8ed 	bl	8001860 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <xPortStartScheduler+0x138>)
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <xPortStartScheduler+0x138>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001692:	f7ff ff69 	bl	8001568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001696:	f000 ff9d 	bl	80025d4 <vTaskSwitchContext>
	prvTaskExitError();
 800169a:	f7ff ff23 	bl	80014e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	410fc271 	.word	0x410fc271
 80016b0:	410fc270 	.word	0x410fc270
 80016b4:	e000e400 	.word	0xe000e400
 80016b8:	20012c44 	.word	0x20012c44
 80016bc:	20012c48 	.word	0x20012c48
 80016c0:	e000ed20 	.word	0xe000ed20
 80016c4:	20000008 	.word	0x20000008
 80016c8:	e000ef34 	.word	0xe000ef34

080016cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <vPortEnterCritical+0x54>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <vPortEnterCritical+0x54>)
 80016ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <vPortEnterCritical+0x54>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10e      	bne.n	8001714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <vPortEnterCritical+0x58>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d009      	beq.n	8001714 <vPortEnterCritical+0x48>
 8001700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	f3bf 8f6f 	isb	sy
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	e7fe      	b.n	8001712 <vPortEnterCritical+0x46>
	}
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000008 	.word	0x20000008
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <vPortExitCritical+0x4c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <vPortExitCritical+0x22>
 8001736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	e7fe      	b.n	8001748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <vPortExitCritical+0x4c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a08      	ldr	r2, [pc, #32]	; (8001774 <vPortExitCritical+0x4c>)
 8001752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <vPortExitCritical+0x4c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d104      	bne.n	8001766 <vPortExitCritical+0x3e>
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
	...

08001780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001780:	f3ef 8009 	mrs	r0, PSP
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <pxCurrentTCBConst>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f01e 0f10 	tst.w	lr, #16
 8001790:	bf08      	it	eq
 8001792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800179a:	6010      	str	r0, [r2, #0]
 800179c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80017a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017a4:	f380 8811 	msr	BASEPRI, r0
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	f3bf 8f6f 	isb	sy
 80017b0:	f000 ff10 	bl	80025d4 <vTaskSwitchContext>
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f380 8811 	msr	BASEPRI, r0
 80017bc:	bc09      	pop	{r0, r3}
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	6808      	ldr	r0, [r1, #0]
 80017c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c6:	f01e 0f10 	tst.w	lr, #16
 80017ca:	bf08      	it	eq
 80017cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80017d0:	f380 8809 	msr	PSP, r0
 80017d4:	f3bf 8f6f 	isb	sy
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w

080017e0 <pxCurrentTCBConst>:
 80017e0:	20012c4c 	.word	0x20012c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop

080017e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	__asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001800:	f000 fe30 	bl	8002464 <xTaskIncrementTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SysTick_Handler+0x3c>)
 800180c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	e000ed04 	.word	0xe000ed04

08001828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <vPortSetupTimerInterrupt+0x28>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <vPortSetupTimerInterrupt+0x2c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <vPortSetupTimerInterrupt+0x30>)
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <vPortSetupTimerInterrupt+0x34>)
 800183c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <vPortSetupTimerInterrupt+0x28>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010
 8001854:	e000e018 	.word	0xe000e018
 8001858:	e000e014 	.word	0xe000e014
 800185c:	0001481f 	.word	0x0001481f

08001860 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001870 <vPortEnableVFP+0x10>
 8001864:	6801      	ldr	r1, [r0, #0]
 8001866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800186a:	6001      	str	r1, [r0, #0]
 800186c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800186e:	bf00      	nop
 8001870:	e000ed88 	.word	0xe000ed88

08001874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <xQueueGenericReset+0x28>
	__asm volatile
 8001888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e7fe      	b.n	800189a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800189c:	f7ff ff16 	bl	80016cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	441a      	add	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	3b01      	subs	r3, #1
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	441a      	add	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	22ff      	movs	r2, #255	; 0xff
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d114      	bne.n	800191c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01a      	beq.n	8001930 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3310      	adds	r3, #16
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fee6 	bl	80026d0 <xTaskRemoveFromEventList>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d012      	beq.n	8001930 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <xQueueGenericReset+0xcc>)
 800190c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	f3bf 8f6f 	isb	sy
 800191a:	e009      	b.n	8001930 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3310      	adds	r3, #16
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fcf7 	bl	8001314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3324      	adds	r3, #36	; 0x24
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fcf2 	bl	8001314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001930:	f7ff fefa 	bl	8001728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000ed04 	.word	0xe000ed04

08001944 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <xQueueGenericCreate+0x28>
 8001958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	f3bf 8f6f 	isb	sy
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e7fe      	b.n	800196a <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3350      	adds	r3, #80	; 0x50
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbd8 	bl	8001130 <pvPortMalloc>
 8001980:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3350      	adds	r3, #80	; 0x50
 8001990:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f805 	bl	80019ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80019a4:	69bb      	ldr	r3, [r7, #24]
	}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e002      	b.n	80019d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019dc:	2101      	movs	r1, #1
 80019de:	69b8      	ldr	r0, [r7, #24]
 80019e0:	f7ff ff48 	bl	8001874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <xQueueGenericSend+0x30>
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	e7fe      	b.n	8001a22 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <xQueueGenericSend+0x3e>
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <xQueueGenericSend+0x42>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <xQueueGenericSend+0x44>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <xQueueGenericSend+0x5c>
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e7fe      	b.n	8001a4e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <xQueueGenericSend+0x6a>
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <xQueueGenericSend+0x6e>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <xQueueGenericSend+0x70>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <xQueueGenericSend+0x88>
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e7fe      	b.n	8001a7a <xQueueGenericSend+0x86>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a7c:	f7ff fe26 	bl	80016cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d302      	bcc.n	8001a92 <xQueueGenericSend+0x9e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d129      	bne.n	8001ae6 <xQueueGenericSend+0xf2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a98:	f000 f998 	bl	8001dcc <prvCopyDataToQueue>
 8001a9c:	6278      	str	r0, [r7, #36]	; 0x24

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <xQueueGenericSend+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	3324      	adds	r3, #36	; 0x24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fe10 	bl	80026d0 <xTaskRemoveFromEventList>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d013      	beq.n	8001ade <xQueueGenericSend+0xea>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <xQueueGenericSend+0x1c4>)
 8001ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	e00a      	b.n	8001ade <xQueueGenericSend+0xea>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <xQueueGenericSend+0xea>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <xQueueGenericSend+0x1c4>)
 8001ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ade:	f7ff fe23 	bl	8001728 <vPortExitCritical>
				return pdPASS;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e063      	b.n	8001bae <xQueueGenericSend+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <xQueueGenericSend+0x100>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001aec:	f7ff fe1c 	bl	8001728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e05c      	b.n	8001bae <xQueueGenericSend+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <xQueueGenericSend+0x114>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe48 	bl	8002794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b08:	f7ff fe0e 	bl	8001728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b0c:	f000 fc00 	bl	8002310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b10:	f7ff fddc 	bl	80016cc <vPortEnterCritical>
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d103      	bne.n	8001b2a <xQueueGenericSend+0x136>
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d103      	bne.n	8001b40 <xQueueGenericSend+0x14c>
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b40:	f7ff fdf2 	bl	8001728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b44:	1d3a      	adds	r2, r7, #4
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fe37 	bl	80027c0 <xTaskCheckForTimeOut>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d124      	bne.n	8001ba2 <xQueueGenericSend+0x1ae>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b5a:	f000 fa09 	bl	8001f70 <prvIsQueueFull>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d018      	beq.n	8001b96 <xQueueGenericSend+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	3310      	adds	r3, #16
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fd8b 	bl	8002688 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b74:	f000 f994 	bl	8001ea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001b78:	f000 fbd8 	bl	800232c <xTaskResumeAll>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f af7c 	bne.w	8001a7c <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <xQueueGenericSend+0x1c4>)
 8001b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	e772      	b.n	8001a7c <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b98:	f000 f982 	bl	8001ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b9c:	f000 fbc6 	bl	800232c <xTaskResumeAll>
 8001ba0:	e76c      	b.n	8001a7c <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ba4:	f000 f97c 	bl	8001ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ba8:	f000 fbc0 	bl	800232c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001bac:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000ed04 	.word	0xe000ed04

08001bbc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <xQueueSemaphoreTake+0x30>
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e7fe      	b.n	8001bea <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <xQueueSemaphoreTake+0x4c>
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e7fe      	b.n	8001c06 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c08:	f7ff fd60 	bl	80016cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d024      	beq.n	8001c62 <xQueueSemaphoreTake+0xa6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <xQueueSemaphoreTake+0x76>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001c28:	f001 f870 	bl	8002d0c <pvTaskIncrementMutexHeldCount>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00f      	beq.n	8001c5a <xQueueSemaphoreTake+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	3310      	adds	r3, #16
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fd46 	bl	80026d0 <xTaskRemoveFromEventList>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <xQueueSemaphoreTake+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001c4a:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <xQueueSemaphoreTake+0x1dc>)
 8001c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c5a:	f7ff fd65 	bl	8001728 <vPortExitCritical>
				return pdPASS;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e096      	b.n	8001d90 <xQueueSemaphoreTake+0x1d4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d110      	bne.n	8001c8a <xQueueSemaphoreTake+0xce>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <xQueueSemaphoreTake+0xc6>
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e7fe      	b.n	8001c80 <xQueueSemaphoreTake+0xc4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001c82:	f7ff fd51 	bl	8001728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e082      	b.n	8001d90 <xQueueSemaphoreTake+0x1d4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <xQueueSemaphoreTake+0xe2>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fd7d 	bl	8002794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c9e:	f7ff fd43 	bl	8001728 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ca2:	f000 fb35 	bl	8002310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ca6:	f7ff fd11 	bl	80016cc <vPortEnterCritical>
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d103      	bne.n	8001cc0 <xQueueSemaphoreTake+0x104>
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d103      	bne.n	8001cd6 <xQueueSemaphoreTake+0x11a>
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd6:	f7ff fd27 	bl	8001728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cda:	463a      	mov	r2, r7
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fd6c 	bl	80027c0 <xTaskCheckForTimeOut>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d132      	bne.n	8001d54 <xQueueSemaphoreTake+0x198>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cf0:	f000 f928 	bl	8001f44 <prvIsQueueEmpty>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d026      	beq.n	8001d48 <xQueueSemaphoreTake+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <xQueueSemaphoreTake+0x15a>
					{
						taskENTER_CRITICAL();
 8001d02:	f7ff fce3 	bl	80016cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fe78 	bl	8002a00 <xTaskPriorityInherit>
 8001d10:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8001d12:	f7ff fd09 	bl	8001728 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3324      	adds	r3, #36	; 0x24
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fcb2 	bl	8002688 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d26:	f000 f8bb 	bl	8001ea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d2a:	f000 faff 	bl	800232c <xTaskResumeAll>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f af69 	bne.w	8001c08 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <xQueueSemaphoreTake+0x1dc>)
 8001d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	e75f      	b.n	8001c08 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d4a:	f000 f8a9 	bl	8001ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d4e:	f000 faed 	bl	800232c <xTaskResumeAll>
 8001d52:	e759      	b.n	8001c08 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d56:	f000 f8a3 	bl	8001ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d5a:	f000 fae7 	bl	800232c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d60:	f000 f8f0 	bl	8001f44 <prvIsQueueEmpty>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f43f af4e 	beq.w	8001c08 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <xQueueSemaphoreTake+0x1d2>
					{
						taskENTER_CRITICAL();
 8001d72:	f7ff fcab 	bl	80016cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d78:	f000 f810 	bl	8001d9c <prvGetDisinheritPriorityAfterTimeout>
 8001d7c:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	69f9      	ldr	r1, [r7, #28]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 ff35 	bl	8002bf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001d8a:	f7ff fccd 	bl	8001728 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3730      	adds	r7, #48	; 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1c3 0305 	rsb	r3, r3, #5
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e001      	b.n	8001dbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d14d      	bne.n	8001e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fe78 	bl	8002aec <xTaskPriorityDisinherit>
 8001dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e043      	b.n	8001e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d119      	bne.n	8001e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6858      	ldr	r0, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	461a      	mov	r2, r3
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	f001 f976 	bl	8003108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	441a      	add	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d32b      	bcc.n	8001e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e026      	b.n	8001e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68d8      	ldr	r0, [r3, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	f001 f95c 	bl	8003108 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	425b      	negs	r3, r3
 8001e5a:	441a      	add	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	425b      	negs	r3, r3
 8001e76:	441a      	add	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d105      	bne.n	8001e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001e96:	697b      	ldr	r3, [r7, #20]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001ea8:	f7ff fc10 	bl	80016cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001eb4:	e011      	b.n	8001eda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3324      	adds	r3, #36	; 0x24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fc04 	bl	80026d0 <xTaskRemoveFromEventList>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001ece:	f000 fcd7 	bl	8002880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	dce9      	bgt.n	8001eb6 <prvUnlockQueue+0x16>
 8001ee2:	e000      	b.n	8001ee6 <prvUnlockQueue+0x46>
					break;
 8001ee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001eee:	f7ff fc1b 	bl	8001728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ef2:	f7ff fbeb 	bl	80016cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001efc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001efe:	e011      	b.n	8001f24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fbdf 	bl	80026d0 <xTaskRemoveFromEventList>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001f18:	f000 fcb2 	bl	8002880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dce9      	bgt.n	8001f00 <prvUnlockQueue+0x60>
 8001f2c:	e000      	b.n	8001f30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001f2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001f38:	f7ff fbf6 	bl	8001728 <vPortExitCritical>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f4c:	f7ff fbbe 	bl	80016cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e001      	b.n	8001f62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f62:	f7ff fbe1 	bl	8001728 <vPortExitCritical>

	return xReturn;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f78:	f7ff fba8 	bl	80016cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d102      	bne.n	8001f8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e001      	b.n	8001f92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f92:	f7ff fbc9 	bl	8001728 <vPortExitCritical>

	return xReturn;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f8bb 	bl	8001130 <pvPortMalloc>
 8001fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00e      	beq.n	8001fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001fc2:	2058      	movs	r0, #88	; 0x58
 8001fc4:	f7ff f8b4 	bl	8001130 <pvPortMalloc>
 8001fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd6:	e005      	b.n	8001fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff f937 	bl	800124c <vPortFree>
 8001fde:	e001      	b.n	8001fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d013      	beq.n	8002012 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f80e 	bl	8002022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002006:	69f8      	ldr	r0, [r7, #28]
 8002008:	f000 f89a 	bl	8002140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800200c:	2301      	movs	r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	e002      	b.n	8002018 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002018:	69bb      	ldr	r3, [r7, #24]
	}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b088      	sub	sp, #32
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	461a      	mov	r2, r3
 800203a:	21a5      	movs	r1, #165	; 0xa5
 800203c:	f001 f86f 	bl	800311e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800204a:	3b01      	subs	r3, #1
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <prvInitialiseNewTask+0x56>
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e7fe      	b.n	8002076 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01f      	beq.n	80020be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e012      	b.n	80020aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	7819      	ldrb	r1, [r3, #0]
 800208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	3334      	adds	r3, #52	; 0x34
 8002094:	460a      	mov	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	3301      	adds	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d9e9      	bls.n	8002084 <prvInitialiseNewTask+0x62>
 80020b0:	e000      	b.n	80020b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80020b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80020bc:	e003      	b.n	80020c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d901      	bls.n	80020d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80020cc:	2304      	movs	r3, #4
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020da:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	2200      	movs	r2, #0
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	3304      	adds	r3, #4
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f934 	bl	8001354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	3318      	adds	r3, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f92f 	bl	8001354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	f1c3 0205 	rsb	r2, r3, #5
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	2200      	movs	r2, #0
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	68f9      	ldr	r1, [r7, #12]
 800211e:	69b8      	ldr	r0, [r7, #24]
 8002120:	f7ff f9ac 	bl	800147c <pxPortInitialiseStack>
 8002124:	4602      	mov	r2, r0
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002148:	f7ff fac0 	bl	80016cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <prvAddNewTaskToReadyList+0xc0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <prvAddNewTaskToReadyList+0xc0>)
 8002154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <prvAddNewTaskToReadyList+0xc4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <prvAddNewTaskToReadyList+0xc4>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <prvAddNewTaskToReadyList+0xc0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d110      	bne.n	800218e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800216c:	f000 fbac 	bl	80028c8 <prvInitialiseTaskLists>
 8002170:	e00d      	b.n	800218e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <prvAddNewTaskToReadyList+0xc8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <prvAddNewTaskToReadyList+0xc4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	429a      	cmp	r2, r3
 8002186:	d802      	bhi.n	800218e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <prvAddNewTaskToReadyList+0xc4>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <prvAddNewTaskToReadyList+0xcc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <prvAddNewTaskToReadyList+0xcc>)
 8002196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <prvAddNewTaskToReadyList+0xcc>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <prvAddNewTaskToReadyList+0xd0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <prvAddNewTaskToReadyList+0xd0>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <prvAddNewTaskToReadyList+0xd4>)
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7ff f8d0 	bl	800136e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80021ce:	f7ff faab 	bl	8001728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <prvAddNewTaskToReadyList+0xc8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00e      	beq.n	80021f8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <prvAddNewTaskToReadyList+0xc4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <prvAddNewTaskToReadyList+0xd8>)
 80021ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20012d24 	.word	0x20012d24
 8002204:	20012c4c 	.word	0x20012c4c
 8002208:	20012d30 	.word	0x20012d30
 800220c:	20012d40 	.word	0x20012d40
 8002210:	20012d2c 	.word	0x20012d2c
 8002214:	20012c50 	.word	0x20012c50
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <vTaskDelay+0x60>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <vTaskDelay+0x2e>
 8002236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	e7fe      	b.n	8002248 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800224a:	f000 f861 	bl	8002310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800224e:	2100      	movs	r1, #0
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fd6f 	bl	8002d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002256:	f000 f869 	bl	800232c <xTaskResumeAll>
 800225a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <vTaskDelay+0x64>)
 8002264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20012d4c 	.word	0x20012d4c
 8002280:	e000ed04 	.word	0xe000ed04

08002284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <vTaskStartScheduler+0x74>)
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	2300      	movs	r3, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	2282      	movs	r2, #130	; 0x82
 8002296:	4919      	ldr	r1, [pc, #100]	; (80022fc <vTaskStartScheduler+0x78>)
 8002298:	4819      	ldr	r0, [pc, #100]	; (8002300 <vTaskStartScheduler+0x7c>)
 800229a:	f7ff fe81 	bl	8001fa0 <xTaskCreate>
 800229e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d115      	bne.n	80022d2 <vTaskStartScheduler+0x4e>
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <vTaskStartScheduler+0x80>)
 80022ba:	f04f 32ff 	mov.w	r2, #4294967295
 80022be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <vTaskStartScheduler+0x84>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <vTaskStartScheduler+0x88>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022cc:	f7ff f960 	bl	8001590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022d0:	e00d      	b.n	80022ee <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d109      	bne.n	80022ee <vTaskStartScheduler+0x6a>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e7fe      	b.n	80022ec <vTaskStartScheduler+0x68>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20012d48 	.word	0x20012d48
 80022fc:	08003148 	.word	0x08003148
 8002300:	08002899 	.word	0x08002899
 8002304:	20012d44 	.word	0x20012d44
 8002308:	20012d30 	.word	0x20012d30
 800230c:	20012d28 	.word	0x20012d28

08002310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <vTaskSuspendAll+0x18>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a03      	ldr	r2, [pc, #12]	; (8002328 <vTaskSuspendAll+0x18>)
 800231c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20012d4c 	.word	0x20012d4c

0800232c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <xTaskResumeAll+0x114>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <xTaskResumeAll+0x2a>
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	e7fe      	b.n	8002354 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002356:	f7ff f9b9 	bl	80016cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <xTaskResumeAll+0x114>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3b01      	subs	r3, #1
 8002360:	4a37      	ldr	r2, [pc, #220]	; (8002440 <xTaskResumeAll+0x114>)
 8002362:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <xTaskResumeAll+0x114>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d161      	bne.n	8002430 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <xTaskResumeAll+0x118>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05d      	beq.n	8002430 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002374:	e02e      	b.n	80023d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <xTaskResumeAll+0x11c>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3318      	adds	r3, #24
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f850 	bl	8001428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3304      	adds	r3, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f84b 	bl	8001428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	2201      	movs	r2, #1
 8002398:	409a      	lsls	r2, r3
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <xTaskResumeAll+0x120>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <xTaskResumeAll+0x120>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <xTaskResumeAll+0x124>)
 80023b2:	441a      	add	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7fe ffd7 	bl	800136e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <xTaskResumeAll+0x128>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <xTaskResumeAll+0x12c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <xTaskResumeAll+0x11c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1cc      	bne.n	8002376 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023e2:	f000 faed 	bl	80029c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <xTaskResumeAll+0x130>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023f2:	f000 f837 	bl	8002464 <xTaskIncrementTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <xTaskResumeAll+0x12c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3b01      	subs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f1      	bne.n	80023f2 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <xTaskResumeAll+0x130>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <xTaskResumeAll+0x12c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800241c:	2301      	movs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <xTaskResumeAll+0x134>)
 8002422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002430:	f7ff f97a 	bl	8001728 <vPortExitCritical>

	return xAlreadyYielded;
 8002434:	68bb      	ldr	r3, [r7, #8]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20012d4c 	.word	0x20012d4c
 8002444:	20012d24 	.word	0x20012d24
 8002448:	20012ce4 	.word	0x20012ce4
 800244c:	20012d2c 	.word	0x20012d2c
 8002450:	20012c50 	.word	0x20012c50
 8002454:	20012c4c 	.word	0x20012c4c
 8002458:	20012d38 	.word	0x20012d38
 800245c:	20012d34 	.word	0x20012d34
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246e:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <xTaskIncrementTick+0x144>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 808d 	bne.w	8002592 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <xTaskIncrementTick+0x148>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002480:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <xTaskIncrementTick+0x148>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11f      	bne.n	80024cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <xTaskIncrementTick+0x14c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <xTaskIncrementTick+0x46>
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	e7fe      	b.n	80024a8 <xTaskIncrementTick+0x44>
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <xTaskIncrementTick+0x14c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <xTaskIncrementTick+0x150>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3e      	ldr	r2, [pc, #248]	; (80025b0 <xTaskIncrementTick+0x14c>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <xTaskIncrementTick+0x150>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <xTaskIncrementTick+0x154>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <xTaskIncrementTick+0x154>)
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	f000 fa7a 	bl	80029c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <xTaskIncrementTick+0x158>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d348      	bcc.n	8002568 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <xTaskIncrementTick+0x14c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <xTaskIncrementTick+0x158>)
 80024e2:	f04f 32ff 	mov.w	r2, #4294967295
 80024e6:	601a      	str	r2, [r3, #0]
					break;
 80024e8:	e03e      	b.n	8002568 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <xTaskIncrementTick+0x14c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d203      	bcs.n	800250a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <xTaskIncrementTick+0x158>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002508:	e02e      	b.n	8002568 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe ff8a 	bl	8001428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3318      	adds	r3, #24
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff81 	bl	8001428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <xTaskIncrementTick+0x15c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <xTaskIncrementTick+0x15c>)
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <xTaskIncrementTick+0x160>)
 8002546:	441a      	add	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7fe ff0d 	bl	800136e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <xTaskIncrementTick+0x164>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	429a      	cmp	r2, r3
 8002560:	d3b9      	bcc.n	80024d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002566:	e7b6      	b.n	80024d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <xTaskIncrementTick+0x164>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256e:	4915      	ldr	r1, [pc, #84]	; (80025c4 <xTaskIncrementTick+0x160>)
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d901      	bls.n	8002584 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002580:	2301      	movs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <xTaskIncrementTick+0x168>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e004      	b.n	800259c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <xTaskIncrementTick+0x16c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <xTaskIncrementTick+0x16c>)
 800259a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800259c:	697b      	ldr	r3, [r7, #20]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20012d4c 	.word	0x20012d4c
 80025ac:	20012d28 	.word	0x20012d28
 80025b0:	20012cdc 	.word	0x20012cdc
 80025b4:	20012ce0 	.word	0x20012ce0
 80025b8:	20012d3c 	.word	0x20012d3c
 80025bc:	20012d44 	.word	0x20012d44
 80025c0:	20012d2c 	.word	0x20012d2c
 80025c4:	20012c50 	.word	0x20012c50
 80025c8:	20012c4c 	.word	0x20012c4c
 80025cc:	20012d38 	.word	0x20012d38
 80025d0:	20012d34 	.word	0x20012d34

080025d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <vTaskSwitchContext+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <vTaskSwitchContext+0xa4>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025e8:	e03e      	b.n	8002668 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <vTaskSwitchContext+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <vTaskSwitchContext+0xa8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f1c3 031f 	rsb	r3, r3, #31
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	491e      	ldr	r1, [pc, #120]	; (8002680 <vTaskSwitchContext+0xac>)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <vTaskSwitchContext+0x5a>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	e7fe      	b.n	800262c <vTaskSwitchContext+0x58>
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4a11      	ldr	r2, [pc, #68]	; (8002680 <vTaskSwitchContext+0xac>)
 800263a:	4413      	add	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	3308      	adds	r3, #8
 8002650:	429a      	cmp	r2, r3
 8002652:	d104      	bne.n	800265e <vTaskSwitchContext+0x8a>
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <vTaskSwitchContext+0xb0>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	20012d4c 	.word	0x20012d4c
 8002678:	20012d38 	.word	0x20012d38
 800267c:	20012d2c 	.word	0x20012d2c
 8002680:	20012c50 	.word	0x20012c50
 8002684:	20012c4c 	.word	0x20012c4c

08002688 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <vTaskPlaceOnEventList+0x24>
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e7fe      	b.n	80026aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <vTaskPlaceOnEventList+0x44>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3318      	adds	r3, #24
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fe fe7e 	bl	80013b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80026ba:	2101      	movs	r1, #1
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f000 fb39 	bl	8002d34 <prvAddCurrentTaskToDelayedList>
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20012c4c 	.word	0x20012c4c

080026d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <xTaskRemoveFromEventList+0x2a>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e7fe      	b.n	80026f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3318      	adds	r3, #24
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fe92 	bl	8001428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <xTaskRemoveFromEventList+0xac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11c      	bne.n	8002746 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	3304      	adds	r3, #4
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fe89 	bl	8001428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <xTaskRemoveFromEventList+0xb0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <xTaskRemoveFromEventList+0xb0>)
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <xTaskRemoveFromEventList+0xb4>)
 8002736:	441a      	add	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	3304      	adds	r3, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7fe fe15 	bl	800136e <vListInsertEnd>
 8002744:	e005      	b.n	8002752 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3318      	adds	r3, #24
 800274a:	4619      	mov	r1, r3
 800274c:	480e      	ldr	r0, [pc, #56]	; (8002788 <xTaskRemoveFromEventList+0xb8>)
 800274e:	f7fe fe0e 	bl	800136e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <xTaskRemoveFromEventList+0xbc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	429a      	cmp	r2, r3
 800275e:	d905      	bls.n	800276c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002760:	2301      	movs	r3, #1
 8002762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <xTaskRemoveFromEventList+0xc0>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e001      	b.n	8002770 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002770:	697b      	ldr	r3, [r7, #20]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20012d4c 	.word	0x20012d4c
 8002780:	20012d2c 	.word	0x20012d2c
 8002784:	20012c50 	.word	0x20012c50
 8002788:	20012ce4 	.word	0x20012ce4
 800278c:	20012c4c 	.word	0x20012c4c
 8002790:	20012d38 	.word	0x20012d38

08002794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <vTaskInternalSetTimeOutState+0x24>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <vTaskInternalSetTimeOutState+0x28>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	20012d3c 	.word	0x20012d3c
 80027bc:	20012d28 	.word	0x20012d28

080027c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <xTaskCheckForTimeOut+0x24>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e7fe      	b.n	80027e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <xTaskCheckForTimeOut+0x3e>
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e7fe      	b.n	80027fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80027fe:	f7fe ff65 	bl	80016cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <xTaskCheckForTimeOut+0xb8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d102      	bne.n	8002822 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	e023      	b.n	800286a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <xTaskCheckForTimeOut+0xbc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d007      	beq.n	800283e <xTaskCheckForTimeOut+0x7e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	429a      	cmp	r2, r3
 8002836:	d802      	bhi.n	800283e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002838:	2301      	movs	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	e015      	b.n	800286a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d90b      	bls.n	8002860 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad2      	subs	r2, r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff9d 	bl	8002794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e004      	b.n	800286a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800286a:	f7fe ff5d 	bl	8001728 <vPortExitCritical>

	return xReturn;
 800286e:	69fb      	ldr	r3, [r7, #28]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20012d28 	.word	0x20012d28
 800287c:	20012d3c 	.word	0x20012d3c

08002880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <vTaskMissedYield+0x14>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20012d38 	.word	0x20012d38

08002898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80028a0:	f000 f852 	bl	8002948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <prvIdleTask+0x28>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d9f9      	bls.n	80028a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <prvIdleTask+0x2c>)
 80028ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80028bc:	e7f0      	b.n	80028a0 <prvIdleTask+0x8>
 80028be:	bf00      	nop
 80028c0:	20012c50 	.word	0x20012c50
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	e00c      	b.n	80028ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <prvInitialiseTaskLists+0x60>)
 80028e0:	4413      	add	r3, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fd16 	bl	8001314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3301      	adds	r3, #1
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d9ef      	bls.n	80028d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <prvInitialiseTaskLists+0x64>)
 80028f6:	f7fe fd0d 	bl	8001314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028fa:	480d      	ldr	r0, [pc, #52]	; (8002930 <prvInitialiseTaskLists+0x68>)
 80028fc:	f7fe fd0a 	bl	8001314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <prvInitialiseTaskLists+0x6c>)
 8002902:	f7fe fd07 	bl	8001314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002906:	480c      	ldr	r0, [pc, #48]	; (8002938 <prvInitialiseTaskLists+0x70>)
 8002908:	f7fe fd04 	bl	8001314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800290c:	480b      	ldr	r0, [pc, #44]	; (800293c <prvInitialiseTaskLists+0x74>)
 800290e:	f7fe fd01 	bl	8001314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <prvInitialiseTaskLists+0x78>)
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <prvInitialiseTaskLists+0x64>)
 8002916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <prvInitialiseTaskLists+0x7c>)
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <prvInitialiseTaskLists+0x68>)
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20012c50 	.word	0x20012c50
 800292c:	20012cb4 	.word	0x20012cb4
 8002930:	20012cc8 	.word	0x20012cc8
 8002934:	20012ce4 	.word	0x20012ce4
 8002938:	20012cf8 	.word	0x20012cf8
 800293c:	20012d10 	.word	0x20012d10
 8002940:	20012cdc 	.word	0x20012cdc
 8002944:	20012ce0 	.word	0x20012ce0

08002948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800294e:	e019      	b.n	8002984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002950:	f7fe febc 	bl	80016cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <prvCheckTasksWaitingTermination+0x4c>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fd61 	bl	8001428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <prvCheckTasksWaitingTermination+0x50>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3b01      	subs	r3, #1
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <prvCheckTasksWaitingTermination+0x50>)
 800296e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <prvCheckTasksWaitingTermination+0x54>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <prvCheckTasksWaitingTermination+0x54>)
 8002978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800297a:	f7fe fed5 	bl	8001728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f80e 	bl	80029a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <prvCheckTasksWaitingTermination+0x54>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e1      	bne.n	8002950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20012cf8 	.word	0x20012cf8
 8002998:	20012d24 	.word	0x20012d24
 800299c:	20012d0c 	.word	0x20012d0c

080029a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fc4d 	bl	800124c <vPortFree>
			vPortFree( pxTCB );
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fc4a 	bl	800124c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <prvResetNextTaskUnblockTime+0x38>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <prvResetNextTaskUnblockTime+0x3c>)
 80029d2:	f04f 32ff 	mov.w	r2, #4294967295
 80029d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029d8:	e008      	b.n	80029ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <prvResetNextTaskUnblockTime+0x38>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <prvResetNextTaskUnblockTime+0x3c>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	20012cdc 	.word	0x20012cdc
 80029fc:	20012d44 	.word	0x20012d44

08002a00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d05e      	beq.n	8002ad4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <xTaskPriorityInherit+0xe0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d24e      	bcs.n	8002ac2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db06      	blt.n	8002a3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <xTaskPriorityInherit+0xe0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f1c3 0205 	rsb	r2, r3, #5
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6959      	ldr	r1, [r3, #20]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <xTaskPriorityInherit+0xe4>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4299      	cmp	r1, r3
 8002a50:	d12f      	bne.n	8002ab2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3304      	adds	r3, #4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fce6 	bl	8001428 <uxListRemove>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	2201      	movs	r2, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <xTaskPriorityInherit+0xe8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4013      	ands	r3, r2
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <xTaskPriorityInherit+0xe8>)
 8002a76:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <xTaskPriorityInherit+0xe0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2201      	movs	r2, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <xTaskPriorityInherit+0xe8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <xTaskPriorityInherit+0xe8>)
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <xTaskPriorityInherit+0xe4>)
 8002aa2:	441a      	add	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f7fe fc5f 	bl	800136e <vListInsertEnd>
 8002ab0:	e004      	b.n	8002abc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <xTaskPriorityInherit+0xe0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e008      	b.n	8002ad4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <xTaskPriorityInherit+0xe0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d201      	bcs.n	8002ad4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
	}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20012c4c 	.word	0x20012c4c
 8002ae4:	20012c50 	.word	0x20012c50
 8002ae8:	20012d2c 	.word	0x20012d2c

08002aec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d06c      	beq.n	8002bdc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002b02:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <xTaskPriorityDisinherit+0xfc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d009      	beq.n	8002b20 <xTaskPriorityDisinherit+0x34>
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e7fe      	b.n	8002b1e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <xTaskPriorityDisinherit+0x50>
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	e7fe      	b.n	8002b3a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d044      	beq.n	8002bdc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d140      	bne.n	8002bdc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fc62 	bl	8001428 <uxListRemove>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d115      	bne.n	8002b96 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	491f      	ldr	r1, [pc, #124]	; (8002bec <xTaskPriorityDisinherit+0x100>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xTaskPriorityDisinherit+0xaa>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <xTaskPriorityDisinherit+0x104>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4013      	ands	r3, r2
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <xTaskPriorityDisinherit+0x104>)
 8002b94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f1c3 0205 	rsb	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	2201      	movs	r2, #1
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <xTaskPriorityDisinherit+0x104>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <xTaskPriorityDisinherit+0x104>)
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <xTaskPriorityDisinherit+0x100>)
 8002bca:	441a      	add	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7fe fbcb 	bl	800136e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002bdc:	697b      	ldr	r3, [r7, #20]
	}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20012c4c 	.word	0x20012c4c
 8002bec:	20012c50 	.word	0x20012c50
 8002bf0:	20012d2c 	.word	0x20012d2c

08002bf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d075      	beq.n	8002cf8 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e7fe      	b.n	8002c26 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d202      	bcs.n	8002c38 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e002      	b.n	8002c3e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d057      	beq.n	8002cf8 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d152      	bne.n	8002cf8 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d109      	bne.n	8002c70 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	e7fe      	b.n	8002c6e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db04      	blt.n	8002c8e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0205 	rsb	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6959      	ldr	r1, [r3, #20]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d129      	bne.n	8002cf8 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fbbd 	bl	8001428 <uxListRemove>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cc8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002cea:	441a      	add	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f7fe fb3b 	bl	800136e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cf8:	bf00      	nop
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20012c4c 	.word	0x20012c4c
 8002d04:	20012c50 	.word	0x20012c50
 8002d08:	20012d2c 	.word	0x20012d2c

08002d0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d1e:	3201      	adds	r2, #1
 8002d20:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d24:	681b      	ldr	r3, [r3, #0]
	}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	20012c4c 	.word	0x20012c4c

08002d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fb6c 	bl	8001428 <uxListRemove>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	4a20      	ldr	r2, [pc, #128]	; (8002dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d10a      	bne.n	8002d8c <prvAddCurrentTaskToDelayedList+0x58>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	481a      	ldr	r0, [pc, #104]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d86:	f7fe faf2 	bl	800136e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d8a:	e026      	b.n	8002dda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d209      	bcs.n	8002db8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f7fe fb00 	bl	80013b6 <vListInsert>
}
 8002db6:	e010      	b.n	8002dda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7fe faf6 	bl	80013b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d202      	bcs.n	8002dda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6013      	str	r3, [r2, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20012d28 	.word	0x20012d28
 8002de8:	20012c4c 	.word	0x20012c4c
 8002dec:	20012d2c 	.word	0x20012d2c
 8002df0:	20012d10 	.word	0x20012d10
 8002df4:	20012ce0 	.word	0x20012ce0
 8002df8:	20012cdc 	.word	0x20012cdc
 8002dfc:	20012d44 	.word	0x20012d44

08002e00 <InitializeHW>:

static void SystemClock_Config  (void);
static void Error_Handler       (void);

void InitializeHW(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8002e04:	f7fd fa22 	bl	800024c <HAL_Init>
  
  /* Configure the system clock to 84 MHz */
  SystemClock_Config();
 8002e08:	f000 f806 	bl	8002e18 <SystemClock_Config>
    
  // Initialize modules on the Nucleo BSP.
  BSP_LED_Init(LED2);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 f8f7 	bl	8003000 <BSP_LED_Init>
//BSP_JOY_Init();
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	; 0x50
 8002e1c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <SystemClock_Config+0xa8>)
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <SystemClock_Config+0xa8>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <SystemClock_Config+0xa8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <SystemClock_Config+0xac>)
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <SystemClock_Config+0xac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <SystemClock_Config+0xac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002e66:	2310      	movs	r3, #16
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e6a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e70:	2304      	movs	r3, #4
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e74:	2307      	movs	r3, #7
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fcb5 	bl	80007ec <HAL_RCC_OscConfig>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002e88:	f000 f81e 	bl	8002ec8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e90:	2302      	movs	r3, #2
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e94:	2300      	movs	r3, #0
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fee7 	bl	8000c7c <HAL_RCC_ClockConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002eb4:	f000 f808 	bl	8002ec8 <Error_Handler>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3750      	adds	r7, #80	; 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <Error_Handler>:

static void Error_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  while(1)
 8002ecc:	e7fe      	b.n	8002ecc <Error_Handler+0x4>
	...

08002ed0 <main>:

static void LEDTurnOnTask     ( void *pvParameters );
static void LEDTurnOffTask    ( void *pvParameters );

int main(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af02      	add	r7, sp, #8
  InitializeHW();
 8002ed6:	f7ff ff93 	bl	8002e00 <InitializeHW>
  
  g_sem = xSemaphoreCreateBinary();
 8002eda:	2203      	movs	r2, #3
 8002edc:	2100      	movs	r1, #0
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fe fd30 	bl	8001944 <xQueueGenericCreate>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <main+0x6c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  if ( g_sem == NULL )
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <main+0x6c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <main+0x28>
    return -1;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	e01d      	b.n	8002f34 <main+0x64>
  
  xSemaphoreGive( g_sem );
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <main+0x6c>)
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	f7fe fd77 	bl	80019f4 <xQueueGenericSend>
  
  // The bigger number the higher priority?  
  xTaskCreate( LEDTurnOnTask,  "LEDTurnOnTask",  configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY(2), NULL );  
 8002f06:	2300      	movs	r3, #0
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2282      	movs	r2, #130	; 0x82
 8002f12:	490b      	ldr	r1, [pc, #44]	; (8002f40 <main+0x70>)
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <main+0x74>)
 8002f16:	f7ff f843 	bl	8001fa0 <xTaskCreate>
  xTaskCreate( LEDTurnOffTask, "LEDTurnOffTask", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY(1), NULL );    
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	2301      	movs	r3, #1
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2300      	movs	r3, #0
 8002f24:	2282      	movs	r2, #130	; 0x82
 8002f26:	4908      	ldr	r1, [pc, #32]	; (8002f48 <main+0x78>)
 8002f28:	4808      	ldr	r0, [pc, #32]	; (8002f4c <main+0x7c>)
 8002f2a:	f7ff f839 	bl	8001fa0 <xTaskCreate>
   
  vTaskStartScheduler();
 8002f2e:	f7ff f9a9 	bl	8002284 <vTaskStartScheduler>
  
  while(1) { ; }
 8002f32:	e7fe      	b.n	8002f32 <main+0x62>
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20012d50 	.word	0x20012d50
 8002f40:	08003150 	.word	0x08003150
 8002f44:	08002f51 	.word	0x08002f51
 8002f48:	08003160 	.word	0x08003160
 8002f4c:	08002f91 	.word	0x08002f91

08002f50 <LEDTurnOnTask>:

void LEDTurnOnTask( void *pvParameters )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    TickType_t tickWait = portMAX_DELAY;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5c:	60fb      	str	r3, [r7, #12]
    
    for(;;)
    {    
      xSemaphoreTake( g_sem, tickWait );
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <LEDTurnOnTask+0x3c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fe29 	bl	8001bbc <xQueueSemaphoreTake>
     
      BSP_LED_On(LED2); // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 f880 	bl	8003070 <BSP_LED_On>
      
      vTaskDelay(100);
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	f7ff f953 	bl	800221c <vTaskDelay>

      xSemaphoreGive( g_sem );
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <LEDTurnOnTask+0x3c>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f7fe fd38 	bl	80019f4 <xQueueGenericSend>
      vTaskDelay(1);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff f949 	bl	800221c <vTaskDelay>
      xSemaphoreTake( g_sem, tickWait );
 8002f8a:	e7e8      	b.n	8002f5e <LEDTurnOnTask+0xe>
 8002f8c:	20012d50 	.word	0x20012d50

08002f90 <LEDTurnOffTask>:
    }
}

void LEDTurnOffTask( void *pvParameters )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    TickType_t tickWait = portMAX_DELAY;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	60fb      	str	r3, [r7, #12]
          
    for(;;)
    {    
      xSemaphoreTake( g_sem, tickWait );
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <LEDTurnOffTask+0x38>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fe09 	bl	8001bbc <xQueueSemaphoreTake>
     
      BSP_LED_Off(LED2);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f874 	bl	8003098 <BSP_LED_Off>
      vTaskDelay(1000);            
 8002fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fb4:	f7ff f932 	bl	800221c <vTaskDelay>
      
      xSemaphoreGive( g_sem );
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <LEDTurnOffTask+0x38>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f7fe fd17 	bl	80019f4 <xQueueGenericSend>
      xSemaphoreTake( g_sem, tickWait );
 8002fc6:	e7ea      	b.n	8002f9e <LEDTurnOffTask+0xe>
 8002fc8:	20012d50 	.word	0x20012d50

08002fcc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <HardFault_Handler+0x4>

08002fe0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <MemManage_Handler+0x4>

08002fe6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <BusFault_Handler+0x4>

08002fec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <UsageFault_Handler+0x4>

08002ff2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <BSP_LED_Init+0x28>
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <BSP_LED_Init+0x68>)
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <BSP_LED_Init+0x68>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <BSP_LED_Init+0x68>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003028:	2320      	movs	r3, #32
 800302a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003034:	2302      	movs	r3, #2
 8003036:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <BSP_LED_Init+0x6c>)
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	f107 020c 	add.w	r2, r7, #12
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fa36 	bl	80004b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <BSP_LED_Init+0x6c>)
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	2120      	movs	r1, #32
 8003056:	2200      	movs	r2, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fbad 	bl	80007b8 <HAL_GPIO_WritePin>
}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	2000000c 	.word	0x2000000c

08003070 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4a05      	ldr	r2, [pc, #20]	; (8003094 <BSP_LED_On+0x24>)
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	2120      	movs	r1, #32
 8003084:	2201      	movs	r2, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fb96 	bl	80007b8 <HAL_GPIO_WritePin>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000000c 	.word	0x2000000c

08003098 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	4a05      	ldr	r2, [pc, #20]	; (80030bc <BSP_LED_Off+0x24>)
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	2120      	movs	r1, #32
 80030ac:	2200      	movs	r2, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fb82 	bl	80007b8 <HAL_GPIO_WritePin>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000000c 	.word	0x2000000c

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4e0d      	ldr	r6, [pc, #52]	; (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c6:	1ba4      	subs	r4, r4, r6
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2500      	movs	r5, #0
 80030cc:	42a5      	cmp	r5, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4e0b      	ldr	r6, [pc, #44]	; (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	; (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 f82c 	bl	8003130 <_init>
 80030d8:	1ba4      	subs	r4, r4, r6
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2500      	movs	r5, #0
 80030de:	42a5      	cmp	r5, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e8:	4798      	blx	r3
 80030ea:	3501      	adds	r5, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f2:	4798      	blx	r3
 80030f4:	3501      	adds	r5, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003180 	.word	0x08003180
 80030fc:	08003180 	.word	0x08003180
 8003100:	08003180 	.word	0x08003180
 8003104:	08003184 	.word	0x08003184

08003108 <memcpy>:
 8003108:	b510      	push	{r4, lr}
 800310a:	1e43      	subs	r3, r0, #1
 800310c:	440a      	add	r2, r1
 800310e:	4291      	cmp	r1, r2
 8003110:	d100      	bne.n	8003114 <memcpy+0xc>
 8003112:	bd10      	pop	{r4, pc}
 8003114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311c:	e7f7      	b.n	800310e <memcpy+0x6>

0800311e <memset>:
 800311e:	4402      	add	r2, r0
 8003120:	4603      	mov	r3, r0
 8003122:	4293      	cmp	r3, r2
 8003124:	d100      	bne.n	8003128 <memset+0xa>
 8003126:	4770      	bx	lr
 8003128:	f803 1b01 	strb.w	r1, [r3], #1
 800312c:	e7f9      	b.n	8003122 <memset+0x4>
	...

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
