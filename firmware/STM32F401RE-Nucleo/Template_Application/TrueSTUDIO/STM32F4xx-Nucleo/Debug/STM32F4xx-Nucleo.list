
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001478  0800c194  0800c194  0000c194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800d60c  0800d60c  0000d60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d61c  0800d61c  0000d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d620  0800d620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  0800d624  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  20000008  0800d62c  00010008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  0800d62c  00010080  2**0
                  ALLOC
  8 .ARM.attributes 0000002c  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ab23  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000187e  00000000  00000000  0001ab57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000638  00000000  00000000  0001c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  0001ca10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003678  00000000  00000000  0001cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000025ed  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022c05  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017ac  00000000  00000000  00022c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800c194 <__do_global_dtors_aux>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4c05      	ldr	r4, [pc, #20]	; (800c1ac <__do_global_dtors_aux+0x18>)
 800c198:	7823      	ldrb	r3, [r4, #0]
 800c19a:	b933      	cbnz	r3, 800c1aa <__do_global_dtors_aux+0x16>
 800c19c:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <__do_global_dtors_aux+0x1c>)
 800c19e:	b113      	cbz	r3, 800c1a6 <__do_global_dtors_aux+0x12>
 800c1a0:	4804      	ldr	r0, [pc, #16]	; (800c1b4 <__do_global_dtors_aux+0x20>)
 800c1a2:	f3af 8000 	nop.w
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	7023      	strb	r3, [r4, #0]
 800c1aa:	bd10      	pop	{r4, pc}
 800c1ac:	20000008 	.word	0x20000008
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	0800d5f4 	.word	0x0800d5f4

0800c1b8 <frame_dummy>:
 800c1b8:	b508      	push	{r3, lr}
 800c1ba:	4b03      	ldr	r3, [pc, #12]	; (800c1c8 <frame_dummy+0x10>)
 800c1bc:	b11b      	cbz	r3, 800c1c6 <frame_dummy+0xe>
 800c1be:	4903      	ldr	r1, [pc, #12]	; (800c1cc <frame_dummy+0x14>)
 800c1c0:	4803      	ldr	r0, [pc, #12]	; (800c1d0 <frame_dummy+0x18>)
 800c1c2:	f3af 8000 	nop.w
 800c1c6:	bd08      	pop	{r3, pc}
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	2000000c 	.word	0x2000000c
 800c1d0:	0800d5f4 	.word	0x0800d5f4

0800c1d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c1d8:	4a16      	ldr	r2, [pc, #88]	; (800c234 <SystemInit+0x60>)
 800c1da:	4b16      	ldr	r3, [pc, #88]	; (800c234 <SystemInit+0x60>)
 800c1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c1e8:	4a13      	ldr	r2, [pc, #76]	; (800c238 <SystemInit+0x64>)
 800c1ea:	4b13      	ldr	r3, [pc, #76]	; (800c238 <SystemInit+0x64>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f043 0301 	orr.w	r3, r3, #1
 800c1f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c1f4:	4b10      	ldr	r3, [pc, #64]	; (800c238 <SystemInit+0x64>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c1fa:	4a0f      	ldr	r2, [pc, #60]	; (800c238 <SystemInit+0x64>)
 800c1fc:	4b0e      	ldr	r3, [pc, #56]	; (800c238 <SystemInit+0x64>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <SystemInit+0x64>)
 800c20c:	4a0b      	ldr	r2, [pc, #44]	; (800c23c <SystemInit+0x68>)
 800c20e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c210:	4a09      	ldr	r2, [pc, #36]	; (800c238 <SystemInit+0x64>)
 800c212:	4b09      	ldr	r3, [pc, #36]	; (800c238 <SystemInit+0x64>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c21a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c21c:	4b06      	ldr	r3, [pc, #24]	; (800c238 <SystemInit+0x64>)
 800c21e:	2200      	movs	r2, #0
 800c220:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c222:	4b04      	ldr	r3, [pc, #16]	; (800c234 <SystemInit+0x60>)
 800c224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c228:	609a      	str	r2, [r3, #8]
#endif
}
 800c22a:	bf00      	nop
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	e000ed00 	.word	0xe000ed00
 800c238:	40023800 	.word	0x40023800
 800c23c:	24003010 	.word	0x24003010

0800c240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c244:	4a0e      	ldr	r2, [pc, #56]	; (800c280 <HAL_Init+0x40>)
 800c246:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <HAL_Init+0x40>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c24e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800c250:	4a0b      	ldr	r2, [pc, #44]	; (800c280 <HAL_Init+0x40>)
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <HAL_Init+0x40>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c25a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c25c:	4a08      	ldr	r2, [pc, #32]	; (800c280 <HAL_Init+0x40>)
 800c25e:	4b08      	ldr	r3, [pc, #32]	; (800c280 <HAL_Init+0x40>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c268:	2003      	movs	r0, #3
 800c26a:	f000 f90f 	bl	800c48c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c26e:	200f      	movs	r0, #15
 800c270:	f000 f810 	bl	800c294 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800c274:	f000 f806 	bl	800c284 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	40023c00 	.word	0x40023c00

0800c284 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800c288:	bf00      	nop
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
	...

0800c294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800c29c:	f000 ff26 	bl	800d0ec <HAL_RCC_GetHCLKFreq>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <HAL_InitTick+0x34>)
 800c2a4:	fba3 2302 	umull	r2, r3, r3, r2
 800c2a8:	099b      	lsrs	r3, r3, #6
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f915 	bl	800c4da <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	f000 f8f3 	bl	800c4a2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	10624dd3 	.word	0x10624dd3

0800c2cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
  uwTick++;
 800c2d0:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <HAL_IncTick+0x18>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	4a03      	ldr	r2, [pc, #12]	; (800c2e4 <HAL_IncTick+0x18>)
 800c2d8:	6013      	str	r3, [r2, #0]
}
 800c2da:	bf00      	nop
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	20000024 	.word	0x20000024

0800c2e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	af00      	add	r7, sp, #0
  return uwTick;
 800c2ec:	4b03      	ldr	r3, [pc, #12]	; (800c2fc <HAL_GetTick+0x14>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	20000024 	.word	0x20000024

0800c300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800c30c:	f7ff ffec 	bl	800c2e8 <HAL_GetTick>
 800c310:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800c312:	bf00      	nop
 800c314:	f7ff ffe8 	bl	800c2e8 <HAL_GetTick>
 800c318:	4602      	mov	r2, r0
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	1ad2      	subs	r2, r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d3f7      	bcc.n	800c314 <HAL_Delay+0x14>
  {
  }
}
 800c324:	bf00      	nop
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c33c:	4b0c      	ldr	r3, [pc, #48]	; (800c370 <NVIC_SetPriorityGrouping+0x44>)
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c348:	4013      	ands	r3, r2
 800c34a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c35c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c35e:	4a04      	ldr	r2, [pc, #16]	; (800c370 <NVIC_SetPriorityGrouping+0x44>)
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	60d3      	str	r3, [r2, #12]
}
 800c364:	bf00      	nop
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	e000ed00 	.word	0xe000ed00

0800c374 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c378:	4b04      	ldr	r3, [pc, #16]	; (800c38c <NVIC_GetPriorityGrouping+0x18>)
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	0a1b      	lsrs	r3, r3, #8
 800c37e:	f003 0307 	and.w	r3, r3, #7
}
 800c382:	4618      	mov	r0, r3
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	e000ed00 	.word	0xe000ed00

0800c390 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800c39c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	da0b      	bge.n	800c3bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3a4:	490d      	ldr	r1, [pc, #52]	; (800c3dc <NVIC_SetPriority+0x4c>)
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	3b04      	subs	r3, #4
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	b2d2      	uxtb	r2, r2
 800c3b2:	0112      	lsls	r2, r2, #4
 800c3b4:	b2d2      	uxtb	r2, r2
 800c3b6:	440b      	add	r3, r1
 800c3b8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3ba:	e009      	b.n	800c3d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3bc:	4908      	ldr	r1, [pc, #32]	; (800c3e0 <NVIC_SetPriority+0x50>)
 800c3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	0112      	lsls	r2, r2, #4
 800c3c8:	b2d2      	uxtb	r2, r2
 800c3ca:	440b      	add	r3, r1
 800c3cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	e000ed00 	.word	0xe000ed00
 800c3e0:	e000e100 	.word	0xe000e100

0800c3e4 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b089      	sub	sp, #36	; 0x24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	f1c3 0307 	rsb	r3, r3, #7
 800c3fe:	2b04      	cmp	r3, #4
 800c400:	bf28      	it	cs
 800c402:	2304      	movcs	r3, #4
 800c404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	3304      	adds	r3, #4
 800c40a:	2b06      	cmp	r3, #6
 800c40c:	d902      	bls.n	800c414 <NVIC_EncodePriority+0x30>
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	3b03      	subs	r3, #3
 800c412:	e000      	b.n	800c416 <NVIC_EncodePriority+0x32>
 800c414:	2300      	movs	r3, #0
 800c416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c418:	2201      	movs	r2, #1
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	1e5a      	subs	r2, r3, #1
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	401a      	ands	r2, r3
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c42a:	2101      	movs	r1, #1
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	fa01 f303 	lsl.w	r3, r1, r3
 800c432:	1e59      	subs	r1, r3, #1
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c438:	4313      	orrs	r3, r2
         );
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3724      	adds	r7, #36	; 0x24
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
	...

0800c448 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3b01      	subs	r3, #1
 800c454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c458:	d301      	bcc.n	800c45e <SysTick_Config+0x16>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e00f      	b.n	800c47e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c45e:	4a0a      	ldr	r2, [pc, #40]	; (800c488 <SysTick_Config+0x40>)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3b01      	subs	r3, #1
 800c464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c466:	210f      	movs	r1, #15
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
 800c46c:	f7ff ff90 	bl	800c390 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <SysTick_Config+0x40>)
 800c472:	2200      	movs	r2, #0
 800c474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c476:	4b04      	ldr	r3, [pc, #16]	; (800c488 <SysTick_Config+0x40>)
 800c478:	2207      	movs	r2, #7
 800c47a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	e000e010 	.word	0xe000e010

0800c48c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ff49 	bl	800c32c <NVIC_SetPriorityGrouping>
}
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b086      	sub	sp, #24
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c4b4:	f7ff ff5e 	bl	800c374 <NVIC_GetPriorityGrouping>
 800c4b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	6978      	ldr	r0, [r7, #20]
 800c4c0:	f7ff ff90 	bl	800c3e4 <NVIC_EncodePriority>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff ff5f 	bl	800c390 <NVIC_SetPriority>
}
 800c4d2:	bf00      	nop
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff ffb0 	bl	800c448 <SysTick_Config>
 800c4e8:	4603      	mov	r3, r0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b089      	sub	sp, #36	; 0x24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c502:	2300      	movs	r3, #0
 800c504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c506:	2300      	movs	r3, #0
 800c508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c50a:	2300      	movs	r3, #0
 800c50c:	61fb      	str	r3, [r7, #28]
 800c50e:	e157      	b.n	800c7c0 <HAL_GPIO_Init+0x2cc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c510:	2201      	movs	r2, #1
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	fa02 f303 	lsl.w	r3, r2, r3
 800c518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	4013      	ands	r3, r2
 800c522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	429a      	cmp	r2, r3
 800c52a:	f040 8146 	bne.w	800c7ba <HAL_GPIO_Init+0x2c6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d003      	beq.n	800c53e <HAL_GPIO_Init+0x4a>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	2b12      	cmp	r3, #18
 800c53c:	d123      	bne.n	800c586 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	08da      	lsrs	r2, r3, #3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3208      	adds	r2, #8
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	f003 0307 	and.w	r3, r3, #7
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	220f      	movs	r2, #15
 800c556:	fa02 f303 	lsl.w	r3, r2, r3
 800c55a:	43db      	mvns	r3, r3
 800c55c:	69ba      	ldr	r2, [r7, #24]
 800c55e:	4013      	ands	r3, r2
 800c560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	691a      	ldr	r2, [r3, #16]
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	fa02 f303 	lsl.w	r3, r2, r3
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	4313      	orrs	r3, r2
 800c576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	08da      	lsrs	r2, r3, #3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3208      	adds	r2, #8
 800c580:	69b9      	ldr	r1, [r7, #24]
 800c582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	2203      	movs	r2, #3
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	43db      	mvns	r3, r3
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	4013      	ands	r3, r2
 800c59c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f003 0203 	and.w	r2, r3, #3
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d00b      	beq.n	800c5da <HAL_GPIO_Init+0xe6>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d007      	beq.n	800c5da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c5ce:	2b11      	cmp	r3, #17
 800c5d0:	d003      	beq.n	800c5da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	2b12      	cmp	r3, #18
 800c5d8:	d130      	bne.n	800c63c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ea:	43db      	mvns	r3, r3
 800c5ec:	69ba      	ldr	r2, [r7, #24]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	68da      	ldr	r2, [r3, #12]
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	4313      	orrs	r3, r2
 800c602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69ba      	ldr	r2, [r7, #24]
 800c608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c610:	2201      	movs	r2, #1
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	fa02 f303 	lsl.w	r3, r2, r3
 800c618:	43db      	mvns	r3, r3
 800c61a:	69ba      	ldr	r2, [r7, #24]
 800c61c:	4013      	ands	r3, r2
 800c61e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	091b      	lsrs	r3, r3, #4
 800c626:	f003 0201 	and.w	r2, r3, #1
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	fa02 f303 	lsl.w	r3, r2, r3
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	4313      	orrs	r3, r2
 800c634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	2203      	movs	r2, #3
 800c648:	fa02 f303 	lsl.w	r3, r2, r3
 800c64c:	43db      	mvns	r3, r3
 800c64e:	69ba      	ldr	r2, [r7, #24]
 800c650:	4013      	ands	r3, r2
 800c652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	4313      	orrs	r3, r2
 800c664:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 80a0 	beq.w	800c7ba <HAL_GPIO_Init+0x2c6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c67a:	4a56      	ldr	r2, [pc, #344]	; (800c7d4 <HAL_GPIO_Init+0x2e0>)
 800c67c:	4b55      	ldr	r3, [pc, #340]	; (800c7d4 <HAL_GPIO_Init+0x2e0>)
 800c67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c684:	6453      	str	r3, [r2, #68]	; 0x44
 800c686:	4b53      	ldr	r3, [pc, #332]	; (800c7d4 <HAL_GPIO_Init+0x2e0>)
 800c688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c692:	4a51      	ldr	r2, [pc, #324]	; (800c7d8 <HAL_GPIO_Init+0x2e4>)
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	089b      	lsrs	r3, r3, #2
 800c698:	3302      	adds	r3, #2
 800c69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	f003 0303 	and.w	r3, r3, #3
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	220f      	movs	r2, #15
 800c6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ae:	43db      	mvns	r3, r3
 800c6b0:	69ba      	ldr	r2, [r7, #24]
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a48      	ldr	r2, [pc, #288]	; (800c7dc <HAL_GPIO_Init+0x2e8>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d019      	beq.n	800c6f2 <HAL_GPIO_Init+0x1fe>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a47      	ldr	r2, [pc, #284]	; (800c7e0 <HAL_GPIO_Init+0x2ec>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d013      	beq.n	800c6ee <HAL_GPIO_Init+0x1fa>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a46      	ldr	r2, [pc, #280]	; (800c7e4 <HAL_GPIO_Init+0x2f0>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d00d      	beq.n	800c6ea <HAL_GPIO_Init+0x1f6>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a45      	ldr	r2, [pc, #276]	; (800c7e8 <HAL_GPIO_Init+0x2f4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d007      	beq.n	800c6e6 <HAL_GPIO_Init+0x1f2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a44      	ldr	r2, [pc, #272]	; (800c7ec <HAL_GPIO_Init+0x2f8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d101      	bne.n	800c6e2 <HAL_GPIO_Init+0x1ee>
 800c6de:	2304      	movs	r3, #4
 800c6e0:	e008      	b.n	800c6f4 <HAL_GPIO_Init+0x200>
 800c6e2:	2305      	movs	r3, #5
 800c6e4:	e006      	b.n	800c6f4 <HAL_GPIO_Init+0x200>
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e004      	b.n	800c6f4 <HAL_GPIO_Init+0x200>
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	e002      	b.n	800c6f4 <HAL_GPIO_Init+0x200>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <HAL_GPIO_Init+0x200>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	f002 0203 	and.w	r2, r2, #3
 800c6fa:	0092      	lsls	r2, r2, #2
 800c6fc:	4093      	lsls	r3, r2
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	4313      	orrs	r3, r2
 800c702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c704:	4934      	ldr	r1, [pc, #208]	; (800c7d8 <HAL_GPIO_Init+0x2e4>)
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	089b      	lsrs	r3, r3, #2
 800c70a:	3302      	adds	r3, #2
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c712:	4b37      	ldr	r3, [pc, #220]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	43db      	mvns	r3, r3
 800c71c:	69ba      	ldr	r2, [r7, #24]
 800c71e:	4013      	ands	r3, r2
 800c720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	4313      	orrs	r3, r2
 800c734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c736:	4a2e      	ldr	r2, [pc, #184]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c73c:	4b2c      	ldr	r3, [pc, #176]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	43db      	mvns	r3, r3
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	4013      	ands	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d003      	beq.n	800c760 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800c758:	69ba      	ldr	r2, [r7, #24]
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c760:	4a23      	ldr	r2, [pc, #140]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c766:	4b22      	ldr	r3, [pc, #136]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	43db      	mvns	r3, r3
 800c770:	69ba      	ldr	r2, [r7, #24]
 800c772:	4013      	ands	r3, r2
 800c774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800c782:	69ba      	ldr	r2, [r7, #24]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	4313      	orrs	r3, r2
 800c788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c78a:	4a19      	ldr	r2, [pc, #100]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	43db      	mvns	r3, r3
 800c79a:	69ba      	ldr	r2, [r7, #24]
 800c79c:	4013      	ands	r3, r2
 800c79e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c7b4:	4a0e      	ldr	r2, [pc, #56]	; (800c7f0 <HAL_GPIO_Init+0x2fc>)
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	2b0f      	cmp	r3, #15
 800c7c4:	f67f aea4 	bls.w	800c510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	3724      	adds	r7, #36	; 0x24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	40023800 	.word	0x40023800
 800c7d8:	40013800 	.word	0x40013800
 800c7dc:	40020000 	.word	0x40020000
 800c7e0:	40020400 	.word	0x40020400
 800c7e4:	40020800 	.word	0x40020800
 800c7e8:	40020c00 	.word	0x40020c00
 800c7ec:	40021000 	.word	0x40021000
 800c7f0:	40013c00 	.word	0x40013c00

0800c7f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	807b      	strh	r3, [r7, #2]
 800c800:	4613      	mov	r3, r2
 800c802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c804:	787b      	ldrb	r3, [r7, #1]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c80a:	887a      	ldrh	r2, [r7, #2]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c810:	e003      	b.n	800c81a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c812:	887b      	ldrh	r3, [r7, #2]
 800c814:	041a      	lsls	r2, r3, #16
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	619a      	str	r2, [r3, #24]
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	695a      	ldr	r2, [r3, #20]
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	405a      	eors	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	615a      	str	r2, [r3, #20]
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
	...

0800c84c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08e      	sub	sp, #56	; 0x38
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 800c854:	2300      	movs	r3, #0
 800c856:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	d06c      	beq.n	800c93e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c864:	4ba9      	ldr	r3, [pc, #676]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f003 030c 	and.w	r3, r3, #12
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d00c      	beq.n	800c88a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c870:	4ba6      	ldr	r3, [pc, #664]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c878:	2b08      	cmp	r3, #8
 800c87a:	d112      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c87c:	4ba3      	ldr	r3, [pc, #652]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c888:	d10b      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c88a:	4ba0      	ldr	r3, [pc, #640]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d052      	beq.n	800c93c <HAL_RCC_OscConfig+0xf0>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d14e      	bne.n	800c93c <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e211      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800c8a2:	4b9b      	ldr	r3, [pc, #620]	; (800cb10 <HAL_RCC_OscConfig+0x2c4>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8a8:	f7ff fd1e 	bl	800c2e8 <HAL_GetTick>
 800c8ac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8ae:	e00a      	b.n	800c8c6 <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c8b0:	f7ff fd1a 	bl	800c2e8 <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d901      	bls.n	800c8c6 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e1ff      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8c6:	4b91      	ldr	r3, [pc, #580]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1ee      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8d2:	4a8f      	ldr	r2, [pc, #572]	; (800cb10 <HAL_RCC_OscConfig+0x2c4>)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	7013      	strb	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d015      	beq.n	800c910 <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e4:	f7ff fd00 	bl	800c2e8 <HAL_GetTick>
 800c8e8:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8ea:	e00a      	b.n	800c902 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c8ec:	f7ff fcfc 	bl	800c2e8 <HAL_GetTick>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d901      	bls.n	800c902 <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e1e1      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c902:	4b82      	ldr	r3, [pc, #520]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0ee      	beq.n	800c8ec <HAL_RCC_OscConfig+0xa0>
 800c90e:	e016      	b.n	800c93e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c910:	f7ff fcea 	bl	800c2e8 <HAL_GetTick>
 800c914:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c916:	e00a      	b.n	800c92e <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c918:	f7ff fce6 	bl	800c2e8 <HAL_GetTick>
 800c91c:	4602      	mov	r2, r0
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	f241 3288 	movw	r2, #5000	; 0x1388
 800c926:	4293      	cmp	r3, r2
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e1cb      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c92e:	4b77      	ldr	r3, [pc, #476]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1ee      	bne.n	800c918 <HAL_RCC_OscConfig+0xcc>
 800c93a:	e000      	b.n	800c93e <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c93c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	2b00      	cmp	r3, #0
 800c948:	d077      	beq.n	800ca3a <HAL_RCC_OscConfig+0x1ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c94a:	4b70      	ldr	r3, [pc, #448]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f003 030c 	and.w	r3, r3, #12
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00b      	beq.n	800c96e <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c956:	4b6d      	ldr	r3, [pc, #436]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c95e:	2b08      	cmp	r3, #8
 800c960:	d126      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c962:	4b6a      	ldr	r3, [pc, #424]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d120      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x164>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c96e:	4b67      	ldr	r3, [pc, #412]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <HAL_RCC_OscConfig+0x13a>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d001      	beq.n	800c986 <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e19f      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c986:	4861      	ldr	r0, [pc, #388]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c988:	4b60      	ldr	r3, [pc, #384]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6919      	ldr	r1, [r3, #16]
 800c994:	23f8      	movs	r3, #248	; 0xf8
 800c996:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	fa93 f3a3 	rbit	r3, r3
 800c99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800c9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a2:	fab3 f383 	clz	r3, r3
 800c9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c9ae:	e044      	b.n	800ca3a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d02a      	beq.n	800ca0e <HAL_RCC_OscConfig+0x1c2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c9b8:	4b56      	ldr	r3, [pc, #344]	; (800cb14 <HAL_RCC_OscConfig+0x2c8>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9be:	f7ff fc93 	bl	800c2e8 <HAL_GetTick>
 800c9c2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9c4:	e008      	b.n	800c9d8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9c6:	f7ff fc8f 	bl	800c2e8 <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	2b64      	cmp	r3, #100	; 0x64
 800c9d2:	d901      	bls.n	800c9d8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e176      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9d8:	4b4c      	ldr	r3, [pc, #304]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0302 	and.w	r3, r3, #2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0f0      	beq.n	800c9c6 <HAL_RCC_OscConfig+0x17a>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9e4:	4849      	ldr	r0, [pc, #292]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c9e6:	4b49      	ldr	r3, [pc, #292]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6919      	ldr	r1, [r3, #16]
 800c9f2:	23f8      	movs	r3, #248	; 0xf8
 800c9f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	fa93 f3a3 	rbit	r3, r3
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	fab3 f383 	clz	r3, r3
 800ca04:	fa01 f303 	lsl.w	r3, r1, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	6003      	str	r3, [r0, #0]
 800ca0c:	e015      	b.n	800ca3a <HAL_RCC_OscConfig+0x1ee>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca0e:	4b41      	ldr	r3, [pc, #260]	; (800cb14 <HAL_RCC_OscConfig+0x2c8>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca14:	f7ff fc68 	bl	800c2e8 <HAL_GetTick>
 800ca18:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca1a:	e008      	b.n	800ca2e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca1c:	f7ff fc64 	bl	800c2e8 <HAL_GetTick>
 800ca20:	4602      	mov	r2, r0
 800ca22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	2b64      	cmp	r3, #100	; 0x64
 800ca28:	d901      	bls.n	800ca2e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e14b      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca2e:	4b37      	ldr	r3, [pc, #220]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1f0      	bne.n	800ca1c <HAL_RCC_OscConfig+0x1d0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0308 	and.w	r3, r3, #8
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d030      	beq.n	800caa8 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d016      	beq.n	800ca7c <HAL_RCC_OscConfig+0x230>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca4e:	4b32      	ldr	r3, [pc, #200]	; (800cb18 <HAL_RCC_OscConfig+0x2cc>)
 800ca50:	2201      	movs	r2, #1
 800ca52:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca54:	f7ff fc48 	bl	800c2e8 <HAL_GetTick>
 800ca58:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca5a:	e008      	b.n	800ca6e <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca5c:	f7ff fc44 	bl	800c2e8 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b64      	cmp	r3, #100	; 0x64
 800ca68:	d901      	bls.n	800ca6e <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e12b      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca6e:	4b27      	ldr	r3, [pc, #156]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800ca70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f0      	beq.n	800ca5c <HAL_RCC_OscConfig+0x210>
 800ca7a:	e015      	b.n	800caa8 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca7c:	4b26      	ldr	r3, [pc, #152]	; (800cb18 <HAL_RCC_OscConfig+0x2cc>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca82:	f7ff fc31 	bl	800c2e8 <HAL_GetTick>
 800ca86:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca88:	e008      	b.n	800ca9c <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca8a:	f7ff fc2d 	bl	800c2e8 <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b64      	cmp	r3, #100	; 0x64
 800ca96:	d901      	bls.n	800ca9c <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e114      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca9c:	4b1b      	ldr	r3, [pc, #108]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800ca9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1f0      	bne.n	800ca8a <HAL_RCC_OscConfig+0x23e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d07c      	beq.n	800cbae <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cab4:	4a15      	ldr	r2, [pc, #84]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800cab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cabe:	6413      	str	r3, [r2, #64]	; 0x40
 800cac0:	4b12      	ldr	r3, [pc, #72]	; (800cb0c <HAL_RCC_OscConfig+0x2c0>)
 800cac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac8:	60bb      	str	r3, [r7, #8]
 800caca:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cacc:	4a13      	ldr	r2, [pc, #76]	; (800cb1c <HAL_RCC_OscConfig+0x2d0>)
 800cace:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <HAL_RCC_OscConfig+0x2d0>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cad6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cad8:	f7ff fc06 	bl	800c2e8 <HAL_GetTick>
 800cadc:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cade:	e008      	b.n	800caf2 <HAL_RCC_OscConfig+0x2a6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cae0:	f7ff fc02 	bl	800c2e8 <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	2b64      	cmp	r3, #100	; 0x64
 800caec:	d901      	bls.n	800caf2 <HAL_RCC_OscConfig+0x2a6>
      {
        return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e0e9      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800caf2:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <HAL_RCC_OscConfig+0x2d0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0f0      	beq.n	800cae0 <HAL_RCC_OscConfig+0x294>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800cafe:	4b08      	ldr	r3, [pc, #32]	; (800cb20 <HAL_RCC_OscConfig+0x2d4>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb04:	f7ff fbf0 	bl	800c2e8 <HAL_GetTick>
 800cb08:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb0a:	e016      	b.n	800cb3a <HAL_RCC_OscConfig+0x2ee>
 800cb0c:	40023800 	.word	0x40023800
 800cb10:	40023802 	.word	0x40023802
 800cb14:	42470000 	.word	0x42470000
 800cb18:	42470e80 	.word	0x42470e80
 800cb1c:	40007000 	.word	0x40007000
 800cb20:	40023870 	.word	0x40023870
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb24:	f7ff fbe0 	bl	800c2e8 <HAL_GetTick>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d901      	bls.n	800cb3a <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	e0c5      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb3a:	4b65      	ldr	r3, [pc, #404]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3e:	f003 0302 	and.w	r3, r3, #2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1ee      	bne.n	800cb24 <HAL_RCC_OscConfig+0x2d8>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb46:	4a63      	ldr	r2, [pc, #396]	; (800ccd4 <HAL_RCC_OscConfig+0x488>)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	7013      	strb	r3, [r2, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d015      	beq.n	800cb84 <HAL_RCC_OscConfig+0x338>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb58:	f7ff fbc6 	bl	800c2e8 <HAL_GetTick>
 800cb5c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb5e:	e00a      	b.n	800cb76 <HAL_RCC_OscConfig+0x32a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb60:	f7ff fbc2 	bl	800c2e8 <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d901      	bls.n	800cb76 <HAL_RCC_OscConfig+0x32a>
        {
          return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e0a7      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb76:	4b56      	ldr	r3, [pc, #344]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7a:	f003 0302 	and.w	r3, r3, #2
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0ee      	beq.n	800cb60 <HAL_RCC_OscConfig+0x314>
 800cb82:	e014      	b.n	800cbae <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb84:	f7ff fbb0 	bl	800c2e8 <HAL_GetTick>
 800cb88:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb8a:	e00a      	b.n	800cba2 <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb8c:	f7ff fbac 	bl	800c2e8 <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d901      	bls.n	800cba2 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e091      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cba2:	4b4b      	ldr	r3, [pc, #300]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba6:	f003 0302 	and.w	r3, r3, #2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1ee      	bne.n	800cb8c <HAL_RCC_OscConfig+0x340>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f000 8086 	beq.w	800ccc4 <HAL_RCC_OscConfig+0x478>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cbb8:	4b45      	ldr	r3, [pc, #276]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f003 030c 	and.w	r3, r3, #12
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d07d      	beq.n	800ccc0 <HAL_RCC_OscConfig+0x474>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d162      	bne.n	800cc92 <HAL_RCC_OscConfig+0x446>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbcc:	4b42      	ldr	r3, [pc, #264]	; (800ccd8 <HAL_RCC_OscConfig+0x48c>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd2:	f7ff fb89 	bl	800c2e8 <HAL_GetTick>
 800cbd6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbda:	f7ff fb85 	bl	800c2e8 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b64      	cmp	r3, #100	; 0x64
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e06c      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbec:	4b38      	ldr	r3, [pc, #224]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1f0      	bne.n	800cbda <HAL_RCC_OscConfig+0x38e>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cbf8:	4835      	ldr	r0, [pc, #212]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	69da      	ldr	r2, [r3, #28]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cc08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	fa93 f3a3 	rbit	r3, r3
 800cc14:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	fab3 f383 	clz	r3, r3
 800cc1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc20:	431a      	orrs	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	1e59      	subs	r1, r3, #1
 800cc2a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800cc2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	fa93 f3a3 	rbit	r3, r3
 800cc36:	617b      	str	r3, [r7, #20]
  return(result);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	fab3 f383 	clz	r3, r3
 800cc3e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc42:	431a      	orrs	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cc48:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800cc4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	fa93 f3a3 	rbit	r3, r3
 800cc54:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	fab3 f383 	clz	r3, r3
 800cc5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc60:	4313      	orrs	r3, r2
 800cc62:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc64:	4b1c      	ldr	r3, [pc, #112]	; (800ccd8 <HAL_RCC_OscConfig+0x48c>)
 800cc66:	2201      	movs	r2, #1
 800cc68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc6a:	f7ff fb3d 	bl	800c2e8 <HAL_GetTick>
 800cc6e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc70:	e008      	b.n	800cc84 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cc72:	f7ff fb39 	bl	800c2e8 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b64      	cmp	r3, #100	; 0x64
 800cc7e:	d901      	bls.n	800cc84 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e020      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc84:	4b12      	ldr	r3, [pc, #72]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0f0      	beq.n	800cc72 <HAL_RCC_OscConfig+0x426>
 800cc90:	e018      	b.n	800ccc4 <HAL_RCC_OscConfig+0x478>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc92:	4b11      	ldr	r3, [pc, #68]	; (800ccd8 <HAL_RCC_OscConfig+0x48c>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc98:	f7ff fb26 	bl	800c2e8 <HAL_GetTick>
 800cc9c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc9e:	e008      	b.n	800ccb2 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cca0:	f7ff fb22 	bl	800c2e8 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b64      	cmp	r3, #100	; 0x64
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e009      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccb2:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <HAL_RCC_OscConfig+0x484>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f0      	bne.n	800cca0 <HAL_RCC_OscConfig+0x454>
 800ccbe:	e001      	b.n	800ccc4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <HAL_RCC_OscConfig+0x47a>
    }
  }
  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3738      	adds	r7, #56	; 0x38
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	40023800 	.word	0x40023800
 800ccd4:	40023870 	.word	0x40023870
 800ccd8:	42470060 	.word	0x42470060

0800ccdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 800cce6:	2300      	movs	r3, #0
 800cce8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800ccea:	4ba0      	ldr	r3, [pc, #640]	; (800cf6c <HAL_RCC_ClockConfig+0x290>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 020f 	and.w	r2, r3, #15
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	f080 80a6 	bcs.w	800ce46 <HAL_RCC_ClockConfig+0x16a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccfa:	4b9c      	ldr	r3, [pc, #624]	; (800cf6c <HAL_RCC_ClockConfig+0x290>)
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800cd02:	4b9a      	ldr	r3, [pc, #616]	; (800cf6c <HAL_RCC_ClockConfig+0x290>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 020f 	and.w	r2, r3, #15
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d001      	beq.n	800cd14 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	e165      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0302 	and.w	r3, r3, #2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d008      	beq.n	800cd32 <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd20:	4993      	ldr	r1, [pc, #588]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd22:	4b93      	ldr	r3, [pc, #588]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 812d 	beq.w	800cf9a <HAL_RCC_ClockConfig+0x2be>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d107      	bne.n	800cd58 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd48:	4b89      	ldr	r3, [pc, #548]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d119      	bne.n	800cd88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e143      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d003      	beq.n	800cd68 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d107      	bne.n	800cd78 <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd68:	4b81      	ldr	r3, [pc, #516]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d109      	bne.n	800cd88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e133      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd78:	4b7d      	ldr	r3, [pc, #500]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e12b      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd88:	4979      	ldr	r1, [pc, #484]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd8a:	4b79      	ldr	r3, [pc, #484]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f023 0203 	bic.w	r2, r3, #3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	4313      	orrs	r3, r2
 800cd98:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd9a:	f7ff faa5 	bl	800c2e8 <HAL_GetTick>
 800cd9e:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d112      	bne.n	800cdce <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cda8:	e00a      	b.n	800cdc0 <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdaa:	f7ff fa9d 	bl	800c2e8 <HAL_GetTick>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d901      	bls.n	800cdc0 <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e10f      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cdc0:	4b6b      	ldr	r3, [pc, #428]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f003 030c 	and.w	r3, r3, #12
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d1ee      	bne.n	800cdaa <HAL_RCC_ClockConfig+0xce>
 800cdcc:	e0e5      	b.n	800cf9a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d112      	bne.n	800cdfc <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cdd6:	e00a      	b.n	800cdee <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdd8:	f7ff fa86 	bl	800c2e8 <HAL_GetTick>
 800cddc:	4602      	mov	r2, r0
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d901      	bls.n	800cdee <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 800cdea:	2303      	movs	r3, #3
 800cdec:	e0f8      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cdee:	4b60      	ldr	r3, [pc, #384]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	f003 030c 	and.w	r3, r3, #12
 800cdf6:	2b08      	cmp	r3, #8
 800cdf8:	d1ee      	bne.n	800cdd8 <HAL_RCC_ClockConfig+0xfc>
 800cdfa:	e0ce      	b.n	800cf9a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	d119      	bne.n	800ce38 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800ce04:	e00a      	b.n	800ce1c <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce06:	f7ff fa6f 	bl	800c2e8 <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d901      	bls.n	800ce1c <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e0e1      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800ce1c:	4b54      	ldr	r3, [pc, #336]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	e7f1      	b.n	800ce06 <HAL_RCC_ClockConfig+0x12a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce22:	f7ff fa61 	bl	800c2e8 <HAL_GetTick>
 800ce26:	4602      	mov	r2, r0
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d901      	bls.n	800ce38 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e0d3      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ce38:	4b4d      	ldr	r3, [pc, #308]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	f003 030c 	and.w	r3, r3, #12
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1ee      	bne.n	800ce22 <HAL_RCC_ClockConfig+0x146>
 800ce44:	e0a9      	b.n	800cf9a <HAL_RCC_ClockConfig+0x2be>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d008      	beq.n	800ce64 <HAL_RCC_ClockConfig+0x188>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce52:	4947      	ldr	r1, [pc, #284]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce54:	4b46      	ldr	r3, [pc, #280]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 8087 	beq.w	800cf80 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d107      	bne.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce7a:	4b3d      	ldr	r3, [pc, #244]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d119      	bne.n	800ceba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e0aa      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d003      	beq.n	800ce9a <HAL_RCC_ClockConfig+0x1be>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d107      	bne.n	800ceaa <HAL_RCC_ClockConfig+0x1ce>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce9a:	4b35      	ldr	r3, [pc, #212]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d109      	bne.n	800ceba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e09a      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ceaa:	4b31      	ldr	r3, [pc, #196]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d101      	bne.n	800ceba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e092      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ceba:	492d      	ldr	r1, [pc, #180]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cebc:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f023 0203 	bic.w	r2, r3, #3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cecc:	f7ff fa0c 	bl	800c2e8 <HAL_GetTick>
 800ced0:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d112      	bne.n	800cf00 <HAL_RCC_ClockConfig+0x224>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ceda:	e00a      	b.n	800cef2 <HAL_RCC_ClockConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cedc:	f7ff fa04 	bl	800c2e8 <HAL_GetTick>
 800cee0:	4602      	mov	r2, r0
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d901      	bls.n	800cef2 <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e076      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cef2:	4b1f      	ldr	r3, [pc, #124]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f003 030c 	and.w	r3, r3, #12
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d1ee      	bne.n	800cedc <HAL_RCC_ClockConfig+0x200>
 800cefe:	e03f      	b.n	800cf80 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d112      	bne.n	800cf2e <HAL_RCC_ClockConfig+0x252>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf08:	e00a      	b.n	800cf20 <HAL_RCC_ClockConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf0a:	f7ff f9ed 	bl	800c2e8 <HAL_GetTick>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d901      	bls.n	800cf20 <HAL_RCC_ClockConfig+0x244>
          {
            return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e05f      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf20:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f003 030c 	and.w	r3, r3, #12
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d1ee      	bne.n	800cf0a <HAL_RCC_ClockConfig+0x22e>
 800cf2c:	e028      	b.n	800cf80 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d11e      	bne.n	800cf74 <HAL_RCC_ClockConfig+0x298>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800cf36:	e00a      	b.n	800cf4e <HAL_RCC_ClockConfig+0x272>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf38:	f7ff f9d6 	bl	800c2e8 <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_ClockConfig+0x272>
          {
            return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e048      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800cf4e:	4b08      	ldr	r3, [pc, #32]	; (800cf70 <HAL_RCC_ClockConfig+0x294>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	e7f1      	b.n	800cf38 <HAL_RCC_ClockConfig+0x25c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf54:	f7ff f9c8 	bl	800c2e8 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d906      	bls.n	800cf74 <HAL_RCC_ClockConfig+0x298>
          {
            return HAL_TIMEOUT;
 800cf66:	2303      	movs	r3, #3
 800cf68:	e03a      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
 800cf6a:	bf00      	nop
 800cf6c:	40023c00 	.word	0x40023c00
 800cf70:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf74:	4b1c      	ldr	r3, [pc, #112]	; (800cfe8 <HAL_RCC_ClockConfig+0x30c>)
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f003 030c 	and.w	r3, r3, #12
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e9      	bne.n	800cf54 <HAL_RCC_ClockConfig+0x278>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf80:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <HAL_RCC_ClockConfig+0x310>)
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	b2d2      	uxtb	r2, r2
 800cf86:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800cf88:	4b18      	ldr	r3, [pc, #96]	; (800cfec <HAL_RCC_ClockConfig+0x310>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 020f 	and.w	r2, r3, #15
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d001      	beq.n	800cf9a <HAL_RCC_ClockConfig+0x2be>
    {
      return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e022      	b.n	800cfe0 <HAL_RCC_ClockConfig+0x304>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 0304 	and.w	r3, r3, #4
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d008      	beq.n	800cfb8 <HAL_RCC_ClockConfig+0x2dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cfa6:	4910      	ldr	r1, [pc, #64]	; (800cfe8 <HAL_RCC_ClockConfig+0x30c>)
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <HAL_RCC_ClockConfig+0x30c>)
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 0308 	and.w	r3, r3, #8
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d009      	beq.n	800cfd8 <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cfc4:	4908      	ldr	r1, [pc, #32]	; (800cfe8 <HAL_RCC_ClockConfig+0x30c>)
 800cfc6:	4b08      	ldr	r3, [pc, #32]	; (800cfe8 <HAL_RCC_ClockConfig+0x30c>)
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800cfd8:	200f      	movs	r0, #15
 800cfda:	f7ff f95b 	bl	800c294 <HAL_InitTick>
  
  return HAL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	40023800 	.word	0x40023800
 800cfec:	40023c00 	.word	0x40023c00

0800cff0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b08b      	sub	sp, #44	; 0x2c
 800cff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	2300      	movs	r3, #0
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
 800cffe:	2300      	movs	r3, #0
 800d000:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d006:	4b36      	ldr	r3, [pc, #216]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	f003 030c 	and.w	r3, r3, #12
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d006      	beq.n	800d020 <HAL_RCC_GetSysClockFreq+0x30>
 800d012:	2b08      	cmp	r3, #8
 800d014:	d007      	beq.n	800d026 <HAL_RCC_GetSysClockFreq+0x36>
 800d016:	2b00      	cmp	r3, #0
 800d018:	d158      	bne.n	800d0cc <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d01a:	4b32      	ldr	r3, [pc, #200]	; (800d0e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800d01c:	623b      	str	r3, [r7, #32]
       break;
 800d01e:	e058      	b.n	800d0d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d020:	4b31      	ldr	r3, [pc, #196]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d022:	623b      	str	r3, [r7, #32]
      break;
 800d024:	e055      	b.n	800d0d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d026:	4b2e      	ldr	r3, [pc, #184]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d02e:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d030:	4b2b      	ldr	r3, [pc, #172]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d017      	beq.n	800d06c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800d03c:	4a2a      	ldr	r2, [pc, #168]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	fbb2 f2f3 	udiv	r2, r2, r3
 800d044:	4b26      	ldr	r3, [pc, #152]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d046:	6859      	ldr	r1, [r3, #4]
 800d048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d04c:	400b      	ands	r3, r1
 800d04e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800d052:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d054:	6979      	ldr	r1, [r7, #20]
 800d056:	fa91 f1a1 	rbit	r1, r1
 800d05a:	6139      	str	r1, [r7, #16]
  return(result);
 800d05c:	6939      	ldr	r1, [r7, #16]
 800d05e:	fab1 f181 	clz	r1, r1
 800d062:	40cb      	lsrs	r3, r1
 800d064:	fb03 f302 	mul.w	r3, r3, r2
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
 800d06a:	e016      	b.n	800d09a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800d06c:	4a1d      	ldr	r2, [pc, #116]	; (800d0e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	fbb2 f2f3 	udiv	r2, r2, r3
 800d074:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d076:	6859      	ldr	r1, [r3, #4]
 800d078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d07c:	400b      	ands	r3, r1
 800d07e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800d082:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d084:	68f9      	ldr	r1, [r7, #12]
 800d086:	fa91 f1a1 	rbit	r1, r1
 800d08a:	60b9      	str	r1, [r7, #8]
  return(result);
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	fab1 f181 	clz	r1, r1
 800d092:	40cb      	lsrs	r3, r1
 800d094:	fb03 f302 	mul.w	r3, r3, r2
 800d098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800d09a:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d0a2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800d0a6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	fa93 f3a3 	rbit	r3, r3
 800d0ae:	603b      	str	r3, [r7, #0]
  return(result);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	fab3 f383 	clz	r3, r3
 800d0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	005b      	lsls	r3, r3, #1
 800d0be:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c8:	623b      	str	r3, [r7, #32]
      break;
 800d0ca:	e002      	b.n	800d0d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800d0ce:	623b      	str	r3, [r7, #32]
      break;
 800d0d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	372c      	adds	r7, #44	; 0x2c
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	40023800 	.word	0x40023800
 800d0e4:	00f42400 	.word	0x00f42400
 800d0e8:	007a1200 	.word	0x007a1200

0800d0ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800d0f2:	f7ff ff7d 	bl	800cff0 <HAL_RCC_GetSysClockFreq>
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	4b0d      	ldr	r3, [pc, #52]	; (800d130 <HAL_RCC_GetHCLKFreq+0x44>)
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d100:	23f0      	movs	r3, #240	; 0xf0
 800d102:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	fa93 f3a3 	rbit	r3, r3
 800d10a:	603b      	str	r3, [r7, #0]
  return(result);
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	fab3 f383 	clz	r3, r3
 800d112:	fa22 f303 	lsr.w	r3, r2, r3
 800d116:	4a07      	ldr	r2, [pc, #28]	; (800d134 <HAL_RCC_GetHCLKFreq+0x48>)
 800d118:	5cd3      	ldrb	r3, [r2, r3]
 800d11a:	fa21 f303 	lsr.w	r3, r1, r3
 800d11e:	4a06      	ldr	r2, [pc, #24]	; (800d138 <HAL_RCC_GetHCLKFreq+0x4c>)
 800d120:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d122:	4b05      	ldr	r3, [pc, #20]	; (800d138 <HAL_RCC_GetHCLKFreq+0x4c>)
 800d124:	681b      	ldr	r3, [r3, #0]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	40023800 	.word	0x40023800
 800d134:	0800d60c 	.word	0x0800d60c
 800d138:	20000000 	.word	0x20000000

0800d13c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e057      	b.n	800d1fe <HAL_SPI_Init+0xc2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f84f 	bl	800d206 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	6812      	ldr	r2, [r2, #0]
 800d178:	6812      	ldr	r2, [r2, #0]
 800d17a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d17e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	6851      	ldr	r1, [r2, #4]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	6892      	ldr	r2, [r2, #8]
 800d18c:	4311      	orrs	r1, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	68d2      	ldr	r2, [r2, #12]
 800d192:	4311      	orrs	r1, r2
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	6912      	ldr	r2, [r2, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d198:	4311      	orrs	r1, r2
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	6952      	ldr	r2, [r2, #20]
 800d19e:	4311      	orrs	r1, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	6992      	ldr	r2, [r2, #24]
 800d1a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800d1a8:	4311      	orrs	r1, r2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	69d2      	ldr	r2, [r2, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800d1ae:	4311      	orrs	r1, r2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	6a12      	ldr	r2, [r2, #32]
 800d1b4:	4311      	orrs	r1, r2
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d1ba:	430a      	orrs	r2, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d1bc:	601a      	str	r2, [r3, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	6992      	ldr	r2, [r2, #24]
 800d1c6:	0c12      	lsrs	r2, r2, #16
 800d1c8:	f002 0104 	and.w	r1, r2, #4
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d1dc:	611a      	str	r2, [r3, #16]

  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	69d2      	ldr	r2, [r2, #28]
 800d1e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1ec:	61da      	str	r2, [r3, #28]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 800d206:	b480      	push	{r7}
 800d208:	b083      	sub	sp, #12
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
   /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspInit could be implemented in the user file
   */
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b083      	sub	sp, #12
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  return hspi->State;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d228:	b2db      	uxtb	r3, r3
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
	...

0800d238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d238:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d23c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d23e:	e003      	b.n	800d248 <LoopCopyDataInit>

0800d240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d240:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d246:	3104      	adds	r1, #4

0800d248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d248:	480b      	ldr	r0, [pc, #44]	; (800d278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d24c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d24e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d250:	d3f6      	bcc.n	800d240 <CopyDataInit>
  ldr  r2, =_sbss
 800d252:	4a0b      	ldr	r2, [pc, #44]	; (800d280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d254:	e002      	b.n	800d25c <LoopFillZerobss>

0800d256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d258:	f842 3b04 	str.w	r3, [r2], #4

0800d25c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d25c:	4b09      	ldr	r3, [pc, #36]	; (800d284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d25e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d260:	d3f9      	bcc.n	800d256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d262:	f7fe ffb7 	bl	800c1d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d266:	f000 f995 	bl	800d594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d26a:	f000 f830 	bl	800d2ce <main>
  bx  lr    
 800d26e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d270:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 800d274:	0800d624 	.word	0x0800d624
  ldr  r0, =_sdata
 800d278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d27c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800d280:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800d284:	20000080 	.word	0x20000080

0800d288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d288:	e7fe      	b.n	800d288 <ADC_IRQHandler>

0800d28a <InitSPISlave>:
	if ( txByte == rxByte )
		bSame = 1;
}

void InitSPISlave (void)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b08c      	sub	sp, #48	; 0x30
 800d28e:	af00      	add	r7, sp, #0
	SPI_InitTypeDef param;

	param.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; 	// effective on master mode only
 800d290:	2310      	movs	r3, #16
 800d292:	61fb      	str	r3, [r7, #28]
	param.Direction 		= SPI_DIRECTION_2LINES;		// SPI_DIRECTION_2LINES;
 800d294:	2300      	movs	r3, #0
 800d296:	60bb      	str	r3, [r7, #8]
	param.CLKPhase 			= SPI_PHASE_1EDGE;			// SPI_PHASE_2EDGE;
 800d298:	2300      	movs	r3, #0
 800d29a:	617b      	str	r3, [r7, #20]
	param.CLKPolarity 		= SPI_POLARITY_LOW;			// SPI_POLARITY_HIGH;
 800d29c:	2300      	movs	r3, #0
 800d29e:	613b      	str	r3, [r7, #16]
	param.CRCCalculation 	= SPI_CRCCALCULATION_DISABLED;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	62bb      	str	r3, [r7, #40]	; 0x28
	param.CRCPolynomial 	= 7;
 800d2a4:	2307      	movs	r3, #7
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	param.DataSize 			= SPI_DATASIZE_8BIT;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	60fb      	str	r3, [r7, #12]
	param.FirstBit 			= SPI_FIRSTBIT_MSB;			// effective on master mode only
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	623b      	str	r3, [r7, #32]
	param.NSS 				= SPI_NSS_SOFT;				// SPI_NSS_HARD_INPUT;//SPI_NSS_SOFT; // this SPI module in slave mode is internally selected
 800d2b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2b4:	61bb      	str	r3, [r7, #24]
	param.TIMode 			= SPI_TIMODE_DISABLED;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24
	param.Mode 				= SPI_MODE_SLAVE;			// SPI_MODE_MASTER;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	607b      	str	r3, [r7, #4]

	BSP_SPIx_Init(&param);
 800d2be:	1d3b      	adds	r3, r7, #4
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 f943 	bl	800d54c <BSP_SPIx_Init>
}
 800d2c6:	bf00      	nop
 800d2c8:	3730      	adds	r7, #48	; 0x30
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	af00      	add	r7, sp, #0
	HAL_Init();
 800d2d2:	f7fe ffb5 	bl	800c240 <HAL_Init>

	/* Configure the System clock to 84 MHz */
	SystemClock_Config();
 800d2d6:	f000 f80d 	bl	800d2f4 <SystemClock_Config>

	/* Add your application code here  */
	BSP_LED_Init(LED2); // In case of calling InitSPI(), LED2 related functions can't be used; the pin is shared..
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f000 f894 	bl	800d408 <BSP_LED_Init>

	//InitSPIMaster();
	InitSPISlave();
 800d2e0:	f7ff ffd3 	bl	800d28a <InitSPISlave>

	/* Infinite loop */
	while (1)
	{
		BSP_LED_Toggle(LED2);
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f000 f8c7 	bl	800d478 <BSP_LED_Toggle>
		HAL_Delay(1000);
 800d2ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2ee:	f7ff f807 	bl	800c300 <HAL_Delay>
		BSP_LED_Toggle(LED2);
 800d2f2:	e7f7      	b.n	800d2e4 <main+0x16>

0800d2f4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2 
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b094      	sub	sp, #80	; 0x50
 800d2f8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d2fa:	4a28      	ldr	r2, [pc, #160]	; (800d39c <SystemClock_Config+0xa8>)
 800d2fc:	4b27      	ldr	r3, [pc, #156]	; (800d39c <SystemClock_Config+0xa8>)
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d304:	6413      	str	r3, [r2, #64]	; 0x40
 800d306:	4b25      	ldr	r3, [pc, #148]	; (800d39c <SystemClock_Config+0xa8>)
 800d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d30e:	60bb      	str	r3, [r7, #8]
 800d310:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d312:	4a23      	ldr	r2, [pc, #140]	; (800d3a0 <SystemClock_Config+0xac>)
 800d314:	4b22      	ldr	r3, [pc, #136]	; (800d3a0 <SystemClock_Config+0xac>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d31c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d320:	6013      	str	r3, [r2, #0]
 800d322:	4b1f      	ldr	r3, [pc, #124]	; (800d3a0 <SystemClock_Config+0xac>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d32a:	607b      	str	r3, [r7, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d32e:	2302      	movs	r3, #2
 800d330:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d332:	2301      	movs	r3, #1
 800d334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800d336:	2310      	movs	r3, #16
 800d338:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d33a:	2302      	movs	r3, #2
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d33e:	2300      	movs	r3, #0
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 800d342:	2310      	movs	r3, #16
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800d346:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800d34a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800d34c:	2304      	movs	r3, #4
 800d34e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d350:	2307      	movs	r3, #7
 800d352:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d354:	f107 030c 	add.w	r3, r7, #12
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fa77 	bl	800c84c <HAL_RCC_OscConfig>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800d364:	f000 f81e 	bl	800d3a4 <Error_Handler>
  }
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800d368:	230f      	movs	r3, #15
 800d36a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d36c:	2302      	movs	r3, #2
 800d36e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d370:	2300      	movs	r3, #0
 800d372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800d374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d378:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800d37a:	2300      	movs	r3, #0
 800d37c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d37e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d382:	2102      	movs	r1, #2
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fca9 	bl	800ccdc <HAL_RCC_ClockConfig>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800d390:	f000 f808 	bl	800d3a4 <Error_Handler>
  }  
}
 800d394:	bf00      	nop
 800d396:	3750      	adds	r7, #80	; 0x50
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	40023800 	.word	0x40023800
 800d3a0:	40007000 	.word	0x40007000

0800d3a4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 800d3a8:	e7fe      	b.n	800d3a8 <Error_Handler+0x4>

0800d3aa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	af00      	add	r7, sp, #0
}
 800d3ae:	bf00      	nop
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d3bc:	e7fe      	b.n	800d3bc <HardFault_Handler+0x4>

0800d3be <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d3c2:	e7fe      	b.n	800d3c2 <MemManage_Handler+0x4>

0800d3c4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d3c8:	e7fe      	b.n	800d3c8 <BusFault_Handler+0x4>

0800d3ca <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d3ce:	e7fe      	b.n	800d3ce <UsageFault_Handler+0x4>

0800d3d0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
}
 800d3d4:	bf00      	nop
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	af00      	add	r7, sp, #0
}
 800d3e2:	bf00      	nop
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	af00      	add	r7, sp, #0
}
 800d3f0:	bf00      	nop
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800d3fe:	f7fe ff65 	bl	800c2cc <HAL_IncTick>
}
 800d402:	bf00      	nop
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10b      	bne.n	800d430 <BSP_LED_Init+0x28>
 800d418:	4a15      	ldr	r2, [pc, #84]	; (800d470 <BSP_LED_Init+0x68>)
 800d41a:	4b15      	ldr	r3, [pc, #84]	; (800d470 <BSP_LED_Init+0x68>)
 800d41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41e:	f043 0301 	orr.w	r3, r3, #1
 800d422:	6313      	str	r3, [r2, #48]	; 0x30
 800d424:	4b12      	ldr	r3, [pc, #72]	; (800d470 <BSP_LED_Init+0x68>)
 800d426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	60bb      	str	r3, [r7, #8]
 800d42e:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800d430:	2320      	movs	r3, #32
 800d432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d434:	2301      	movs	r3, #1
 800d436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d438:	2301      	movs	r3, #1
 800d43a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800d43c:	2302      	movs	r3, #2
 800d43e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	4a0c      	ldr	r2, [pc, #48]	; (800d474 <BSP_LED_Init+0x6c>)
 800d444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d448:	f107 020c 	add.w	r2, r7, #12
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff f850 	bl	800c4f4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800d454:	79fb      	ldrb	r3, [r7, #7]
 800d456:	4a07      	ldr	r2, [pc, #28]	; (800d474 <BSP_LED_Init+0x6c>)
 800d458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d45c:	2120      	movs	r1, #32
 800d45e:	2200      	movs	r2, #0
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff f9c7 	bl	800c7f4 <HAL_GPIO_WritePin>
}
 800d466:	bf00      	nop
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	40023800 	.word	0x40023800
 800d474:	20000004 	.word	0x20000004

0800d478 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	4a05      	ldr	r2, [pc, #20]	; (800d49c <BSP_LED_Toggle+0x24>)
 800d486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d48a:	2220      	movs	r2, #32
 800d48c:	4611      	mov	r1, r2
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff f9c9 	bl	800c826 <HAL_GPIO_TogglePin>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20000004 	.word	0x20000004

0800d4a0 <SPIx_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  None
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08a      	sub	sp, #40	; 0x28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800d4a8:	4a25      	ldr	r2, [pc, #148]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4aa:	4b25      	ldr	r3, [pc, #148]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ae:	f043 0302 	orr.w	r3, r3, #2
 800d4b2:	6313      	str	r3, [r2, #48]	; 0x30
 800d4b4:	4b22      	ldr	r3, [pc, #136]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b8:	f003 0302 	and.w	r3, r3, #2
 800d4bc:	613b      	str	r3, [r7, #16]
 800d4be:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 800d4c0:	4a1f      	ldr	r2, [pc, #124]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4c2:	4b1f      	ldr	r3, [pc, #124]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c6:	f043 0301 	orr.w	r3, r3, #1
 800d4ca:	6313      	str	r3, [r2, #48]	; 0x30
 800d4cc:	4b1c      	ldr	r3, [pc, #112]	; (800d540 <SPIx_MspInit+0xa0>)
 800d4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 800d4d8:	2308      	movs	r3, #8
 800d4da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 800d4e8:	2305      	movs	r3, #5
 800d4ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800d4ec:	f107 0314 	add.w	r3, r7, #20
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4814      	ldr	r0, [pc, #80]	; (800d544 <SPIx_MspInit+0xa4>)
 800d4f4:	f7fe fffe 	bl	800c4f4 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 800d4f8:	2380      	movs	r3, #128	; 0x80
 800d4fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 800d4fc:	2305      	movs	r3, #5
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800d500:	2302      	movs	r3, #2
 800d502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800d504:	f107 0314 	add.w	r3, r7, #20
 800d508:	4619      	mov	r1, r3
 800d50a:	480f      	ldr	r0, [pc, #60]	; (800d548 <SPIx_MspInit+0xa8>)
 800d50c:	f7fe fff2 	bl	800c4f4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 800d510:	2340      	movs	r3, #64	; 0x40
 800d512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	4619      	mov	r1, r3
 800d51a:	480b      	ldr	r0, [pc, #44]	; (800d548 <SPIx_MspInit+0xa8>)
 800d51c:	f7fe ffea 	bl	800c4f4 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 800d520:	4a07      	ldr	r2, [pc, #28]	; (800d540 <SPIx_MspInit+0xa0>)
 800d522:	4b07      	ldr	r3, [pc, #28]	; (800d540 <SPIx_MspInit+0xa0>)
 800d524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d52a:	6453      	str	r3, [r2, #68]	; 0x44
 800d52c:	4b04      	ldr	r3, [pc, #16]	; (800d540 <SPIx_MspInit+0xa0>)
 800d52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d534:	60bb      	str	r3, [r7, #8]
 800d536:	68bb      	ldr	r3, [r7, #8]
}
 800d538:	bf00      	nop
 800d53a:	3728      	adds	r7, #40	; 0x28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	40023800 	.word	0x40023800
 800d544:	40020400 	.word	0x40020400
 800d548:	40020000 	.word	0x40020000

0800d54c <BSP_SPIx_Init>:
  /* Return the code of the Joystick key pressed */
  return state;
}

void BSP_SPIx_Init(SPI_InitTypeDef *param)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_GetState(&hnucleo_Spi) != HAL_SPI_STATE_RESET)
 800d554:	480c      	ldr	r0, [pc, #48]	; (800d588 <BSP_SPIx_Init+0x3c>)
 800d556:	f7ff fe60 	bl	800d21a <HAL_SPI_GetState>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10e      	bne.n	800d57e <BSP_SPIx_Init+0x32>
		return;

	/* SPI Config */
	hnucleo_Spi.Instance = NUCLEO_SPIx;
 800d560:	4b09      	ldr	r3, [pc, #36]	; (800d588 <BSP_SPIx_Init+0x3c>)
 800d562:	4a0a      	ldr	r2, [pc, #40]	; (800d58c <BSP_SPIx_Init+0x40>)
 800d564:	601a      	str	r2, [r3, #0]

	memcpy( &hnucleo_Spi.Init, param, sizeof(SPI_InitTypeDef));
 800d566:	222c      	movs	r2, #44	; 0x2c
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	4809      	ldr	r0, [pc, #36]	; (800d590 <BSP_SPIx_Init+0x44>)
 800d56c:	f000 f836 	bl	800d5dc <memcpy>

	SPIx_MspInit(&hnucleo_Spi);
 800d570:	4805      	ldr	r0, [pc, #20]	; (800d588 <BSP_SPIx_Init+0x3c>)
 800d572:	f7ff ff95 	bl	800d4a0 <SPIx_MspInit>
	HAL_SPI_Init(&hnucleo_Spi);
 800d576:	4804      	ldr	r0, [pc, #16]	; (800d588 <BSP_SPIx_Init+0x3c>)
 800d578:	f7ff fde0 	bl	800d13c <HAL_SPI_Init>
 800d57c:	e000      	b.n	800d580 <BSP_SPIx_Init+0x34>
		return;
 800d57e:	bf00      	nop
}
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000028 	.word	0x20000028
 800d58c:	40013000 	.word	0x40013000
 800d590:	2000002c 	.word	0x2000002c

0800d594 <__libc_init_array>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	4e0d      	ldr	r6, [pc, #52]	; (800d5cc <__libc_init_array+0x38>)
 800d598:	4c0d      	ldr	r4, [pc, #52]	; (800d5d0 <__libc_init_array+0x3c>)
 800d59a:	1ba4      	subs	r4, r4, r6
 800d59c:	10a4      	asrs	r4, r4, #2
 800d59e:	2500      	movs	r5, #0
 800d5a0:	42a5      	cmp	r5, r4
 800d5a2:	d109      	bne.n	800d5b8 <__libc_init_array+0x24>
 800d5a4:	4e0b      	ldr	r6, [pc, #44]	; (800d5d4 <__libc_init_array+0x40>)
 800d5a6:	4c0c      	ldr	r4, [pc, #48]	; (800d5d8 <__libc_init_array+0x44>)
 800d5a8:	f000 f824 	bl	800d5f4 <_init>
 800d5ac:	1ba4      	subs	r4, r4, r6
 800d5ae:	10a4      	asrs	r4, r4, #2
 800d5b0:	2500      	movs	r5, #0
 800d5b2:	42a5      	cmp	r5, r4
 800d5b4:	d105      	bne.n	800d5c2 <__libc_init_array+0x2e>
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5bc:	4798      	blx	r3
 800d5be:	3501      	adds	r5, #1
 800d5c0:	e7ee      	b.n	800d5a0 <__libc_init_array+0xc>
 800d5c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5c6:	4798      	blx	r3
 800d5c8:	3501      	adds	r5, #1
 800d5ca:	e7f2      	b.n	800d5b2 <__libc_init_array+0x1e>
 800d5cc:	0800d61c 	.word	0x0800d61c
 800d5d0:	0800d61c 	.word	0x0800d61c
 800d5d4:	0800d61c 	.word	0x0800d61c
 800d5d8:	0800d620 	.word	0x0800d620

0800d5dc <memcpy>:
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	1e43      	subs	r3, r0, #1
 800d5e0:	440a      	add	r2, r1
 800d5e2:	4291      	cmp	r1, r2
 800d5e4:	d100      	bne.n	800d5e8 <memcpy+0xc>
 800d5e6:	bd10      	pop	{r4, pc}
 800d5e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5f0:	e7f7      	b.n	800d5e2 <memcpy+0x6>
	...

0800d5f4 <_init>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr

0800d600 <_fini>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr
