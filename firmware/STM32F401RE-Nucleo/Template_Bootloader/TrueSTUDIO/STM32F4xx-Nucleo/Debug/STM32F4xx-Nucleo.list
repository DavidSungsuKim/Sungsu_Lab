
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001268  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000008  0800141c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000028  0800141c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 0000002c  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008a92  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001449  00000000  00000000  00028ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004a0  00000000  00000000  00029f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  0002a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000027ad  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000021eb  00000000  00000000  0002cf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f160  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000010cc  00000000  00000000  0002f1dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013e4 	.word	0x080013e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080013e4 	.word	0x080013e4

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4a13      	ldr	r2, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <SystemInit+0x60>)
 8000224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000228:	609a      	str	r2, [r3, #8]
#endif
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_Init+0x40>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_Init+0x40>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <HAL_Init+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000268:	2003      	movs	r0, #3
 800026a:	f000 f90f 	bl	800048c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800026e:	200f      	movs	r0, #15
 8000270:	f000 f810 	bl	8000294 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000274:	f000 f806 	bl	8000284 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023c00 	.word	0x40023c00

08000284 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
	...

08000294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800029c:	f000 ff26 	bl	80010ec <HAL_RCC_GetHCLKFreq>
 80002a0:	4602      	mov	r2, r0
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <HAL_InitTick+0x34>)
 80002a4:	fba3 2302 	umull	r2, r3, r3, r2
 80002a8:	099b      	lsrs	r3, r3, #6
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f915 	bl	80004da <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	f04f 30ff 	mov.w	r0, #4294967295
 80002b8:	f000 f8f3 	bl	80004a2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002bc:	2300      	movs	r3, #0
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	10624dd3 	.word	0x10624dd3

080002cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  uwTick++;
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HAL_IncTick+0x18>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <HAL_IncTick+0x18>)
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	20000024 	.word	0x20000024

080002e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return uwTick;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <HAL_GetTick+0x14>)
 80002ee:	681b      	ldr	r3, [r3, #0]
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000024 	.word	0x20000024

08000300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800030c:	f7ff ffec 	bl	80002e8 <HAL_GetTick>
 8000310:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000312:	bf00      	nop
 8000314:	f7ff ffe8 	bl	80002e8 <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	1ad2      	subs	r2, r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3f7      	bcc.n	8000314 <HAL_Delay+0x14>
  {
  }
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	da0b      	bge.n	80003bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	490d      	ldr	r1, [pc, #52]	; (80003dc <NVIC_SetPriority+0x4c>)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 030f 	and.w	r3, r3, #15
 80003ac:	3b04      	subs	r3, #4
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ba:	e009      	b.n	80003d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003bc:	4908      	ldr	r1, [pc, #32]	; (80003e0 <NVIC_SetPriority+0x50>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	e000e100 	.word	0xe000e100

080003e4 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	f1c3 0307 	rsb	r3, r3, #7
 80003fe:	2b04      	cmp	r3, #4
 8000400:	bf28      	it	cs
 8000402:	2304      	movcs	r3, #4
 8000404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	3304      	adds	r3, #4
 800040a:	2b06      	cmp	r3, #6
 800040c:	d902      	bls.n	8000414 <NVIC_EncodePriority+0x30>
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3b03      	subs	r3, #3
 8000412:	e000      	b.n	8000416 <NVIC_EncodePriority+0x32>
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	2201      	movs	r2, #1
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	401a      	ands	r2, r3
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800042a:	2101      	movs	r1, #1
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	1e59      	subs	r1, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	4313      	orrs	r3, r2
         );
}
 800043a:	4618      	mov	r0, r3
 800043c:	3724      	adds	r7, #36	; 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3b01      	subs	r3, #1
 8000454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000458:	d301      	bcc.n	800045e <SysTick_Config+0x16>
 800045a:	2301      	movs	r3, #1
 800045c:	e00f      	b.n	800047e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <SysTick_Config+0x40>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000466:	210f      	movs	r1, #15
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f7ff ff90 	bl	8000390 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Config+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SysTick_Config+0x40>)
 8000478:	2207      	movs	r2, #7
 800047a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	e000e010 	.word	0xe000e010

0800048c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff49 	bl	800032c <NVIC_SetPriorityGrouping>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004b4:	f7ff ff5e 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	6978      	ldr	r0, [r7, #20]
 80004c0:	f7ff ff90 	bl	80003e4 <NVIC_EncodePriority>
 80004c4:	4602      	mov	r2, r0
 80004c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff5f 	bl	8000390 <NVIC_SetPriority>
}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ffb0 	bl	8000448 <SysTick_Config>
 80004e8:	4603      	mov	r3, r0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
 800050e:	e157      	b.n	80007c0 <HAL_GPIO_Init+0x2cc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000510:	2201      	movs	r2, #1
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	429a      	cmp	r2, r3
 800052a:	f040 8146 	bne.w	80007ba <HAL_GPIO_Init+0x2c6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d003      	beq.n	800053e <HAL_GPIO_Init+0x4a>
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	2b12      	cmp	r3, #18
 800053c:	d123      	bne.n	8000586 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	08da      	lsrs	r2, r3, #3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3208      	adds	r2, #8
 8000546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	220f      	movs	r2, #15
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4013      	ands	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	69ba      	ldr	r2, [r7, #24]
 8000574:	4313      	orrs	r3, r2
 8000576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	08da      	lsrs	r2, r3, #3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3208      	adds	r2, #8
 8000580:	69b9      	ldr	r1, [r7, #24]
 8000582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	2203      	movs	r2, #3
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	4013      	ands	r3, r2
 800059c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	f003 0203 	and.w	r2, r3, #3
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	69ba      	ldr	r2, [r7, #24]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00b      	beq.n	80005da <HAL_GPIO_Init+0xe6>
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d007      	beq.n	80005da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005ce:	2b11      	cmp	r3, #17
 80005d0:	d003      	beq.n	80005da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b12      	cmp	r3, #18
 80005d8:	d130      	bne.n	800063c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	4013      	ands	r3, r2
 80005f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	68da      	ldr	r2, [r3, #12]
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	69ba      	ldr	r2, [r7, #24]
 8000600:	4313      	orrs	r3, r2
 8000602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000610:	2201      	movs	r2, #1
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	43db      	mvns	r3, r3
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	4013      	ands	r3, r2
 800061e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	f003 0201 	and.w	r2, r3, #1
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	4313      	orrs	r3, r2
 8000634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	69ba      	ldr	r2, [r7, #24]
 800063a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	2203      	movs	r2, #3
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	43db      	mvns	r3, r3
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	4013      	ands	r3, r2
 8000652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	69ba      	ldr	r2, [r7, #24]
 8000662:	4313      	orrs	r3, r2
 8000664:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	69ba      	ldr	r2, [r7, #24]
 800066a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80a0 	beq.w	80007ba <HAL_GPIO_Init+0x2c6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4a56      	ldr	r2, [pc, #344]	; (80007d4 <HAL_GPIO_Init+0x2e0>)
 800067c:	4b55      	ldr	r3, [pc, #340]	; (80007d4 <HAL_GPIO_Init+0x2e0>)
 800067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <HAL_GPIO_Init+0x2e0>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000692:	4a51      	ldr	r2, [pc, #324]	; (80007d8 <HAL_GPIO_Init+0x2e4>)
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	3302      	adds	r3, #2
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f003 0303 	and.w	r3, r3, #3
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	220f      	movs	r2, #15
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	4013      	ands	r3, r2
 80006b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a48      	ldr	r2, [pc, #288]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d019      	beq.n	80006f2 <HAL_GPIO_Init+0x1fe>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <HAL_GPIO_Init+0x2ec>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d013      	beq.n	80006ee <HAL_GPIO_Init+0x1fa>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <HAL_GPIO_Init+0x2f0>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d00d      	beq.n	80006ea <HAL_GPIO_Init+0x1f6>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a45      	ldr	r2, [pc, #276]	; (80007e8 <HAL_GPIO_Init+0x2f4>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d007      	beq.n	80006e6 <HAL_GPIO_Init+0x1f2>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a44      	ldr	r2, [pc, #272]	; (80007ec <HAL_GPIO_Init+0x2f8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_GPIO_Init+0x1ee>
 80006de:	2304      	movs	r3, #4
 80006e0:	e008      	b.n	80006f4 <HAL_GPIO_Init+0x200>
 80006e2:	2305      	movs	r3, #5
 80006e4:	e006      	b.n	80006f4 <HAL_GPIO_Init+0x200>
 80006e6:	2303      	movs	r3, #3
 80006e8:	e004      	b.n	80006f4 <HAL_GPIO_Init+0x200>
 80006ea:	2302      	movs	r3, #2
 80006ec:	e002      	b.n	80006f4 <HAL_GPIO_Init+0x200>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <HAL_GPIO_Init+0x200>
 80006f2:	2300      	movs	r3, #0
 80006f4:	69fa      	ldr	r2, [r7, #28]
 80006f6:	f002 0203 	and.w	r2, r2, #3
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	4093      	lsls	r3, r2
 80006fe:	69ba      	ldr	r2, [r7, #24]
 8000700:	4313      	orrs	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000704:	4934      	ldr	r1, [pc, #208]	; (80007d8 <HAL_GPIO_Init+0x2e4>)
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	3302      	adds	r3, #2
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	43db      	mvns	r3, r3
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	4013      	ands	r3, r2
 8000720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	4313      	orrs	r3, r2
 8000734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000736:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	43db      	mvns	r3, r3
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	4013      	ands	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	4313      	orrs	r3, r2
 800075e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	43db      	mvns	r3, r3
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	4013      	ands	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4313      	orrs	r3, r2
 8000788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	43db      	mvns	r3, r3
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	4013      	ands	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_GPIO_Init+0x2fc>)
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3301      	adds	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	f67f aea4 	bls.w	8000510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007c8:	bf00      	nop
 80007ca:	3724      	adds	r7, #36	; 0x24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40013c00 	.word	0x40013c00

080007f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	4613      	mov	r3, r2
 8000802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000804:	787b      	ldrb	r3, [r7, #1]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000810:	e003      	b.n	800081a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	041a      	lsls	r2, r3, #16
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	619a      	str	r2, [r3, #24]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	405a      	eors	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d06c      	beq.n	800093e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000864:	4ba9      	ldr	r3, [pc, #676]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 030c 	and.w	r3, r3, #12
 800086c:	2b04      	cmp	r3, #4
 800086e:	d00c      	beq.n	800088a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000870:	4ba6      	ldr	r3, [pc, #664]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000878:	2b08      	cmp	r3, #8
 800087a:	d112      	bne.n	80008a2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800087c:	4ba3      	ldr	r3, [pc, #652]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000888:	d10b      	bne.n	80008a2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800088a:	4ba0      	ldr	r3, [pc, #640]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d052      	beq.n	800093c <HAL_RCC_OscConfig+0xf0>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d14e      	bne.n	800093c <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e211      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80008a2:	4b9b      	ldr	r3, [pc, #620]	; (8000b10 <HAL_RCC_OscConfig+0x2c4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008a8:	f7ff fd1e 	bl	80002e8 <HAL_GetTick>
 80008ac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ae:	e00a      	b.n	80008c6 <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b0:	f7ff fd1a 	bl	80002e8 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80008be:	4293      	cmp	r3, r2
 80008c0:	d901      	bls.n	80008c6 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e1ff      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c6:	4b91      	ldr	r3, [pc, #580]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1ee      	bne.n	80008b0 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d2:	4a8f      	ldr	r2, [pc, #572]	; (8000b10 <HAL_RCC_OscConfig+0x2c4>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	7013      	strb	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d015      	beq.n	8000910 <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008e4:	f7ff fd00 	bl	80002e8 <HAL_GetTick>
 80008e8:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	e00a      	b.n	8000902 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ec:	f7ff fcfc 	bl	80002e8 <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e1e1      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0ee      	beq.n	80008ec <HAL_RCC_OscConfig+0xa0>
 800090e:	e016      	b.n	800093e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000910:	f7ff fcea 	bl	80002e8 <HAL_GetTick>
 8000914:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000916:	e00a      	b.n	800092e <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000918:	f7ff fce6 	bl	80002e8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	f241 3288 	movw	r2, #5000	; 0x1388
 8000926:	4293      	cmp	r3, r2
 8000928:	d901      	bls.n	800092e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800092a:	2303      	movs	r3, #3
 800092c:	e1cb      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800092e:	4b77      	ldr	r3, [pc, #476]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1ee      	bne.n	8000918 <HAL_RCC_OscConfig+0xcc>
 800093a:	e000      	b.n	800093e <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d077      	beq.n	8000a3a <HAL_RCC_OscConfig+0x1ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800094a:	4b70      	ldr	r3, [pc, #448]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f003 030c 	and.w	r3, r3, #12
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00b      	beq.n	800096e <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000956:	4b6d      	ldr	r3, [pc, #436]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800095e:	2b08      	cmp	r3, #8
 8000960:	d126      	bne.n	80009b0 <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000962:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d120      	bne.n	80009b0 <HAL_RCC_OscConfig+0x164>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096e:	4b67      	ldr	r3, [pc, #412]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <HAL_RCC_OscConfig+0x13a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d001      	beq.n	8000986 <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e19f      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000986:	4861      	ldr	r0, [pc, #388]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000988:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6919      	ldr	r1, [r3, #16]
 8000994:	23f8      	movs	r3, #248	; 0xf8
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099a:	fa93 f3a3 	rbit	r3, r3
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	fab3 f383 	clz	r3, r3
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ae:	e044      	b.n	8000a3a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d02a      	beq.n	8000a0e <HAL_RCC_OscConfig+0x1c2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_RCC_OscConfig+0x2c8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009be:	f7ff fc93 	bl	80002e8 <HAL_GetTick>
 80009c2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c4:	e008      	b.n	80009d8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c6:	f7ff fc8f 	bl	80002e8 <HAL_GetTick>
 80009ca:	4602      	mov	r2, r0
 80009cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b64      	cmp	r3, #100	; 0x64
 80009d2:	d901      	bls.n	80009d8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80009d4:	2303      	movs	r3, #3
 80009d6:	e176      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f0      	beq.n	80009c6 <HAL_RCC_OscConfig+0x17a>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e4:	4849      	ldr	r0, [pc, #292]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6919      	ldr	r1, [r3, #16]
 80009f2:	23f8      	movs	r3, #248	; 0xf8
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	fa93 f3a3 	rbit	r3, r3
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	fab3 f383 	clz	r3, r3
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	6003      	str	r3, [r0, #0]
 8000a0c:	e015      	b.n	8000a3a <HAL_RCC_OscConfig+0x1ee>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <HAL_RCC_OscConfig+0x2c8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a14:	f7ff fc68 	bl	80002e8 <HAL_GetTick>
 8000a18:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1a:	e008      	b.n	8000a2e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1c:	f7ff fc64 	bl	80002e8 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	2b64      	cmp	r3, #100	; 0x64
 8000a28:	d901      	bls.n	8000a2e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e14b      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f0      	bne.n	8000a1c <HAL_RCC_OscConfig+0x1d0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d030      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d016      	beq.n	8000a7c <HAL_RCC_OscConfig+0x230>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_RCC_OscConfig+0x2cc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a54:	f7ff fc48 	bl	80002e8 <HAL_GetTick>
 8000a58:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	e008      	b.n	8000a6e <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fc44 	bl	80002e8 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b64      	cmp	r3, #100	; 0x64
 8000a68:	d901      	bls.n	8000a6e <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e12b      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f0      	beq.n	8000a5c <HAL_RCC_OscConfig+0x210>
 8000a7a:	e015      	b.n	8000aa8 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_RCC_OscConfig+0x2cc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a82:	f7ff fc31 	bl	80002e8 <HAL_GetTick>
 8000a86:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fc2d 	bl	80002e8 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b64      	cmp	r3, #100	; 0x64
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e114      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f0      	bne.n	8000a8a <HAL_RCC_OscConfig+0x23e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d07c      	beq.n	8000bae <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_RCC_OscConfig+0x2c0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <HAL_RCC_OscConfig+0x2d0>)
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_RCC_OscConfig+0x2d0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000ad8:	f7ff fc06 	bl	80002e8 <HAL_GetTick>
 8000adc:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x2a6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ae0:	f7ff fc02 	bl	80002e8 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x2a6>
      {
        return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e0e9      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_RCC_OscConfig+0x2d0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f0      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x294>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_RCC_OscConfig+0x2d4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000b04:	f7ff fbf0 	bl	80002e8 <HAL_GetTick>
 8000b08:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b0a:	e016      	b.n	8000b3a <HAL_RCC_OscConfig+0x2ee>
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40023802 	.word	0x40023802
 8000b14:	42470000 	.word	0x42470000
 8000b18:	42470e80 	.word	0x42470e80
 8000b1c:	40007000 	.word	0x40007000
 8000b20:	40023870 	.word	0x40023870
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f7ff fbe0 	bl	80002e8 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e0c5      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b3a:	4b65      	ldr	r3, [pc, #404]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1ee      	bne.n	8000b24 <HAL_RCC_OscConfig+0x2d8>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b46:	4a63      	ldr	r2, [pc, #396]	; (8000cd4 <HAL_RCC_OscConfig+0x488>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	7013      	strb	r3, [r2, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d015      	beq.n	8000b84 <HAL_RCC_OscConfig+0x338>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b58:	f7ff fbc6 	bl	80002e8 <HAL_GetTick>
 8000b5c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b5e:	e00a      	b.n	8000b76 <HAL_RCC_OscConfig+0x32a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b60:	f7ff fbc2 	bl	80002e8 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x32a>
        {
          return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e0a7      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0ee      	beq.n	8000b60 <HAL_RCC_OscConfig+0x314>
 8000b82:	e014      	b.n	8000bae <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b84:	f7ff fbb0 	bl	80002e8 <HAL_GetTick>
 8000b88:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b8a:	e00a      	b.n	8000ba2 <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fbac 	bl	80002e8 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e091      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba2:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1ee      	bne.n	8000b8c <HAL_RCC_OscConfig+0x340>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8086 	beq.w	8000cc4 <HAL_RCC_OscConfig+0x478>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bb8:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d07d      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x474>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d162      	bne.n	8000c92 <HAL_RCC_OscConfig+0x446>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <HAL_RCC_OscConfig+0x48c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fb89 	bl	80002e8 <HAL_GetTick>
 8000bd6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bda:	f7ff fb85 	bl	80002e8 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b64      	cmp	r3, #100	; 0x64
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e06c      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f0      	bne.n	8000bda <HAL_RCC_OscConfig+0x38e>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bf8:	4835      	ldr	r0, [pc, #212]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69da      	ldr	r2, [r3, #28]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	fab3 f383 	clz	r3, r3
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	085b      	lsrs	r3, r3, #1
 8000c28:	1e59      	subs	r1, r3, #1
 8000c2a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa93 f3a3 	rbit	r3, r3
 8000c36:	617b      	str	r3, [r7, #20]
  return(result);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fab3 f383 	clz	r3, r3
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c48:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	61fb      	str	r3, [r7, #28]
  return(result);
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fab3 f383 	clz	r3, r3
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_RCC_OscConfig+0x48c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fb3d 	bl	80002e8 <HAL_GetTick>
 8000c6e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c70:	e008      	b.n	8000c84 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c72:	f7ff fb39 	bl	80002e8 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b64      	cmp	r3, #100	; 0x64
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e020      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f0      	beq.n	8000c72 <HAL_RCC_OscConfig+0x426>
 8000c90:	e018      	b.n	8000cc4 <HAL_RCC_OscConfig+0x478>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_RCC_OscConfig+0x48c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fb26 	bl	80002e8 <HAL_GetTick>
 8000c9c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca0:	f7ff fb22 	bl	80002e8 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e009      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_RCC_OscConfig+0x484>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x454>
 8000cbe:	e001      	b.n	8000cc4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x47a>
    }
  }
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40023870 	.word	0x40023870
 8000cd8:	42470060 	.word	0x42470060

08000cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cea:	4ba0      	ldr	r3, [pc, #640]	; (8000f6c <HAL_RCC_ClockConfig+0x290>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 020f 	and.w	r2, r3, #15
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f080 80a6 	bcs.w	8000e46 <HAL_RCC_ClockConfig+0x16a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	4b9c      	ldr	r3, [pc, #624]	; (8000f6c <HAL_RCC_ClockConfig+0x290>)
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d02:	4b9a      	ldr	r3, [pc, #616]	; (8000f6c <HAL_RCC_ClockConfig+0x290>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 020f 	and.w	r2, r3, #15
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d001      	beq.n	8000d14 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e165      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d20:	4993      	ldr	r1, [pc, #588]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d22:	4b93      	ldr	r3, [pc, #588]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 812d 	beq.w	8000f9a <HAL_RCC_ClockConfig+0x2be>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d107      	bne.n	8000d58 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d48:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d119      	bne.n	8000d88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e143      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d003      	beq.n	8000d68 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d107      	bne.n	8000d78 <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d68:	4b81      	ldr	r3, [pc, #516]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e133      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	4b7d      	ldr	r3, [pc, #500]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e12b      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d88:	4979      	ldr	r1, [pc, #484]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d8a:	4b79      	ldr	r3, [pc, #484]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f023 0203 	bic.w	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9a:	f7ff faa5 	bl	80002e8 <HAL_GetTick>
 8000d9e:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d112      	bne.n	8000dce <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000daa:	f7ff fa9d 	bl	80002e8 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e10f      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc0:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d1ee      	bne.n	8000daa <HAL_RCC_ClockConfig+0xce>
 8000dcc:	e0e5      	b.n	8000f9a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d112      	bne.n	8000dfc <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd6:	e00a      	b.n	8000dee <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd8:	f7ff fa86 	bl	80002e8 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e0f8      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dee:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d1ee      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xfc>
 8000dfa:	e0ce      	b.n	8000f9a <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d119      	bne.n	8000e38 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e06:	f7ff fa6f 	bl	80002e8 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0e1      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000e1c:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	e7f1      	b.n	8000e06 <HAL_RCC_ClockConfig+0x12a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e22:	f7ff fa61 	bl	80002e8 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e0d3      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ee      	bne.n	8000e22 <HAL_RCC_ClockConfig+0x146>
 8000e44:	e0a9      	b.n	8000f9a <HAL_RCC_ClockConfig+0x2be>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d008      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x188>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e52:	4947      	ldr	r1, [pc, #284]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 8087 	beq.w	8000f80 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d119      	bne.n	8000eba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0aa      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d003      	beq.n	8000e9a <HAL_RCC_ClockConfig+0x1be>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d107      	bne.n	8000eaa <HAL_RCC_ClockConfig+0x1ce>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e09a      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e092      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eba:	492d      	ldr	r1, [pc, #180]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 0203 	bic.w	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fa0c 	bl	80002e8 <HAL_GetTick>
 8000ed0:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d112      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x224>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eda:	e00a      	b.n	8000ef2 <HAL_RCC_ClockConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000edc:	f7ff fa04 	bl	80002e8 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e076      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d1ee      	bne.n	8000edc <HAL_RCC_ClockConfig+0x200>
 8000efe:	e03f      	b.n	8000f80 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d112      	bne.n	8000f2e <HAL_RCC_ClockConfig+0x252>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_ClockConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f7ff f9ed 	bl	80002e8 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_ClockConfig+0x244>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e05f      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d1ee      	bne.n	8000f0a <HAL_RCC_ClockConfig+0x22e>
 8000f2c:	e028      	b.n	8000f80 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d11e      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x298>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f36:	e00a      	b.n	8000f4e <HAL_RCC_ClockConfig+0x272>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f38:	f7ff f9d6 	bl	80002e8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_ClockConfig+0x272>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e048      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_RCC_ClockConfig+0x294>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	e7f1      	b.n	8000f38 <HAL_RCC_ClockConfig+0x25c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f54:	f7ff f9c8 	bl	80002e8 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d906      	bls.n	8000f74 <HAL_RCC_ClockConfig+0x298>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e03a      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00
 8000f70:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_RCC_ClockConfig+0x30c>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e9      	bne.n	8000f54 <HAL_RCC_ClockConfig+0x278>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_RCC_ClockConfig+0x310>)
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_RCC_ClockConfig+0x310>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 020f 	and.w	r2, r3, #15
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d001      	beq.n	8000f9a <HAL_RCC_ClockConfig+0x2be>
    {
      return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e022      	b.n	8000fe0 <HAL_RCC_ClockConfig+0x304>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x2dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fa6:	4910      	ldr	r1, [pc, #64]	; (8000fe8 <HAL_RCC_ClockConfig+0x30c>)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_RCC_ClockConfig+0x30c>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d009      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <HAL_RCC_ClockConfig+0x30c>)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_RCC_ClockConfig+0x30c>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fd8:	200f      	movs	r0, #15
 8000fda:	f7ff f95b 	bl	8000294 <HAL_InitTick>
  
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b08b      	sub	sp, #44	; 0x2c
 8000ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b04      	cmp	r3, #4
 8001010:	d006      	beq.n	8001020 <HAL_RCC_GetSysClockFreq+0x30>
 8001012:	2b08      	cmp	r3, #8
 8001014:	d007      	beq.n	8001026 <HAL_RCC_GetSysClockFreq+0x36>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d158      	bne.n	80010cc <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800101c:	623b      	str	r3, [r7, #32]
       break;
 800101e:	e058      	b.n	80010d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001022:	623b      	str	r3, [r7, #32]
      break;
 8001024:	e055      	b.n	80010d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800102e:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d017      	beq.n	800106c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800103c:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fbb2 f2f3 	udiv	r2, r2, r3
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800104c:	400b      	ands	r3, r1
 800104e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001052:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	6979      	ldr	r1, [r7, #20]
 8001056:	fa91 f1a1 	rbit	r1, r1
 800105a:	6139      	str	r1, [r7, #16]
  return(result);
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	fab1 f181 	clz	r1, r1
 8001062:	40cb      	lsrs	r3, r1
 8001064:	fb03 f302 	mul.w	r3, r3, r2
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
 800106a:	e016      	b.n	800109a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fbb2 f2f3 	udiv	r2, r2, r3
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800107c:	400b      	ands	r3, r1
 800107e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001082:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	fa91 f1a1 	rbit	r1, r1
 800108a:	60b9      	str	r1, [r7, #8]
  return(result);
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	fab1 f181 	clz	r1, r1
 8001092:	40cb      	lsrs	r3, r1
 8001094:	fb03 f302 	mul.w	r3, r3, r2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010a2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010a6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	603b      	str	r3, [r7, #0]
  return(result);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	623b      	str	r3, [r7, #32]
      break;
 80010ca:	e002      	b.n	80010d2 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80010ce:	623b      	str	r3, [r7, #32]
      break;
 80010d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010d2:	6a3b      	ldr	r3, [r7, #32]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	372c      	adds	r7, #44	; 0x2c
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800
 80010e4:	00f42400 	.word	0x00f42400
 80010e8:	007a1200 	.word	0x007a1200

080010ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80010f2:	f7ff ff7d 	bl	8000ff0 <HAL_RCC_GetSysClockFreq>
 80010f6:	4601      	mov	r1, r0
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_RCC_GetHCLKFreq+0x44>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001100:	23f0      	movs	r3, #240	; 0xf0
 8001102:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	603b      	str	r3, [r7, #0]
  return(result);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_RCC_GetHCLKFreq+0x48>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	fa21 f303 	lsr.w	r3, r1, r3
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001120:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001124:	681b      	ldr	r3, [r3, #0]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	080013fc 	.word	0x080013fc
 8001138:	20000000 	.word	0x20000000

0800113c <Reset_Handler_Boot>:

    .section  .text.Reset_Handler_Boot
  .weak  Reset_Handler_Boot
  .type  Reset_Handler_Boot, %function
Reset_Handler_Boot:
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001140:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
  ldr  r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800115c:	f842 3b04 	str.w	r3, [r2], #4

08001160 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001166:	f7ff f835 	bl	80001d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f000 f917 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 800116e:	f000 f80f 	bl	8001190 <boot_main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8001178:	08001414 	.word	0x08001414
  ldr  r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001180:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001184:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001188:	20000028 	.word	0x20000028

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <boot_main>:
#define ADDR_APPLICATION_PROG_START	( ADDR_APPLICATION + 4 )

typedef void (*pFunction)(void);

int boot_main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
	pFunction 	appEntry;
	uint32_t	appStack;

	HAL_Init();
 8001196:	f7ff f853 	bl	8000240 <HAL_Init>

	SystemClock_Config();
 800119a:	f000 f829 	bl	80011f0 <SystemClock_Config>

	BSP_LED_Init(LED2);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f8b0 	bl	8001304 <BSP_LED_Init>

	// Wait sometime
	int i = 3;
 80011a4:	2303      	movs	r3, #3
 80011a6:	60fb      	str	r3, [r7, #12]
	while (i--)
 80011a8:	e006      	b.n	80011b8 <boot_main+0x28>
	{
		BSP_LED_Toggle(LED2);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f8e2 	bl	8001374 <BSP_LED_Toggle>
		HAL_Delay(500);
 80011b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b4:	f7ff f8a4 	bl	8000300 <HAL_Delay>
	while (i--)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	60fa      	str	r2, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f3      	bne.n	80011aa <boot_main+0x1a>
	}

	appStack = (uint32_t) *((__IO uint32_t*)ADDR_APPLICATION);
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <boot_main+0x54>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60bb      	str	r3, [r7, #8]
	appEntry = (pFunction) *(__IO uint32_t*)(ADDR_APPLICATION_PROG_START);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <boot_main+0x58>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	607b      	str	r3, [r7, #4]

	SCB->VTOR = ADDR_APPLICATION;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <boot_main+0x5c>)
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <boot_main+0x54>)
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	603b      	str	r3, [r7, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f383 8808 	msr	MSP, r3

	__set_MSP(appStack);

	// To the application's main(); Bye bye.
	appEntry();
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4798      	blx	r3

	while(1);
 80011e2:	e7fe      	b.n	80011e2 <boot_main+0x52>
 80011e4:	0800c000 	.word	0x0800c000
 80011e8:	0800c004 	.word	0x0800c004
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2 
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <SystemClock_Config+0xa8>)
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <SystemClock_Config+0xa8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <SystemClock_Config+0xa8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120e:	4a23      	ldr	r2, [pc, #140]	; (800129c <SystemClock_Config+0xac>)
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <SystemClock_Config+0xac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <SystemClock_Config+0xac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8001232:	2310      	movs	r3, #16
 8001234:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 800123e:	2310      	movs	r3, #16
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001242:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001248:	2304      	movs	r3, #4
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800124c:	2307      	movs	r3, #7
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff faf9 	bl	800084c <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001260:	f000 f81e 	bl	80012a0 <Error_Handler>
  }
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001264:	230f      	movs	r3, #15
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8001276:	2300      	movs	r3, #0
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800127e:	2102      	movs	r1, #2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd2b 	bl	8000cdc <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800128c:	f000 f808 	bl	80012a0 <Error_Handler>
  }  
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x4>

080012a6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <HardFault_Handler+0x4>

080012ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012be:	e7fe      	b.n	80012be <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <BusFault_Handler+0x4>

080012c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <UsageFault_Handler+0x4>

080012cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80012fa:	f7fe ffe7 	bl	80002cc <HAL_IncTick>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <BSP_LED_Init+0x28>
 8001314:	4a15      	ldr	r2, [pc, #84]	; (800136c <BSP_LED_Init+0x68>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <BSP_LED_Init+0x68>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <BSP_LED_Init+0x68>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800132c:	2320      	movs	r3, #32
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <BSP_LED_Init+0x6c>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8d2 	bl	80004f4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a07      	ldr	r2, [pc, #28]	; (8001370 <BSP_LED_Init+0x6c>)
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	2120      	movs	r1, #32
 800135a:	2200      	movs	r2, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fa49 	bl	80007f4 <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	20000004 	.word	0x20000004

08001374 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <BSP_LED_Toggle+0x24>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	2220      	movs	r2, #32
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa4b 	bl	8000826 <HAL_GPIO_TogglePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000004 	.word	0x20000004

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4e0d      	ldr	r6, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1ba4      	subs	r4, r4, r6
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2500      	movs	r5, #0
 80013a8:	42a5      	cmp	r5, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4e0b      	ldr	r6, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 f818 	bl	80013e4 <_init>
 80013b4:	1ba4      	subs	r4, r4, r6
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2500      	movs	r5, #0
 80013ba:	42a5      	cmp	r5, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c4:	4798      	blx	r3
 80013c6:	3501      	adds	r5, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ce:	4798      	blx	r3
 80013d0:	3501      	adds	r5, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	0800140c 	.word	0x0800140c
 80013d8:	0800140c 	.word	0x0800140c
 80013dc:	0800140c 	.word	0x0800140c
 80013e0:	08001410 	.word	0x08001410

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
