
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000648  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000099  0080008a  0080008a  00000706  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000032e  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b36  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000561  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008ca  00000000  00000000  000022be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003da  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001a1  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_1>
   8:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 32       	cpi	r26, 0x23	; 35
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	unsigned short	usToggle		= 0x0000;
	unsigned short	usCntRxHandle 	= 0;
	unsigned short	result;
	char			cTest;

	InitCPU();
  92:	0e 94 5f 00 	call	0xbe	; 0xbe <InitCPU>
	InitUART();
  96:	0e 94 77 00 	call	0xee	; 0xee <InitUART>
	InitRingBuff(&g_SendBuff);
  9a:	8a e9       	ldi	r24, 0x9A	; 154
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 c0 00 	call	0x180	; 0x180 <InitRingBuff>

	while(1)
	{	
		SsNetMainTask();
  a2:	0e 94 ab 02 	call	0x556	; 0x556 <SsNetMainTask>
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <main+0x10>

000000a8 <InitCMT0>:
	return;
}

void InitCMT0()
{
	TCCR0	= 	0x00;							// Stop Timer
  a8:	13 be       	out	0x33, r1	; 51
	TCCR0 	= 	0x04; 							// Clear Timer on Compare Match Mode
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	83 bf       	out	0x33, r24	; 51
	TCCR0 	|= 	0x05;							// Prescaler = (Clk_io / 1024)
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	83 bf       	out	0x33, r24	; 51
	OCR0	=	0x10;							// 
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	8c bf       	out	0x3c, r24	; 60
	TIMSK 	= 0x01;								// Interrupt enable
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 bf       	out	0x39, r24	; 57
}
  bc:	08 95       	ret

000000be <InitCPU>:
RingBuff g_RecvBuff;

void InitCPU()
{
	// Port setting
    DDRA = PORTA_ASSIGNED_LED;				// PA0, PA1, PA2, PA3을 output으로 설정
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x02;							// TXD를 출력, RXD를 입력으로 설정							
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	81 bb       	out	0x11, r24	; 17
	
	sei();									// 전역인터럽트 허용
  ca:	78 94       	sei

	InitCMT0();
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <InitCMT0>

	MCUCR	= 0x0A;							// INT0, INT1 Falling edge 
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	85 bf       	out	0x35, r24	; 53
	GICR	= 0xC0;							// INT0, INT1 Enable
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	8b bf       	out	0x3b, r24	; 59

	return;
}
  d8:	08 95       	ret

000000da <InitCMT2>:
	TIMSK 	= 0x01;								// Interrupt enable
}

void InitCMT2()
{
	TCCR2 = 0x40;							// Phase Correct PWM 모드, 타이머정지
  da:	80 e4       	ldi	r24, 0x40	; 64
  dc:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= 0x20;							// Compare Match 출력모드 설정
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= 0x03;							// 분주비 셋팅(64)	
  e4:	85 b5       	in	r24, 0x25	; 37
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0;
  ea:	13 bc       	out	0x23, r1	; 35
//	TIMSK |= 0x80;							// 인터럽트셋팅 -> ※이거하면 정상적으로 동작하지 않는다. 왜 그런가?
}
  ec:	08 95       	ret

000000ee <InitUART>:
{
	unsigned short ubrr;	
	ubrr = (F_CPU / 16) / BAUD_RATE - 1;	// Set Baud Rate	
//	UBRRH = (unsigned char)(ubrr >> 8);
//	UBRRL = (unsigned char)(ubrr);
	UBRRH = 0;
  ee:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;							// Baud Rate 9600 under 16Mhz
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	89 b9       	out	0x09, r24	; 9

	UCSRA = 0x00;
  f4:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0xD8;							// Bit4 : Transmitter Enable
  f6:	88 ed       	ldi	r24, 0xD8	; 216
  f8:	8a b9       	out	0x0a, r24	; 10
											// Bit3 : Receiver Enable
											// Bit7 : RX Complete Interrupt Enable
											// Bit6 : TX Complete Interrupt Enable	
	UCSRC = 0xA6;							// Even Parity, 8bit Data
  fa:	86 ea       	ldi	r24, 0xA6	; 166
  fc:	80 bd       	out	0x20, r24	; 32
}
  fe:	08 95       	ret

00000100 <SendUART>:

unsigned short SendUART(char* cData)
{
	unsigned short time = 0;
	while(!(UCSRA & 0x20))					// Check if buffer register is empty
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <SendUART>
		{
		//	return 1;
		}
	}

	UDR = *cData;
 104:	fc 01       	movw	r30, r24
 106:	80 81       	ld	r24, Z
 108:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <RecvUART>:

unsigned short RecvUART(char* cData)
{
 110:	fc 01       	movw	r30, r24
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
	while(!(UCSRA & 0x80))					// Check if there is a new rx packet.
	{
		time++;
		if(time > ERR_UART_RECV_TIME_OUT)
		{
			*cData = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
}

unsigned short RecvUART(char* cData)
{
	unsigned short time = 0;
	while(!(UCSRA & 0x80))					// Check if there is a new rx packet.
 118:	07 c0       	rjmp	.+14     	; 0x128 <RecvUART+0x18>
	{
		time++;
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(time > ERR_UART_RECV_TIME_OUT)
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	21 31       	cpi	r18, 0x11	; 17
 122:	39 07       	cpc	r19, r25
 124:	08 f0       	brcs	.+2      	; 0x128 <RecvUART+0x18>
		{
			*cData = 0xFF;
 126:	80 83       	st	Z, r24
}

unsigned short RecvUART(char* cData)
{
	unsigned short time = 0;
	while(!(UCSRA & 0x80))					// Check if there is a new rx packet.
 128:	5f 9b       	sbis	0x0b, 7	; 11
 12a:	f7 cf       	rjmp	.-18     	; 0x11a <RecvUART+0xa>
			*cData = 0xFF;
		//	return 1;
		}
	}
	
	*cData = UDR;
 12c:	8c b1       	in	r24, 0x0c	; 12
 12e:	80 83       	st	Z, r24

	return 0;
}
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret

00000136 <CtrlPortALED>:

unsigned short CtrlPortALED(unsigned char state, unsigned char numLed)
{
	if(!(PORTA_ASSIGNED_LED & numLed))
 136:	26 2f       	mov	r18, r22
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	30 70       	andi	r19, 0x00	; 0
 13e:	21 15       	cp	r18, r1
 140:	31 05       	cpc	r19, r1
 142:	19 f4       	brne	.+6      	; 0x14a <CtrlPortALED+0x14>
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	0e c0       	rjmp	.+28     	; 0x166 <CtrlPortALED+0x30>
		return 1;
	
	if(state == ON)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	21 f4       	brne	.+8      	; 0x156 <CtrlPortALED+0x20>
		PORTA |= numLed;
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	86 2b       	or	r24, r22
 152:	8b bb       	out	0x1b, r24	; 27
 154:	06 c0       	rjmp	.+12     	; 0x162 <CtrlPortALED+0x2c>
	else if(state == OFF)
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	21 f4       	brne	.+8      	; 0x162 <CtrlPortALED+0x2c>
		PORTA &= ~(numLed);
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	60 95       	com	r22
 15e:	68 23       	and	r22, r24
 160:	6b bb       	out	0x1b, r22	; 27
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
 166:	c9 01       	movw	r24, r18
 168:	08 95       	ret

0000016a <ToggleLED>:

void ToggleLED(unsigned char numLed)
{
	if(!(PORTA_ASSIGNED_LED & numLed))
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	2f 70       	andi	r18, 0x0F	; 15
 170:	30 70       	andi	r19, 0x00	; 0
 172:	21 15       	cp	r18, r1
 174:	31 05       	cpc	r19, r1
 176:	19 f0       	breq	.+6      	; 0x17e <ToggleLED+0x14>
		return 1;

	PORTA ^= numLed;
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	98 27       	eor	r25, r24
 17c:	9b bb       	out	0x1b, r25	; 27
 17e:	08 95       	ret

00000180 <InitRingBuff>:
}


void InitRingBuff(RingBuff* buff)
{
 180:	fc 01       	movw	r30, r24
	(*buff).head	= 0;
 182:	10 82       	st	Z, r1
	(*buff).tail	= 0;
 184:	11 82       	std	Z+1, r1	; 0x01
	(*buff).num		= 0;
 186:	12 82       	std	Z+2, r1	; 0x02
	(*buff).full	= 0;
 188:	13 82       	std	Z+3, r1	; 0x03
}
 18a:	08 95       	ret

0000018c <PushRingBuff>:

void PushRingBuff(RingBuff* buff, unsigned char data)
{
 18c:	fc 01       	movw	r30, r24
	(*buff).buffer[(*buff).tail] = data;
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	df 01       	movw	r26, r30
 194:	a8 0f       	add	r26, r24
 196:	b9 1f       	adc	r27, r25
 198:	14 96       	adiw	r26, 0x04	; 4
 19a:	6c 93       	st	X, r22
 19c:	14 97       	sbiw	r26, 0x04	; 4
	(*buff).tail = ((*buff).tail + 1) % SIZE_RING_BUFF;
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	8f 73       	andi	r24, 0x3F	; 63
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	81 83       	std	Z+1, r24	; 0x01
	
	if(!(*buff).full)
 1a6:	83 81       	ldd	r24, Z+3	; 0x03
 1a8:	88 23       	and	r24, r24
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <PushRingBuff+0x26>
		(*buff).num++;
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	82 83       	std	Z+2, r24	; 0x02

	if((*buff).tail == (*buff).head)
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	80 81       	ld	r24, Z
 1b6:	98 17       	cp	r25, r24
 1b8:	11 f4       	brne	.+4      	; 0x1be <PushRingBuff+0x32>
	{
		(*buff).full = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	83 83       	std	Z+3, r24	; 0x03
 1be:	08 95       	ret

000001c0 <PopRingBuff>:
	}	
}

unsigned short PopRingBuff(RingBuff* buff, unsigned char* data)
{
 1c0:	fc 01       	movw	r30, r24
	if((*buff).num)
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	88 23       	and	r24, r24
 1c6:	19 f4       	brne	.+6      	; 0x1ce <PopRingBuff+0xe>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <PopRingBuff+0x50>
	{	
		if((*buff).full)
 1ce:	83 81       	ldd	r24, Z+3	; 0x03
 1d0:	88 23       	and	r24, r24
 1d2:	21 f0       	breq	.+8      	; 0x1dc <PopRingBuff+0x1c>
		{
			(*buff).head 	= (*buff).tail;
			(*buff).head 	= (*buff).head % SIZE_RING_BUFF;			
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	8f 73       	andi	r24, 0x3F	; 63
 1d8:	80 83       	st	Z, r24
			(*buff).full 	= 0;	
 1da:	13 82       	std	Z+3, r1	; 0x03
		}

		*data = (*buff).buffer[(*buff).head];
 1dc:	a0 81       	ld	r26, Z
 1de:	cf 01       	movw	r24, r30
 1e0:	8a 0f       	add	r24, r26
 1e2:	91 1d       	adc	r25, r1
 1e4:	dc 01       	movw	r26, r24
 1e6:	14 96       	adiw	r26, 0x04	; 4
 1e8:	8c 91       	ld	r24, X
 1ea:	db 01       	movw	r26, r22
 1ec:	8c 93       	st	X, r24

		(*buff).buffer[(*buff).head] = 0x00;
 1ee:	80 81       	ld	r24, Z
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	df 01       	movw	r26, r30
 1f4:	a8 0f       	add	r26, r24
 1f6:	b9 1f       	adc	r27, r25
 1f8:	14 96       	adiw	r26, 0x04	; 4
 1fa:	1c 92       	st	X, r1
 1fc:	14 97       	sbiw	r26, 0x04	; 4
		(*buff).head = ((*buff).head + 1) % SIZE_RING_BUFF;
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	8f 73       	andi	r24, 0x3F	; 63
 202:	90 70       	andi	r25, 0x00	; 0
 204:	80 83       	st	Z, r24
		(*buff).num--;
 206:	82 81       	ldd	r24, Z+2	; 0x02
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	82 83       	std	Z+2, r24	; 0x02
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
	else
	{
		return 0;
	}

}
 210:	c9 01       	movw	r24, r18
 212:	08 95       	ret

00000214 <__vector_13>:
	if(UCSRA & 0x08)				// If data overrun	
		CtrlPortALED(ON,LED4);		
}

ISR(USART_TXC_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
/*	g_usUARTTxcAck = TRUE;
	CtrlPortALED(OFF,LED2);			// Main loop에서는 UDSRA의 TXC가 check가 확인이 안된다. 
	*/
}
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_4>:
		SsNetSetNextTask(TASK_RX_PREP);
	}
}

ISR(TIMER2_OVF_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
	
}	
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_9>:
	CtrlPortALED(OFF,LED2);			// Main loop에서는 UDSRA의 TXC가 check가 확인이 안된다. 
	*/
}

ISR(TIMER0_OVF_vect)	
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	ToggleLED(LED2);
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 b5 00 	call	0x16a	; 0x16a <ToggleLED>

//	SendUART("A");		// Test

	if(SsNetGetRxTimeout() == SET)
 264:	0e 94 a5 02 	call	0x54a	; 0x54a <SsNetGetRxTimeout>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	01 f1       	breq	.+64     	; 0x2ac <__vector_9+0x70>
		return;

	g_usPacketTick++;
 26c:	80 91 92 00 	lds	r24, 0x0092
 270:	90 91 93 00 	lds	r25, 0x0093
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 93 00 	sts	0x0093, r25
 27a:	80 93 92 00 	sts	0x0092, r24
	g_usMsgTick++;
 27e:	20 91 94 00 	lds	r18, 0x0094
 282:	30 91 95 00 	lds	r19, 0x0095
 286:	2f 5f       	subi	r18, 0xFF	; 255
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	30 93 95 00 	sts	0x0095, r19
 28e:	20 93 94 00 	sts	0x0094, r18

	if(g_usPacketTick > g_usPacketTimeLimit)
 292:	20 91 88 00 	lds	r18, 0x0088
 296:	30 91 89 00 	lds	r19, 0x0089
 29a:	28 17       	cp	r18, r24
 29c:	39 07       	cpc	r19, r25
 29e:	30 f4       	brcc	.+12     	; 0x2ac <__vector_9+0x70>
	{
		SsNetCtrlRxTimeout(SET);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 a2 02 	call	0x544	; 0x544 <SsNetCtrlRxTimeout>
		SsNetSetNextTask(TASK_RX_PREP);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 a8 02 	call	0x550	; 0x550 <SsNetSetNextTask>
	}
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_11>:
	_delay_ms(DEBOUNCING);

}

ISR(USART_RXC_vect)
{		
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	0f 92       	push	r0
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	char cChar;
	
	g_usPacketTick = 0;
 2fa:	10 92 93 00 	sts	0x0093, r1
 2fe:	10 92 92 00 	sts	0x0092, r1
	SsNetCtrlRxTimeout(RESET);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 a2 02 	call	0x544	; 0x544 <SsNetCtrlRxTimeout>

	if(!RecvUART(&cChar))
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 88 00 	call	0x110	; 0x110 <RecvUART>
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	29 f4       	brne	.+10     	; 0x31e <__vector_11+0x50>
		PushRingBuff(&g_SendBuff,cChar);
 314:	8a e9       	ldi	r24, 0x9A	; 154
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	69 81       	ldd	r22, Y+1	; 0x01
 31a:	0e 94 c6 00 	call	0x18c	; 0x18c <PushRingBuff>
		
	if(UCSRA & 0x10)				// If frame error, 
 31e:	5c 9b       	sbis	0x0b, 4	; 11
 320:	04 c0       	rjmp	.+8      	; 0x32a <__vector_11+0x5c>
		CtrlPortALED(ON,LED3);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	0e 94 9b 00 	call	0x136	; 0x136 <CtrlPortALED>

	if(UCSRA & 0x08)				// If data overrun	
 32a:	5b 9b       	sbis	0x0b, 3	; 11
 32c:	04 c0       	rjmp	.+8      	; 0x336 <__vector_11+0x68>
		CtrlPortALED(ON,LED4);		
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	68 e0       	ldi	r22, 0x08	; 8
 332:	0e 94 9b 00 	call	0x136	; 0x136 <CtrlPortALED>
}
 336:	0f 90       	pop	r0
 338:	cf 91       	pop	r28
 33a:	df 91       	pop	r29
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__vector_2>:

	_delay_ms(DEBOUNCING);
}

ISR(INT1_vect)
{
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
 36c:	87 ee       	ldi	r24, 0xE7	; 231
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <__vector_2+0x12>
 374:	00 c0       	rjmp	.+0      	; 0x376 <__vector_2+0x18>
 376:	00 00       	nop
	_delay_ms(DEBOUNCING);

	g_usIRQ1Ack = TRUE;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 8d 00 	sts	0x008D, r25
 380:	80 93 8c 00 	sts	0x008C, r24

	while(~PIND & 0x08);
 384:	83 9b       	sbis	0x10, 3	; 16
 386:	fe cf       	rjmp	.-4      	; 0x384 <__vector_2+0x26>
 388:	87 ee       	ldi	r24, 0xE7	; 231
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <__vector_2+0x2e>
 390:	00 c0       	rjmp	.+0      	; 0x392 <__vector_2+0x34>
 392:	00 00       	nop

	_delay_ms(DEBOUNCING);

}
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_1>:
extern unsigned short	g_usPacketTimeLimit;

unsigned char g_testChar;

ISR(INT0_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	87 ee       	ldi	r24, 0xE7	; 231
 3b2:	93 e0       	ldi	r25, 0x03	; 3
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <__vector_1+0x12>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <__vector_1+0x18>
 3ba:	00 00       	nop
	_delay_ms(DEBOUNCING);

	g_usIRQ0Ack = TRUE;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 8b 00 	sts	0x008B, r25
 3c4:	80 93 8a 00 	sts	0x008A, r24

	while(~PIND & 0x04);
 3c8:	82 9b       	sbis	0x10, 2	; 16
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <__vector_1+0x26>
 3cc:	87 ee       	ldi	r24, 0xE7	; 231
 3ce:	93 e0       	ldi	r25, 0x03	; 3
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <__vector_1+0x2e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <__vector_1+0x34>
 3d6:	00 00       	nop

	_delay_ms(DEBOUNCING);
}
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <xbRecv>:
}

unsigned short xbRecv(char* str)
{
	return 0;
}
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	08 95       	ret

000003ec <xbSendData>:

unsigned short xbSendData(char cData)
{
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	0f 92       	push	r0
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	89 83       	std	Y+1, r24	; 0x01
	SendUART(&cData);
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 80 00 	call	0x100	; 0x100 <SendUART>
	return 0;
}
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0f 90       	pop	r0
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	08 95       	ret

0000040c <xbSend>:
#include "XbeeController.h"

extern struct RingBuff 	g_SendBuff;

unsigned short xbSend(char* str)
{
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	e8 2e       	mov	r14, r24
 416:	e7 01       	movw	r28, r14
 418:	7e 01       	movw	r14, r28
 41a:	f9 2e       	mov	r15, r25
 41c:	e7 01       	movw	r28, r14
	unsigned short i = 0;
	while((str[i] != '\0'))			/*(str[i] != '\r') &&*/
 41e:	02 c0       	rjmp	.+4      	; 0x424 <xbSend+0x18>
	{
		SendUART(&str[i]);
 420:	0e 94 80 00 	call	0x100	; 0x100 <SendUART>
 424:	ce 01       	movw	r24, r28
extern struct RingBuff 	g_SendBuff;

unsigned short xbSend(char* str)
{
	unsigned short i = 0;
	while((str[i] != '\0'))			/*(str[i] != '\r') &&*/
 426:	29 91       	ld	r18, Y+
 428:	22 23       	and	r18, r18
 42a:	d1 f7       	brne	.-12     	; 0x420 <xbSend+0x14>
	{
		SendUART(&str[i]);
		i++;
	}
	return 0;
}
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	08 95       	ret

0000043a <xbDecodeCmd>:
	SendUART(&cData);
	return 0;
}

unsigned short xbDecodeCmd(void)
{
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	1f 93       	push	r17
 440:	df 93       	push	r29
 442:	cf 93       	push	r28
 444:	0f 92       	push	r0
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
	char data[16];
	char cChar;
	unsigned short i = 0;
	unsigned short bCmdExist = 0;
	
	while(PopRingBuff(&g_SendBuff,&cChar))
 44a:	7e 01       	movw	r14, r28
 44c:	08 94       	sec
 44e:	e1 1c       	adc	r14, r1
 450:	f1 1c       	adc	r15, r1
 452:	03 c0       	rjmp	.+6      	; 0x45a <xbDecodeCmd+0x20>
	{		
		if(cChar == 'X')			
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 35       	cpi	r24, 0x58	; 88
 458:	41 f0       	breq	.+16     	; 0x46a <__stack+0xb>
	char data[16];
	char cChar;
	unsigned short i = 0;
	unsigned short bCmdExist = 0;
	
	while(PopRingBuff(&g_SendBuff,&cChar))
 45a:	8a e9       	ldi	r24, 0x9A	; 154
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	b7 01       	movw	r22, r14
 460:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PopRingBuff>
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	b1 f7       	brne	.-20     	; 0x454 <xbDecodeCmd+0x1a>
 468:	40 c0       	rjmp	.+128    	; 0x4ea <__stack+0x8b>
		}
	}

	if(bCmdExist)
	{
		while(PopRingBuff(&g_SendBuff,&cChar));
 46a:	7e 01       	movw	r14, r28
 46c:	08 94       	sec
 46e:	e1 1c       	adc	r14, r1
 470:	f1 1c       	adc	r15, r1
 472:	8a e9       	ldi	r24, 0x9A	; 154
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	b7 01       	movw	r22, r14
 478:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PopRingBuff>
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	c9 f7       	brne	.-14     	; 0x472 <__stack+0x13>
		cmd = cChar;
 480:	19 81       	ldd	r17, Y+1	; 0x01

		while(PopRingBuff(&g_SendBuff,&cChar));
 482:	7e 01       	movw	r14, r28
 484:	08 94       	sec
 486:	e1 1c       	adc	r14, r1
 488:	f1 1c       	adc	r15, r1
 48a:	8a e9       	ldi	r24, 0x9A	; 154
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	b7 01       	movw	r22, r14
 490:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PopRingBuff>
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	c9 f7       	brne	.-14     	; 0x48a <__stack+0x2b>
		length = cChar;	
 498:	e9 80       	ldd	r14, Y+1	; 0x01
	{
//		PopRingBuff(&g_SendBuff,&cChar);
//		data[count] = cChar;
	}

	switch(cmd)
 49a:	11 34       	cpi	r17, 0x41	; 65
 49c:	19 f0       	breq	.+6      	; 0x4a4 <__stack+0x45>
 49e:	12 34       	cpi	r17, 0x42	; 66
 4a0:	21 f5       	brne	.+72     	; 0x4ea <__stack+0x8b>
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <__stack+0x59>
	{
		case 'A':
		xbSend("\r");
 4a4:	82 e6       	ldi	r24, 0x62	; 98
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSend("Cmd:");
 4ac:	84 e6       	ldi	r24, 0x64	; 100
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSendData(cmd);
 4b4:	81 e4       	ldi	r24, 0x41	; 65
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <__stack+0x6b>
		xbSendData(length);
		xbSend("\r");			
		break;

		case 'B':
		xbSend("\r");
 4b8:	82 e6       	ldi	r24, 0x62	; 98
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSend("Cmd:");
 4c0:	84 e6       	ldi	r24, 0x64	; 100
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSendData(cmd);
 4c8:	82 e4       	ldi	r24, 0x42	; 66
 4ca:	0e 94 f6 01 	call	0x3ec	; 0x3ec <xbSendData>
		xbSend("\r");
 4ce:	82 e6       	ldi	r24, 0x62	; 98
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSend("Length:");
 4d6:	89 e6       	ldi	r24, 0x69	; 105
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSendData(length);
 4de:	8e 2d       	mov	r24, r14
 4e0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <xbSendData>
		xbSend("\r");			
 4e4:	82 e6       	ldi	r24, 0x62	; 98
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <__stack+0x97>
		break;

		default:
		xbSend("\r");
 4ea:	82 e6       	ldi	r24, 0x62	; 98
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		xbSend("Not defined Cmd\r");
 4f2:	81 e7       	ldi	r24, 0x71	; 113
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 06 02 	call	0x40c	; 0x40c <xbSend>
		break;
	}

}
 4fa:	0f 90       	pop	r0
 4fc:	cf 91       	pop	r28
 4fe:	df 91       	pop	r29
 500:	1f 91       	pop	r17
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	08 95       	ret

00000508 <SsNetInitTask>:
extern RingBuff 	g_SendBuff;

void SsNetInitTask(void)
{

}
 508:	08 95       	ret

0000050a <SsNetIsCheckSumValid>:
	unsigned char	i;	
	unsigned char	ucLastData	= 0x00;

	RingBuff*	ptr	= &g_SendBuff;

	for(i = 0; i < (ptr->num - 1);	i++)
 50a:	20 91 9c 00 	lds	r18, 0x009C
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	21 50       	subi	r18, 0x01	; 1
 512:	30 40       	sbci	r19, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	06 c0       	rjmp	.+12     	; 0x526 <SsNetIsCheckSumValid+0x1c>
	{
		ucCheckSum += ptr->buffer[i];
 51a:	46 56       	subi	r20, 0x66	; 102
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	fa 01       	movw	r30, r20
 520:	44 81       	ldd	r20, Z+4	; 0x04
 522:	94 0f       	add	r25, r20
	unsigned char	i;	
	unsigned char	ucLastData	= 0x00;

	RingBuff*	ptr	= &g_SendBuff;

	for(i = 0; i < (ptr->num - 1);	i++)
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	48 2f       	mov	r20, r24
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	42 17       	cp	r20, r18
 52c:	53 07       	cpc	r21, r19
 52e:	ac f3       	brlt	.-22     	; 0x51a <SsNetIsCheckSumValid+0x10>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	26 56       	subi	r18, 0x66	; 102
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	f9 01       	movw	r30, r18
 538:	24 81       	ldd	r18, Z+4	; 0x04
 53a:	92 17       	cp	r25, r18
 53c:	09 f4       	brne	.+2      	; 0x540 <SsNetIsCheckSumValid+0x36>
 53e:	81 e0       	ldi	r24, 0x01	; 1

	if(ucCheckSum == ucLastData)
		return CHECKSUM_OK;
	else
		return CHECKSUM_ERR;
}
 540:	08 95       	ret

00000542 <SsNetDispMsg>:

void SsNetDispMsg(void)
{
	return;
}
 542:	08 95       	ret

00000544 <SsNetCtrlRxTimeout>:

void SsNetCtrlRxTimeout	(unsigned char	ucCtrl)
{
	g_ucRxTimeout = ucCtrl;
 544:	80 93 91 00 	sts	0x0091, r24
}
 548:	08 95       	ret

0000054a <SsNetGetRxTimeout>:

unsigned char SsNetGetRxTimeout(void)
{
	return (g_ucRxTimeout);
}
 54a:	80 91 91 00 	lds	r24, 0x0091
 54e:	08 95       	ret

00000550 <SsNetSetNextTask>:

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 550:	80 93 8e 00 	sts	0x008E, r24
}
 554:	08 95       	ret

00000556 <SsNetMainTask>:

void SsNetMainTask(void)
{
	unsigned char*	pNumBuf;

	switch(g_ucSsNetTaskState)
 556:	80 91 8e 00 	lds	r24, 0x008E
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	f9 f0       	breq	.+62     	; 0x59c <SsNetMainTask+0x46>
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	30 f4       	brcc	.+12     	; 0x56e <SsNetMainTask+0x18>
 562:	88 23       	and	r24, r24
 564:	51 f0       	breq	.+20     	; 0x57a <SsNetMainTask+0x24>
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	09 f0       	breq	.+2      	; 0x56c <SsNetMainTask+0x16>
 56a:	6b c0       	rjmp	.+214    	; 0x642 <SsNetMainTask+0xec>
 56c:	10 c0       	rjmp	.+32     	; 0x58e <SsNetMainTask+0x38>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	e1 f1       	breq	.+120    	; 0x5ea <SsNetMainTask+0x94>
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	09 f0       	breq	.+2      	; 0x578 <SsNetMainTask+0x22>
 576:	65 c0       	rjmp	.+202    	; 0x642 <SsNetMainTask+0xec>
 578:	4d c0       	rjmp	.+154    	; 0x614 <SsNetMainTask+0xbe>
	{
		case TASK_IDLE:
			ToggleLED(LED1);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 b5 00 	call	0x16a	; 0x16a <ToggleLED>
			
			if(g_SendBuff.num)
 580:	80 91 9c 00 	lds	r24, 0x009C
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <SsNetMainTask+0x34>
 588:	5c c0       	rjmp	.+184    	; 0x642 <SsNetMainTask+0xec>
	return (g_ucRxTimeout);
}

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	40 c0       	rjmp	.+128    	; 0x60e <SsNetMainTask+0xb8>
				SsNetSetNextTask(TASK_RX_WAIT);

			break;

		case TASK_RX_PREP:
			InitRingBuff(&g_SendBuff);
 58e:	8a e9       	ldi	r24, 0x9A	; 154
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 c0 00 	call	0x180	; 0x180 <InitRingBuff>
	return (g_ucRxTimeout);
}

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 596:	10 92 8e 00 	sts	0x008E, r1
 59a:	08 95       	ret
			SsNetSetNextTask(TASK_IDLE);
			break;

		case TASK_RX_WAIT:

			g_ucMsgLength = g_SendBuff.buffer[0];
 59c:	80 91 9e 00 	lds	r24, 0x009E
 5a0:	80 93 90 00 	sts	0x0090, r24

			if(g_ucMsgLength > 0)
 5a4:	88 23       	and	r24, r24
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <SsNetMainTask+0x6e>
			{
				g_usMsgTimeLimit 	= TIMEOUT_BYTE * g_SendBuff.buffer[0];
 5a8:	94 e6       	ldi	r25, 0x64	; 100
 5aa:	89 9f       	mul	r24, r25
 5ac:	c0 01       	movw	r24, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	90 93 97 00 	sts	0x0097, r25
 5b4:	80 93 96 00 	sts	0x0096, r24
				g_usMsgTick			= 0x0000;
 5b8:	10 92 95 00 	sts	0x0095, r1
 5bc:	10 92 94 00 	sts	0x0094, r1
	return (g_ucRxTimeout);
}

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	25 c0       	rjmp	.+74     	; 0x60e <SsNetMainTask+0xb8>

				SsNetSetNextTask(TASK_MSG_ORGANIZE);
			}
			else
			{
				g_ucProtocolErr		= ERR_SSNET_NO_DATA;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	1c c0       	rjmp	.+56     	; 0x600 <SsNetMainTask+0xaa>
			pNumBuf = (unsigned char*)&(g_SendBuff.num);
	
			while(g_ucMsgLength > *pNumBuf)
			{
				//****test***********
				SendUART("C");
 5c8:	82 e8       	ldi	r24, 0x82	; 130
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 80 00 	call	0x100	; 0x100 <SendUART>
				//*******************
				if(g_usMsgTick > g_usMsgTimeLimit)
 5d0:	20 91 94 00 	lds	r18, 0x0094
 5d4:	30 91 95 00 	lds	r19, 0x0095
 5d8:	80 91 96 00 	lds	r24, 0x0096
 5dc:	90 91 97 00 	lds	r25, 0x0097
 5e0:	82 17       	cp	r24, r18
 5e2:	93 07       	cpc	r25, r19
 5e4:	10 f4       	brcc	.+4      	; 0x5ea <SsNetMainTask+0x94>
				{
					g_ucProtocolErr		= ERR_SSNET_TIMEOUT_MSG;
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	0b c0       	rjmp	.+22     	; 0x600 <SsNetMainTask+0xaa>

		case TASK_MSG_ORGANIZE:

			pNumBuf = (unsigned char*)&(g_SendBuff.num);
	
			while(g_ucMsgLength > *pNumBuf)
 5ea:	90 91 90 00 	lds	r25, 0x0090
 5ee:	80 91 9c 00 	lds	r24, 0x009C
 5f2:	89 17       	cp	r24, r25
 5f4:	48 f3       	brcs	.-46     	; 0x5c8 <SsNetMainTask+0x72>
					
					return;
				}
			}

			if(!SsNetIsCheckSumValid())
 5f6:	0e 94 85 02 	call	0x50a	; 0x50a <SsNetIsCheckSumValid>
 5fa:	88 23       	and	r24, r24
 5fc:	21 f4       	brne	.+8      	; 0x606 <SsNetMainTask+0xb0>
			{
				g_ucProtocolErr		= ERR_SSNET_CHECKSUM_INVALID;
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	80 93 8f 00 	sts	0x008F, r24
 604:	03 c0       	rjmp	.+6      	; 0x60c <SsNetMainTask+0xb6>
	return;
}

void SsNetCtrlRxTimeout	(unsigned char	ucCtrl)
{
	g_ucRxTimeout = ucCtrl;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 91 00 	sts	0x0091, r24
	return (g_ucRxTimeout);
}

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 60c:	84 e0       	ldi	r24, 0x04	; 4
 60e:	80 93 8e 00 	sts	0x008E, r24
				SsNetCtrlRxTimeout(SET);
			}
		
			SsNetSetNextTask(TASK_RESP_MSG);
			
			break;
 612:	08 95       	ret

		case TASK_RESP_MSG:
			
			g_usTest++;
 614:	80 91 98 00 	lds	r24, 0x0098
 618:	90 91 99 00 	lds	r25, 0x0099
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	90 93 99 00 	sts	0x0099, r25
 622:	80 93 98 00 	sts	0x0098, r24

			if(g_ucProtocolErr)
 626:	80 91 8f 00 	lds	r24, 0x008F
 62a:	88 23       	and	r24, r24
 62c:	19 f0       	breq	.+6      	; 0x634 <SsNetMainTask+0xde>
				SendUART("A");//xbSend("\rMsgErr\r");
 62e:	84 e8       	ldi	r24, 0x84	; 132
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <SsNetMainTask+0xe2>
			else
				SendUART("B");//xbSend("\rMsgOk\r");	
 634:	86 e8       	ldi	r24, 0x86	; 134
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 80 00 	call	0x100	; 0x100 <SendUART>
	return (g_ucRxTimeout);
}

void SsNetSetNextTask(unsigned char	ucState)
{
	g_ucSsNetTaskState = ucState;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 8e 00 	sts	0x008E, r24
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
